
Master(V1.20).elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000526c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001010  0800540c  0800540c  0001540c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800641c  0800641c  0001641c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006420  08006420  00016420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000084  20000000  08006424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
  7 .bss          0000066c  20000084  20000084  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200006f0  200006f0  00020084  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   000256c1  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003a86  00000000  00000000  00045775  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000e256  00000000  00000000  000491fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001070  00000000  00000000  00057458  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000014b8  00000000  00000000  000584c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a9d7  00000000  00000000  00059980  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000063ac  00000000  00000000  00064357  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0006a703  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003798  00000000  00000000  0006a780  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080053f4 	.word	0x080053f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	080053f4 	.word	0x080053f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000280:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000282:	4a0e      	ldr	r2, [pc, #56]	; (80002bc <HAL_InitTick+0x3c>)
 8000284:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <HAL_InitTick+0x40>)
{
 8000286:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000288:	7818      	ldrb	r0, [r3, #0]
 800028a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800028e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000292:	6810      	ldr	r0, [r2, #0]
 8000294:	fbb0 f0f3 	udiv	r0, r0, r3
 8000298:	f000 fc28 	bl	8000aec <HAL_SYSTICK_Config>
 800029c:	4604      	mov	r4, r0
 800029e:	b958      	cbnz	r0, 80002b8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002a0:	2d0f      	cmp	r5, #15
 80002a2:	d809      	bhi.n	80002b8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002a4:	4602      	mov	r2, r0
 80002a6:	4629      	mov	r1, r5
 80002a8:	f04f 30ff 	mov.w	r0, #4294967295
 80002ac:	f000 fbea 	bl	8000a84 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002b0:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <HAL_InitTick+0x44>)
 80002b2:	4620      	mov	r0, r4
 80002b4:	601d      	str	r5, [r3, #0]
 80002b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80002b8:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80002ba:	bd38      	pop	{r3, r4, r5, pc}
 80002bc:	2000001c 	.word	0x2000001c
 80002c0:	20000000 	.word	0x20000000
 80002c4:	20000004 	.word	0x20000004

080002c8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002c8:	4a07      	ldr	r2, [pc, #28]	; (80002e8 <HAL_Init+0x20>)
{
 80002ca:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002cc:	6813      	ldr	r3, [r2, #0]
 80002ce:	f043 0310 	orr.w	r3, r3, #16
 80002d2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002d4:	2003      	movs	r0, #3
 80002d6:	f000 fbc3 	bl	8000a60 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80002da:	2000      	movs	r0, #0
 80002dc:	f7ff ffd0 	bl	8000280 <HAL_InitTick>
  HAL_MspInit();
 80002e0:	f003 fd8c 	bl	8003dfc <HAL_MspInit>
}
 80002e4:	2000      	movs	r0, #0
 80002e6:	bd08      	pop	{r3, pc}
 80002e8:	40022000 	.word	0x40022000

080002ec <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80002ec:	4a03      	ldr	r2, [pc, #12]	; (80002fc <HAL_IncTick+0x10>)
 80002ee:	4b04      	ldr	r3, [pc, #16]	; (8000300 <HAL_IncTick+0x14>)
 80002f0:	6811      	ldr	r1, [r2, #0]
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	440b      	add	r3, r1
 80002f6:	6013      	str	r3, [r2, #0]
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	200000bc 	.word	0x200000bc
 8000300:	20000000 	.word	0x20000000

08000304 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000304:	4b01      	ldr	r3, [pc, #4]	; (800030c <HAL_GetTick+0x8>)
 8000306:	6818      	ldr	r0, [r3, #0]
}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	200000bc 	.word	0x200000bc

08000310 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000310:	b538      	push	{r3, r4, r5, lr}
 8000312:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000314:	f7ff fff6 	bl	8000304 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000318:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800031a:	bf1c      	itt	ne
 800031c:	4b05      	ldrne	r3, [pc, #20]	; (8000334 <HAL_Delay+0x24>)
 800031e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000320:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000322:	bf18      	it	ne
 8000324:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000326:	f7ff ffed 	bl	8000304 <HAL_GetTick>
 800032a:	1b40      	subs	r0, r0, r5
 800032c:	4284      	cmp	r4, r0
 800032e:	d8fa      	bhi.n	8000326 <HAL_Delay+0x16>
  {
  }
}
 8000330:	bd38      	pop	{r3, r4, r5, pc}
 8000332:	bf00      	nop
 8000334:	20000000 	.word	0x20000000

08000338 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000338:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800033a:	6803      	ldr	r3, [r0, #0]
{
 800033c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 800033e:	6898      	ldr	r0, [r3, #8]
 8000340:	f000 0003 	and.w	r0, r0, #3
 8000344:	2801      	cmp	r0, #1
 8000346:	d001      	beq.n	800034c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000348:	2000      	movs	r0, #0
 800034a:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 800034c:	681a      	ldr	r2, [r3, #0]
 800034e:	07d2      	lsls	r2, r2, #31
 8000350:	d5fa      	bpl.n	8000348 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000352:	689a      	ldr	r2, [r3, #8]
 8000354:	f002 020d 	and.w	r2, r2, #13
 8000358:	2a01      	cmp	r2, #1
 800035a:	d11b      	bne.n	8000394 <ADC_Disable+0x5c>
      __HAL_ADC_DISABLE(hadc);
 800035c:	689a      	ldr	r2, [r3, #8]
 800035e:	f042 0202 	orr.w	r2, r2, #2
 8000362:	609a      	str	r2, [r3, #8]
 8000364:	2203      	movs	r2, #3
 8000366:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000368:	f7ff ffcc 	bl	8000304 <HAL_GetTick>
 800036c:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800036e:	6823      	ldr	r3, [r4, #0]
 8000370:	689b      	ldr	r3, [r3, #8]
 8000372:	07db      	lsls	r3, r3, #31
 8000374:	d5e8      	bpl.n	8000348 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000376:	f7ff ffc5 	bl	8000304 <HAL_GetTick>
 800037a:	1b40      	subs	r0, r0, r5
 800037c:	2802      	cmp	r0, #2
 800037e:	d9f6      	bls.n	800036e <ADC_Disable+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000380:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000382:	f043 0310 	orr.w	r3, r3, #16
 8000386:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000388:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800038a:	f043 0301 	orr.w	r3, r3, #1
 800038e:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000390:	2001      	movs	r0, #1
 8000392:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000394:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000396:	f043 0310 	orr.w	r3, r3, #16
 800039a:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800039c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800039e:	f043 0301 	orr.w	r3, r3, #1
 80003a2:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80003a4:	bd38      	pop	{r3, r4, r5, pc}
	...

080003a8 <HAL_ADC_Init>:
{
 80003a8:	b570      	push	{r4, r5, r6, lr}
 80003aa:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0U;
 80003ac:	2300      	movs	r3, #0
 80003ae:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 80003b0:	4604      	mov	r4, r0
 80003b2:	2800      	cmp	r0, #0
 80003b4:	f000 8091 	beq.w	80004da <HAL_ADC_Init+0x132>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80003b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80003ba:	06d2      	lsls	r2, r2, #27
 80003bc:	d463      	bmi.n	8000486 <HAL_ADC_Init+0xde>
    if (hadc->State == HAL_ADC_STATE_RESET)
 80003be:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d02e      	beq.n	8000422 <HAL_ADC_Init+0x7a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003c4:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80003c6:	6823      	ldr	r3, [r4, #0]
 80003c8:	689a      	ldr	r2, [r3, #8]
 80003ca:	00d1      	lsls	r1, r2, #3
 80003cc:	d502      	bpl.n	80003d4 <HAL_ADC_Init+0x2c>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80003ce:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80003d0:	009a      	lsls	r2, r3, #2
 80003d2:	d50a      	bpl.n	80003ea <HAL_ADC_Init+0x42>
      ADC_STATE_CLR_SET(hadc->State,
 80003d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80003d6:	f023 0312 	bic.w	r3, r3, #18
 80003da:	f043 0310 	orr.w	r3, r3, #16
 80003de:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80003e2:	f043 0301 	orr.w	r3, r3, #1
 80003e6:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 80003e8:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80003ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80003ec:	06db      	lsls	r3, r3, #27
 80003ee:	d46e      	bmi.n	80004ce <HAL_ADC_Init+0x126>
 80003f0:	2800      	cmp	r0, #0
 80003f2:	d16c      	bne.n	80004ce <HAL_ADC_Init+0x126>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80003f4:	6823      	ldr	r3, [r4, #0]
 80003f6:	689d      	ldr	r5, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80003f8:	f015 0504 	ands.w	r5, r5, #4
 80003fc:	d167      	bne.n	80004ce <HAL_ADC_Init+0x126>
    ADC_STATE_CLR_SET(hadc->State,
 80003fe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000400:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8000404:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000408:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 800040c:	6462      	str	r2, [r4, #68]	; 0x44
 800040e:	4a78      	ldr	r2, [pc, #480]	; (80005f0 <HAL_ADC_Init+0x248>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000410:	d065      	beq.n	80004de <HAL_ADC_Init+0x136>
 8000412:	4293      	cmp	r3, r2
 8000414:	d166      	bne.n	80004e4 <HAL_ADC_Init+0x13c>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000416:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800041a:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800041c:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8000420:	e066      	b.n	80004f0 <HAL_ADC_Init+0x148>
      ADC_CLEAR_ERRORCODE(hadc);
 8000422:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 8000424:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000426:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8000428:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 800042c:	f003 fd2c 	bl	8003e88 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000430:	6823      	ldr	r3, [r4, #0]
 8000432:	689b      	ldr	r3, [r3, #8]
 8000434:	00de      	lsls	r6, r3, #3
 8000436:	d4c5      	bmi.n	80003c4 <HAL_ADC_Init+0x1c>
        tmp_hal_status = ADC_Disable(hadc);
 8000438:	4620      	mov	r0, r4
 800043a:	f7ff ff7d 	bl	8000338 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800043e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000440:	06d5      	lsls	r5, r2, #27
 8000442:	d4c0      	bmi.n	80003c6 <HAL_ADC_Init+0x1e>
 8000444:	2800      	cmp	r0, #0
 8000446:	d1be      	bne.n	80003c6 <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 8000448:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800044a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800044e:	f023 0302 	bic.w	r3, r3, #2
 8000452:	f043 0302 	orr.w	r3, r3, #2
 8000456:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000458:	6823      	ldr	r3, [r4, #0]
 800045a:	689a      	ldr	r2, [r3, #8]
 800045c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000460:	609a      	str	r2, [r3, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000462:	689a      	ldr	r2, [r3, #8]
 8000464:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000468:	609a      	str	r2, [r3, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800046a:	4b62      	ldr	r3, [pc, #392]	; (80005f4 <HAL_ADC_Init+0x24c>)
 800046c:	4a62      	ldr	r2, [pc, #392]	; (80005f8 <HAL_ADC_Init+0x250>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	fbb3 f2f2 	udiv	r2, r3, r2
 8000474:	230a      	movs	r3, #10
 8000476:	4353      	muls	r3, r2
            wait_loop_index--;
 8000478:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 800047a:	9b00      	ldr	r3, [sp, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d0a1      	beq.n	80003c4 <HAL_ADC_Init+0x1c>
            wait_loop_index--;
 8000480:	9b00      	ldr	r3, [sp, #0]
 8000482:	3b01      	subs	r3, #1
 8000484:	e7f8      	b.n	8000478 <HAL_ADC_Init+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000486:	4618      	mov	r0, r3
 8000488:	e7af      	b.n	80003ea <HAL_ADC_Init+0x42>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800048a:	4293      	cmp	r3, r2
 800048c:	bf0c      	ite	eq
 800048e:	9101      	streq	r1, [sp, #4]
 8000490:	9001      	strne	r0, [sp, #4]
 8000492:	e02c      	b.n	80004ee <HAL_ADC_Init+0x146>
        ADC_STATE_CLR_SET(hadc->State,
 8000494:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000496:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800049a:	f042 0220 	orr.w	r2, r2, #32
 800049e:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004a0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80004a2:	f042 0201 	orr.w	r2, r2, #1
 80004a6:	64a2      	str	r2, [r4, #72]	; 0x48
 80004a8:	e052      	b.n	8000550 <HAL_ADC_Init+0x1a8>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80004aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80004ae:	e06d      	b.n	800058c <HAL_ADC_Init+0x1e4>
 80004b0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80004b4:	e06a      	b.n	800058c <HAL_ADC_Init+0x1e4>
 80004b6:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 80004ba:	e067      	b.n	800058c <HAL_ADC_Init+0x1e4>
 80004bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004c0:	e064      	b.n	800058c <HAL_ADC_Init+0x1e4>
 80004c2:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 80004c6:	e061      	b.n	800058c <HAL_ADC_Init+0x1e4>
 80004c8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80004cc:	e05e      	b.n	800058c <HAL_ADC_Init+0x1e4>
    ADC_STATE_CLR_SET(hadc->State,
 80004ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004d0:	f023 0312 	bic.w	r3, r3, #18
 80004d4:	f043 0310 	orr.w	r3, r3, #16
 80004d8:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 80004da:	2001      	movs	r0, #1
 80004dc:	e085      	b.n	80005ea <HAL_ADC_Init+0x242>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80004de:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80004e0:	4a46      	ldr	r2, [pc, #280]	; (80005fc <HAL_ADC_Init+0x254>)
 80004e2:	e005      	b.n	80004f0 <HAL_ADC_Init+0x148>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80004e4:	4946      	ldr	r1, [pc, #280]	; (8000600 <HAL_ADC_Init+0x258>)
 80004e6:	4a47      	ldr	r2, [pc, #284]	; (8000604 <HAL_ADC_Init+0x25c>)
 80004e8:	428b      	cmp	r3, r1
 80004ea:	d1ce      	bne.n	800048a <HAL_ADC_Init+0xe2>
 80004ec:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80004ee:	4a46      	ldr	r2, [pc, #280]	; (8000608 <HAL_ADC_Init+0x260>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80004f0:	6899      	ldr	r1, [r3, #8]
 80004f2:	f001 0103 	and.w	r1, r1, #3
 80004f6:	2901      	cmp	r1, #1
 80004f8:	d102      	bne.n	8000500 <HAL_ADC_Init+0x158>
 80004fa:	6819      	ldr	r1, [r3, #0]
 80004fc:	07ce      	lsls	r6, r1, #31
 80004fe:	d40f      	bmi.n	8000520 <HAL_ADC_Init+0x178>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000500:	9901      	ldr	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000502:	b139      	cbz	r1, 8000514 <HAL_ADC_Init+0x16c>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000504:	688e      	ldr	r6, [r1, #8]
 8000506:	f006 0603 	and.w	r6, r6, #3
 800050a:	2e01      	cmp	r6, #1
 800050c:	d102      	bne.n	8000514 <HAL_ADC_Init+0x16c>
 800050e:	6809      	ldr	r1, [r1, #0]
 8000510:	07c9      	lsls	r1, r1, #31
 8000512:	d405      	bmi.n	8000520 <HAL_ADC_Init+0x178>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000514:	6891      	ldr	r1, [r2, #8]
 8000516:	6866      	ldr	r6, [r4, #4]
 8000518:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 800051c:	4331      	orrs	r1, r6
 800051e:	6091      	str	r1, [r2, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000520:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000522:	68a6      	ldr	r6, [r4, #8]
 8000524:	69e2      	ldr	r2, [r4, #28]
 8000526:	2901      	cmp	r1, #1
 8000528:	68e1      	ldr	r1, [r4, #12]
 800052a:	ea41 0106 	orr.w	r1, r1, r6
 800052e:	bf18      	it	ne
 8000530:	f44f 5580 	movne.w	r5, #4096	; 0x1000
 8000534:	ea41 3142 	orr.w	r1, r1, r2, lsl #13
 8000538:	4329      	orrs	r1, r5
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800053a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800053c:	2d01      	cmp	r5, #1
 800053e:	d107      	bne.n	8000550 <HAL_ADC_Init+0x1a8>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000540:	2a00      	cmp	r2, #0
 8000542:	d1a7      	bne.n	8000494 <HAL_ADC_Init+0xec>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000544:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000546:	3a01      	subs	r2, #1
 8000548:	ea41 4142 	orr.w	r1, r1, r2, lsl #17
 800054c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000550:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000552:	2a01      	cmp	r2, #1
 8000554:	d01d      	beq.n	8000592 <HAL_ADC_Init+0x1ea>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000556:	4d2a      	ldr	r5, [pc, #168]	; (8000600 <HAL_ADC_Init+0x258>)
 8000558:	42ab      	cmp	r3, r5
 800055a:	d003      	beq.n	8000564 <HAL_ADC_Init+0x1bc>
 800055c:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8000560:	42ab      	cmp	r3, r5
 8000562:	d1a2      	bne.n	80004aa <HAL_ADC_Init+0x102>
 8000564:	f5b2 7f30 	cmp.w	r2, #704	; 0x2c0
 8000568:	d0a2      	beq.n	80004b0 <HAL_ADC_Init+0x108>
 800056a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800056e:	d0a2      	beq.n	80004b6 <HAL_ADC_Init+0x10e>
 8000570:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
 8000574:	d0a2      	beq.n	80004bc <HAL_ADC_Init+0x114>
 8000576:	f5b2 5f8a 	cmp.w	r2, #4416	; 0x1140
 800057a:	d0a2      	beq.n	80004c2 <HAL_ADC_Init+0x11a>
 800057c:	f5b2 5f84 	cmp.w	r2, #4224	; 0x1080
 8000580:	d0a2      	beq.n	80004c8 <HAL_ADC_Init+0x120>
 8000582:	f5b2 5f86 	cmp.w	r2, #4288	; 0x10c0
 8000586:	bf08      	it	eq
 8000588:	f44f 72c0 	moveq.w	r2, #384	; 0x180
 800058c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800058e:	4329      	orrs	r1, r5
 8000590:	4311      	orrs	r1, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000592:	689a      	ldr	r2, [r3, #8]
 8000594:	f012 0f0c 	tst.w	r2, #12
 8000598:	d10b      	bne.n	80005b2 <HAL_ADC_Init+0x20a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800059a:	68da      	ldr	r2, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800059c:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800059e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80005a2:	f022 0202 	bic.w	r2, r2, #2
 80005a6:	60da      	str	r2, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80005a8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80005aa:	0052      	lsls	r2, r2, #1
 80005ac:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
 80005b0:	4311      	orrs	r1, r2
    MODIFY_REG(hadc->Instance->CFGR,
 80005b2:	68dd      	ldr	r5, [r3, #12]
 80005b4:	4a15      	ldr	r2, [pc, #84]	; (800060c <HAL_ADC_Init+0x264>)
 80005b6:	402a      	ands	r2, r5
 80005b8:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80005ba:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 80005bc:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80005be:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80005c0:	bf05      	ittet	eq
 80005c2:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 80005c4:	6a22      	ldreq	r2, [r4, #32]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80005c6:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80005c8:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80005cc:	bf06      	itte	eq
 80005ce:	f021 010f 	biceq.w	r1, r1, #15
 80005d2:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80005d4:	f022 020f 	bicne.w	r2, r2, #15
 80005d8:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80005da:	2300      	movs	r3, #0
 80005dc:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 80005de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80005e0:	f023 0303 	bic.w	r3, r3, #3
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6463      	str	r3, [r4, #68]	; 0x44
}
 80005ea:	b016      	add	sp, #88	; 0x58
 80005ec:	bd70      	pop	{r4, r5, r6, pc}
 80005ee:	bf00      	nop
 80005f0:	50000100 	.word	0x50000100
 80005f4:	2000001c 	.word	0x2000001c
 80005f8:	000f4240 	.word	0x000f4240
 80005fc:	50000300 	.word	0x50000300
 8000600:	50000400 	.word	0x50000400
 8000604:	50000500 	.word	0x50000500
 8000608:	50000700 	.word	0x50000700
 800060c:	fff0c007 	.word	0xfff0c007

08000610 <HAL_ADC_ConfigChannel>:
{
 8000610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000612:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000614:	2300      	movs	r3, #0
 8000616:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hadc);
 8000618:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800061c:	2b01      	cmp	r3, #1
{
 800061e:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8000620:	f000 8163 	beq.w	80008ea <HAL_ADC_ConfigChannel+0x2da>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000624:	682b      	ldr	r3, [r5, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000626:	68ce      	ldr	r6, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000628:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 800062a:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800062c:	0752      	lsls	r2, r2, #29
  __HAL_LOCK(hadc);
 800062e:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000632:	f100 8155 	bmi.w	80008e0 <HAL_ADC_ConfigChannel+0x2d0>
    if (sConfig->Rank < 5U)
 8000636:	6848      	ldr	r0, [r1, #4]
 8000638:	680c      	ldr	r4, [r1, #0]
 800063a:	2804      	cmp	r0, #4
 800063c:	f04f 0206 	mov.w	r2, #6
 8000640:	d831      	bhi.n	80006a6 <HAL_ADC_ConfigChannel+0x96>
      MODIFY_REG(hadc->Instance->SQR1,
 8000642:	4342      	muls	r2, r0
 8000644:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8000646:	201f      	movs	r0, #31
 8000648:	4090      	lsls	r0, r2
 800064a:	ea27 0000 	bic.w	r0, r7, r0
 800064e:	fa04 f202 	lsl.w	r2, r4, r2
 8000652:	4302      	orrs	r2, r0
 8000654:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000656:	689a      	ldr	r2, [r3, #8]
 8000658:	f012 0f0c 	tst.w	r2, #12
 800065c:	d162      	bne.n	8000724 <HAL_ADC_ConfigChannel+0x114>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800065e:	2c09      	cmp	r4, #9
 8000660:	ea4f 0244 	mov.w	r2, r4, lsl #1
 8000664:	688f      	ldr	r7, [r1, #8]
 8000666:	d946      	bls.n	80006f6 <HAL_ADC_ConfigChannel+0xe6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000668:	4422      	add	r2, r4
 800066a:	6998      	ldr	r0, [r3, #24]
 800066c:	3a1e      	subs	r2, #30
 800066e:	f04f 0e07 	mov.w	lr, #7
 8000672:	fa0e fe02 	lsl.w	lr, lr, r2
 8000676:	ea20 000e 	bic.w	r0, r0, lr
 800067a:	fa07 f202 	lsl.w	r2, r7, r2
 800067e:	4302      	orrs	r2, r0
 8000680:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000682:	68da      	ldr	r2, [r3, #12]
 8000684:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 8000688:	694a      	ldr	r2, [r1, #20]
 800068a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800068e:	fa02 fe0e 	lsl.w	lr, r2, lr
    switch (sConfig->OffsetNumber)
 8000692:	690a      	ldr	r2, [r1, #16]
 8000694:	3a01      	subs	r2, #1
 8000696:	ea4f 6c84 	mov.w	ip, r4, lsl #26
 800069a:	2a03      	cmp	r2, #3
 800069c:	d873      	bhi.n	8000786 <HAL_ADC_ConfigChannel+0x176>
 800069e:	e8df f002 	tbb	[pc, r2]
 80006a2:	5137      	.short	0x5137
 80006a4:	675c      	.short	0x675c
    else if (sConfig->Rank < 10U)
 80006a6:	2809      	cmp	r0, #9
 80006a8:	d80b      	bhi.n	80006c2 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 80006aa:	4342      	muls	r2, r0
 80006ac:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 80006ae:	3a1e      	subs	r2, #30
 80006b0:	201f      	movs	r0, #31
 80006b2:	4090      	lsls	r0, r2
 80006b4:	ea27 0000 	bic.w	r0, r7, r0
 80006b8:	fa04 f202 	lsl.w	r2, r4, r2
 80006bc:	4302      	orrs	r2, r0
 80006be:	635a      	str	r2, [r3, #52]	; 0x34
 80006c0:	e7c9      	b.n	8000656 <HAL_ADC_ConfigChannel+0x46>
    else if (sConfig->Rank < 15U)
 80006c2:	280e      	cmp	r0, #14
 80006c4:	d80b      	bhi.n	80006de <HAL_ADC_ConfigChannel+0xce>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80006c6:	4342      	muls	r2, r0
 80006c8:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80006ca:	3a3c      	subs	r2, #60	; 0x3c
 80006cc:	201f      	movs	r0, #31
 80006ce:	4090      	lsls	r0, r2
 80006d0:	ea27 0000 	bic.w	r0, r7, r0
 80006d4:	fa04 f202 	lsl.w	r2, r4, r2
 80006d8:	4302      	orrs	r2, r0
 80006da:	639a      	str	r2, [r3, #56]	; 0x38
 80006dc:	e7bb      	b.n	8000656 <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80006de:	4342      	muls	r2, r0
 80006e0:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 80006e2:	3a5a      	subs	r2, #90	; 0x5a
 80006e4:	201f      	movs	r0, #31
 80006e6:	4090      	lsls	r0, r2
 80006e8:	ea27 0000 	bic.w	r0, r7, r0
 80006ec:	fa04 f202 	lsl.w	r2, r4, r2
 80006f0:	4302      	orrs	r2, r0
 80006f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80006f4:	e7af      	b.n	8000656 <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80006f6:	6958      	ldr	r0, [r3, #20]
 80006f8:	4422      	add	r2, r4
 80006fa:	f04f 0e07 	mov.w	lr, #7
 80006fe:	fa0e fe02 	lsl.w	lr, lr, r2
 8000702:	ea20 000e 	bic.w	r0, r0, lr
 8000706:	fa07 f202 	lsl.w	r2, r7, r2
 800070a:	4302      	orrs	r2, r0
 800070c:	615a      	str	r2, [r3, #20]
 800070e:	e7b8      	b.n	8000682 <HAL_ADC_ConfigChannel+0x72>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000710:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000712:	4f83      	ldr	r7, [pc, #524]	; (8000920 <HAL_ADC_ConfigChannel+0x310>)
 8000714:	4017      	ands	r7, r2
 8000716:	ea47 020c 	orr.w	r2, r7, ip
 800071a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800071e:	ea42 020e 	orr.w	r2, r2, lr
 8000722:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000724:	689a      	ldr	r2, [r3, #8]
 8000726:	f002 0203 	and.w	r2, r2, #3
 800072a:	2a01      	cmp	r2, #1
 800072c:	f040 80df 	bne.w	80008ee <HAL_ADC_ConfigChannel+0x2de>
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	07d7      	lsls	r7, r2, #31
 8000734:	f140 80db 	bpl.w	80008ee <HAL_ADC_ConfigChannel+0x2de>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000738:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800073a:	2300      	movs	r3, #0
 800073c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
 8000740:	b017      	add	sp, #92	; 0x5c
 8000742:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000744:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000746:	4f76      	ldr	r7, [pc, #472]	; (8000920 <HAL_ADC_ConfigChannel+0x310>)
 8000748:	4017      	ands	r7, r2
 800074a:	ea47 020c 	orr.w	r2, r7, ip
 800074e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000752:	ea42 020e 	orr.w	r2, r2, lr
 8000756:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8000758:	e7e4      	b.n	8000724 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR3               ,
 800075a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800075c:	4870      	ldr	r0, [pc, #448]	; (8000920 <HAL_ADC_ConfigChannel+0x310>)
 800075e:	4010      	ands	r0, r2
 8000760:	ea40 020c 	orr.w	r2, r0, ip
 8000764:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000768:	ea42 020e 	orr.w	r2, r2, lr
 800076c:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800076e:	e7d9      	b.n	8000724 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000770:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8000772:	4a6b      	ldr	r2, [pc, #428]	; (8000920 <HAL_ADC_ConfigChannel+0x310>)
 8000774:	4002      	ands	r2, r0
 8000776:	ea42 020c 	orr.w	r2, r2, ip
 800077a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800077e:	ea42 020e 	orr.w	r2, r2, lr
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000782:	66da      	str	r2, [r3, #108]	; 0x6c
 8000784:	e7ce      	b.n	8000724 <HAL_ADC_ConfigChannel+0x114>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000786:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000788:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800078c:	4562      	cmp	r2, ip
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800078e:	bf02      	ittt	eq
 8000790:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 8000792:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000796:	661a      	streq	r2, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000798:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800079a:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800079e:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80007a0:	bf02      	ittt	eq
 80007a2:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 80007a4:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80007a8:	665a      	streq	r2, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80007aa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80007ac:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80007b0:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80007b2:	bf02      	ittt	eq
 80007b4:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 80007b6:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80007ba:	669a      	streq	r2, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80007bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80007be:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80007c2:	4594      	cmp	ip, r2
 80007c4:	d1ae      	bne.n	8000724 <HAL_ADC_ConfigChannel+0x114>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80007c6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80007c8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80007cc:	e7d9      	b.n	8000782 <HAL_ADC_ConfigChannel+0x172>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80007ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80007d2:	2101      	movs	r1, #1
 80007d4:	40a1      	lsls	r1, r4
 80007d6:	ea22 0201 	bic.w	r2, r2, r1
 80007da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80007de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007e2:	d01e      	beq.n	8000822 <HAL_ADC_ConfigChannel+0x212>
 80007e4:	494f      	ldr	r1, [pc, #316]	; (8000924 <HAL_ADC_ConfigChannel+0x314>)
 80007e6:	4a50      	ldr	r2, [pc, #320]	; (8000928 <HAL_ADC_ConfigChannel+0x318>)
 80007e8:	4850      	ldr	r0, [pc, #320]	; (800092c <HAL_ADC_ConfigChannel+0x31c>)
 80007ea:	4283      	cmp	r3, r0
 80007ec:	bf08      	it	eq
 80007ee:	460a      	moveq	r2, r1
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80007f0:	2c10      	cmp	r4, #16
 80007f2:	d118      	bne.n	8000826 <HAL_ADC_ConfigChannel+0x216>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80007f4:	6891      	ldr	r1, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80007f6:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80007fa:	d19d      	bne.n	8000738 <HAL_ADC_ConfigChannel+0x128>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80007fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000800:	494a      	ldr	r1, [pc, #296]	; (800092c <HAL_ADC_ConfigChannel+0x31c>)
 8000802:	d11c      	bne.n	800083e <HAL_ADC_ConfigChannel+0x22e>
 8000804:	9101      	str	r1, [sp, #4]
 8000806:	e024      	b.n	8000852 <HAL_ADC_ConfigChannel+0x242>
        MODIFY_REG(hadc->Instance->SMPR1,
 8000808:	1c60      	adds	r0, r4, #1
 800080a:	6959      	ldr	r1, [r3, #20]
 800080c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000810:	2207      	movs	r2, #7
 8000812:	4082      	lsls	r2, r0
 8000814:	ea21 0102 	bic.w	r1, r1, r2
 8000818:	fa06 f200 	lsl.w	r2, r6, r0
 800081c:	430a      	orrs	r2, r1
 800081e:	615a      	str	r2, [r3, #20]
 8000820:	e7dd      	b.n	80007de <HAL_ADC_ConfigChannel+0x1ce>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000822:	4a40      	ldr	r2, [pc, #256]	; (8000924 <HAL_ADC_ConfigChannel+0x314>)
 8000824:	e7e4      	b.n	80007f0 <HAL_ADC_ConfigChannel+0x1e0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000826:	2c11      	cmp	r4, #17
 8000828:	d103      	bne.n	8000832 <HAL_ADC_ConfigChannel+0x222>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800082a:	6891      	ldr	r1, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800082c:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8000830:	e7e3      	b.n	80007fa <HAL_ADC_ConfigChannel+0x1ea>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000832:	2c12      	cmp	r4, #18
 8000834:	d180      	bne.n	8000738 <HAL_ADC_ConfigChannel+0x128>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000836:	6891      	ldr	r1, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000838:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 800083c:	e7dd      	b.n	80007fa <HAL_ADC_ConfigChannel+0x1ea>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800083e:	428b      	cmp	r3, r1
 8000840:	d102      	bne.n	8000848 <HAL_ADC_ConfigChannel+0x238>
 8000842:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000846:	e7dd      	b.n	8000804 <HAL_ADC_ConfigChannel+0x1f4>
 8000848:	4939      	ldr	r1, [pc, #228]	; (8000930 <HAL_ADC_ConfigChannel+0x320>)
 800084a:	483a      	ldr	r0, [pc, #232]	; (8000934 <HAL_ADC_ConfigChannel+0x324>)
 800084c:	428b      	cmp	r3, r1
 800084e:	d12b      	bne.n	80008a8 <HAL_ADC_ConfigChannel+0x298>
 8000850:	9001      	str	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000852:	6899      	ldr	r1, [r3, #8]
 8000854:	f001 0103 	and.w	r1, r1, #3
 8000858:	2901      	cmp	r1, #1
 800085a:	d102      	bne.n	8000862 <HAL_ADC_ConfigChannel+0x252>
 800085c:	6819      	ldr	r1, [r3, #0]
 800085e:	07c8      	lsls	r0, r1, #31
 8000860:	d438      	bmi.n	80008d4 <HAL_ADC_ConfigChannel+0x2c4>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000862:	9901      	ldr	r1, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000864:	b139      	cbz	r1, 8000876 <HAL_ADC_ConfigChannel+0x266>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000866:	6888      	ldr	r0, [r1, #8]
 8000868:	f000 0003 	and.w	r0, r0, #3
 800086c:	2801      	cmp	r0, #1
 800086e:	d102      	bne.n	8000876 <HAL_ADC_ConfigChannel+0x266>
 8000870:	6809      	ldr	r1, [r1, #0]
 8000872:	07c9      	lsls	r1, r1, #31
 8000874:	d42e      	bmi.n	80008d4 <HAL_ADC_ConfigChannel+0x2c4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000876:	2c10      	cmp	r4, #16
 8000878:	d11a      	bne.n	80008b0 <HAL_ADC_ConfigChannel+0x2a0>
 800087a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800087e:	f47f af5b 	bne.w	8000738 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000882:	6893      	ldr	r3, [r2, #8]
 8000884:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000888:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <HAL_ADC_ConfigChannel+0x328>)
 800088c:	4a2b      	ldr	r2, [pc, #172]	; (800093c <HAL_ADC_ConfigChannel+0x32c>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	fbb3 f2f2 	udiv	r2, r3, r2
 8000894:	230a      	movs	r3, #10
 8000896:	4353      	muls	r3, r2
            wait_loop_index--;
 8000898:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 800089a:	9b00      	ldr	r3, [sp, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	f43f af4b 	beq.w	8000738 <HAL_ADC_ConfigChannel+0x128>
            wait_loop_index--;
 80008a2:	9b00      	ldr	r3, [sp, #0]
 80008a4:	3b01      	subs	r3, #1
 80008a6:	e7f7      	b.n	8000898 <HAL_ADC_ConfigChannel+0x288>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80008a8:	4283      	cmp	r3, r0
 80008aa:	bf18      	it	ne
 80008ac:	2100      	movne	r1, #0
 80008ae:	e7a9      	b.n	8000804 <HAL_ADC_ConfigChannel+0x1f4>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80008b0:	2c11      	cmp	r4, #17
 80008b2:	d108      	bne.n	80008c6 <HAL_ADC_ConfigChannel+0x2b6>
 80008b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008b8:	f47f af3e 	bne.w	8000738 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80008bc:	6893      	ldr	r3, [r2, #8]
 80008be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80008c2:	6093      	str	r3, [r2, #8]
 80008c4:	e738      	b.n	8000738 <HAL_ADC_ConfigChannel+0x128>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80008c6:	2c12      	cmp	r4, #18
 80008c8:	f47f af36 	bne.w	8000738 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80008cc:	6893      	ldr	r3, [r2, #8]
 80008ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008d2:	e7f6      	b.n	80008c2 <HAL_ADC_ConfigChannel+0x2b2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008d4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80008d6:	f043 0320 	orr.w	r3, r3, #32
 80008da:	646b      	str	r3, [r5, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 80008dc:	2001      	movs	r0, #1
 80008de:	e72c      	b.n	800073a <HAL_ADC_ConfigChannel+0x12a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008e0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80008e2:	f043 0320 	orr.w	r3, r3, #32
 80008e6:	646b      	str	r3, [r5, #68]	; 0x44
 80008e8:	e727      	b.n	800073a <HAL_ADC_ConfigChannel+0x12a>
  __HAL_LOCK(hadc);
 80008ea:	2002      	movs	r0, #2
 80008ec:	e728      	b.n	8000740 <HAL_ADC_ConfigChannel+0x130>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80008ee:	2e01      	cmp	r6, #1
 80008f0:	f47f af6d 	bne.w	80007ce <HAL_ADC_ConfigChannel+0x1be>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80008f4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80008f8:	40a6      	lsls	r6, r4
 80008fa:	4316      	orrs	r6, r2
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80008fc:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80008fe:	f8c3 60b0 	str.w	r6, [r3, #176]	; 0xb0
 8000902:	688e      	ldr	r6, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000904:	d980      	bls.n	8000808 <HAL_ADC_ConfigChannel+0x1f8>
        MODIFY_REG(hadc->Instance->SMPR2,
 8000906:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800090a:	6999      	ldr	r1, [r3, #24]
 800090c:	3a1b      	subs	r2, #27
 800090e:	2007      	movs	r0, #7
 8000910:	4090      	lsls	r0, r2
 8000912:	ea21 0100 	bic.w	r1, r1, r0
 8000916:	fa06 f202 	lsl.w	r2, r6, r2
 800091a:	430a      	orrs	r2, r1
 800091c:	619a      	str	r2, [r3, #24]
 800091e:	e75e      	b.n	80007de <HAL_ADC_ConfigChannel+0x1ce>
 8000920:	83fff000 	.word	0x83fff000
 8000924:	50000300 	.word	0x50000300
 8000928:	50000700 	.word	0x50000700
 800092c:	50000100 	.word	0x50000100
 8000930:	50000400 	.word	0x50000400
 8000934:	50000500 	.word	0x50000500
 8000938:	2000001c 	.word	0x2000001c
 800093c:	000f4240 	.word	0x000f4240

08000940 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8000940:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000942:	6802      	ldr	r2, [r0, #0]
 8000944:	4b41      	ldr	r3, [pc, #260]	; (8000a4c <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8000946:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
{
 800094a:	b097      	sub	sp, #92	; 0x5c
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800094c:	d101      	bne.n	8000952 <HAL_ADCEx_MultiModeConfigChannel+0x12>
 800094e:	9301      	str	r3, [sp, #4]
 8000950:	e009      	b.n	8000966 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8000952:	429a      	cmp	r2, r3
 8000954:	d102      	bne.n	800095c <HAL_ADCEx_MultiModeConfigChannel+0x1c>
 8000956:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800095a:	e7f8      	b.n	800094e <HAL_ADCEx_MultiModeConfigChannel+0xe>
 800095c:	4b3c      	ldr	r3, [pc, #240]	; (8000a50 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 800095e:	4c3d      	ldr	r4, [pc, #244]	; (8000a54 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8000960:	429a      	cmp	r2, r3
 8000962:	d130      	bne.n	80009c6 <HAL_ADCEx_MultiModeConfigChannel+0x86>
 8000964:	9401      	str	r4, [sp, #4]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8000966:	9c01      	ldr	r4, [sp, #4]
 8000968:	2c00      	cmp	r4, #0
 800096a:	d058      	beq.n	8000a1e <HAL_ADCEx_MultiModeConfigChannel+0xde>
  __HAL_LOCK(hadc);
 800096c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000970:	2b01      	cmp	r3, #1
 8000972:	d056      	beq.n	8000a22 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 8000974:	2301      	movs	r3, #1
 8000976:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800097a:	6893      	ldr	r3, [r2, #8]
 800097c:	075b      	lsls	r3, r3, #29
 800097e:	d443      	bmi.n	8000a08 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8000980:	68a3      	ldr	r3, [r4, #8]
 8000982:	075f      	lsls	r7, r3, #29
 8000984:	d440      	bmi.n	8000a08 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000986:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800098a:	d020      	beq.n	80009ce <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 800098c:	4d32      	ldr	r5, [pc, #200]	; (8000a58 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 800098e:	4b33      	ldr	r3, [pc, #204]	; (8000a5c <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8000990:	4e2e      	ldr	r6, [pc, #184]	; (8000a4c <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8000992:	42b2      	cmp	r2, r6
 8000994:	bf08      	it	eq
 8000996:	462b      	moveq	r3, r5
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000998:	680d      	ldr	r5, [r1, #0]
 800099a:	b1d5      	cbz	r5, 80009d2 <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800099c:	684e      	ldr	r6, [r1, #4]
 800099e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80009a2:	4637      	mov	r7, r6
 80009a4:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80009a6:	ea47 3646 	orr.w	r6, r7, r6, lsl #13
 80009aa:	f42e 4760 	bic.w	r7, lr, #57344	; 0xe000
 80009ae:	433e      	orrs	r6, r7
 80009b0:	609e      	str	r6, [r3, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80009b2:	6896      	ldr	r6, [r2, #8]
 80009b4:	f006 0603 	and.w	r6, r6, #3
 80009b8:	2e01      	cmp	r6, #1
 80009ba:	d134      	bne.n	8000a26 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
 80009bc:	6812      	ldr	r2, [r2, #0]
 80009be:	07d6      	lsls	r6, r2, #31
 80009c0:	d531      	bpl.n	8000a26 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009c2:	2300      	movs	r3, #0
 80009c4:	e025      	b.n	8000a12 <HAL_ADCEx_MultiModeConfigChannel+0xd2>
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80009c6:	42a2      	cmp	r2, r4
 80009c8:	bf18      	it	ne
 80009ca:	2300      	movne	r3, #0
 80009cc:	e7bf      	b.n	800094e <HAL_ADCEx_MultiModeConfigChannel+0xe>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80009ce:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 80009d0:	e7e2      	b.n	8000998 <HAL_ADCEx_MultiModeConfigChannel+0x58>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80009d2:	6899      	ldr	r1, [r3, #8]
 80009d4:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80009d8:	6099      	str	r1, [r3, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80009da:	6891      	ldr	r1, [r2, #8]
 80009dc:	f001 0103 	and.w	r1, r1, #3
 80009e0:	2901      	cmp	r1, #1
 80009e2:	d102      	bne.n	80009ea <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80009e4:	6812      	ldr	r2, [r2, #0]
 80009e6:	07d1      	lsls	r1, r2, #31
 80009e8:	d4eb      	bmi.n	80009c2 <HAL_ADCEx_MultiModeConfigChannel+0x82>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80009ea:	68a2      	ldr	r2, [r4, #8]
 80009ec:	f002 0203 	and.w	r2, r2, #3
 80009f0:	2a01      	cmp	r2, #1
 80009f2:	d102      	bne.n	80009fa <HAL_ADCEx_MultiModeConfigChannel+0xba>
 80009f4:	6822      	ldr	r2, [r4, #0]
 80009f6:	07d2      	lsls	r2, r2, #31
 80009f8:	d4e3      	bmi.n	80009c2 <HAL_ADCEx_MultiModeConfigChannel+0x82>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80009fa:	689a      	ldr	r2, [r3, #8]
 80009fc:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000a00:	f022 020f 	bic.w	r2, r2, #15
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	e7dc      	b.n	80009c2 <HAL_ADCEx_MultiModeConfigChannel+0x82>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a08:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000a0a:	f043 0320 	orr.w	r3, r3, #32
 8000a0e:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000a10:	2301      	movs	r3, #1
  __HAL_UNLOCK(hadc);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
} 
 8000a18:	4618      	mov	r0, r3
 8000a1a:	b017      	add	sp, #92	; 0x5c
 8000a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e7fa      	b.n	8000a18 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
  __HAL_LOCK(hadc);
 8000a22:	2302      	movs	r3, #2
 8000a24:	e7f8      	b.n	8000a18 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000a26:	68a2      	ldr	r2, [r4, #8]
 8000a28:	f002 0203 	and.w	r2, r2, #3
 8000a2c:	2a01      	cmp	r2, #1
 8000a2e:	d102      	bne.n	8000a36 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8000a30:	6822      	ldr	r2, [r4, #0]
 8000a32:	07d4      	lsls	r4, r2, #31
 8000a34:	d4c5      	bmi.n	80009c2 <HAL_ADCEx_MultiModeConfigChannel+0x82>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000a36:	689a      	ldr	r2, [r3, #8]
 8000a38:	6889      	ldr	r1, [r1, #8]
 8000a3a:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000a3e:	430d      	orrs	r5, r1
 8000a40:	f022 020f 	bic.w	r2, r2, #15
 8000a44:	4315      	orrs	r5, r2
 8000a46:	609d      	str	r5, [r3, #8]
 8000a48:	e7bb      	b.n	80009c2 <HAL_ADCEx_MultiModeConfigChannel+0x82>
 8000a4a:	bf00      	nop
 8000a4c:	50000100 	.word	0x50000100
 8000a50:	50000400 	.word	0x50000400
 8000a54:	50000500 	.word	0x50000500
 8000a58:	50000300 	.word	0x50000300
 8000a5c:	50000700 	.word	0x50000700

08000a60 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a60:	4a07      	ldr	r2, [pc, #28]	; (8000a80 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a62:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a64:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a68:	041b      	lsls	r3, r3, #16
 8000a6a:	0c1b      	lsrs	r3, r3, #16
 8000a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a70:	0200      	lsls	r0, r0, #8
 8000a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a76:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000a7a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000a7c:	60d3      	str	r3, [r2, #12]
 8000a7e:	4770      	bx	lr
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a86:	b530      	push	{r4, r5, lr}
 8000a88:	68dc      	ldr	r4, [r3, #12]
 8000a8a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a8e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a92:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a94:	2b04      	cmp	r3, #4
 8000a96:	bf28      	it	cs
 8000a98:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	f04f 0501 	mov.w	r5, #1
 8000aa0:	fa05 f303 	lsl.w	r3, r5, r3
 8000aa4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa8:	bf8c      	ite	hi
 8000aaa:	3c03      	subhi	r4, #3
 8000aac:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aae:	4019      	ands	r1, r3
 8000ab0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab2:	fa05 f404 	lsl.w	r4, r5, r4
 8000ab6:	3c01      	subs	r4, #1
 8000ab8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000aba:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	ea42 0201 	orr.w	r2, r2, r1
 8000ac0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac4:	bfaf      	iteee	ge
 8000ac6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aca:	f000 000f 	andlt.w	r0, r0, #15
 8000ace:	4b06      	ldrlt	r3, [pc, #24]	; (8000ae8 <HAL_NVIC_SetPriority+0x64>)
 8000ad0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad2:	bfa5      	ittet	ge
 8000ad4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000ad8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ada:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000adc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000ae0:	bd30      	pop	{r4, r5, pc}
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00
 8000ae8:	e000ed14 	.word	0xe000ed14

08000aec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aec:	3801      	subs	r0, #1
 8000aee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000af2:	d20a      	bcs.n	8000b0a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af6:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afa:	21f0      	movs	r1, #240	; 0xf0
 8000afc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b00:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b02:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b04:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b0a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000e010 	.word	0xe000e010
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b1a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000b1c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b1e:	bf0c      	ite	eq
 8000b20:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000b24:	f022 0204 	bicne.w	r2, r2, #4
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	4770      	bx	lr
 8000b2c:	e000e010 	.word	0xe000e010

08000b30 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000b30:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000b32:	f002 fe5b 	bl	80037ec <HAL_SYSTICK_Callback>
 8000b36:	bd08      	pop	{r3, pc}

08000b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b3c:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b40:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8000cd4 <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b44:	4a61      	ldr	r2, [pc, #388]	; (8000ccc <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 8000b46:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b48:	fa38 f403 	lsrs.w	r4, r8, r3
 8000b4c:	d102      	bne.n	8000b54 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000b4e:	b003      	add	sp, #12
 8000b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b54:	f04f 0e01 	mov.w	lr, #1
 8000b58:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8000b5c:	ea18 060e 	ands.w	r6, r8, lr
 8000b60:	f000 80a6 	beq.w	8000cb0 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b64:	684c      	ldr	r4, [r1, #4]
 8000b66:	f024 0710 	bic.w	r7, r4, #16
 8000b6a:	2f02      	cmp	r7, #2
 8000b6c:	d116      	bne.n	8000b9c <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8000b6e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000b72:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b76:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000b7a:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b7e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000b82:	f04f 0c0f 	mov.w	ip, #15
 8000b86:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000b8a:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b8e:	690d      	ldr	r5, [r1, #16]
 8000b90:	fa05 f50b 	lsl.w	r5, r5, fp
 8000b94:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000b98:	f8ca 5020 	str.w	r5, [sl, #32]
 8000b9c:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ba0:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000ba2:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ba6:	fa05 f50a 	lsl.w	r5, r5, sl
 8000baa:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bac:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bb0:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bb4:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bb8:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bba:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bbe:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000bc0:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bc4:	d811      	bhi.n	8000bea <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000bc6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bc8:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bcc:	68cf      	ldr	r7, [r1, #12]
 8000bce:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000bd2:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000bd6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000bd8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bda:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000bde:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000be2:	409f      	lsls	r7, r3
 8000be4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000be8:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000bea:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bec:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bee:	688f      	ldr	r7, [r1, #8]
 8000bf0:	fa07 f70a 	lsl.w	r7, r7, sl
 8000bf4:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000bf6:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bf8:	00e5      	lsls	r5, r4, #3
 8000bfa:	d559      	bpl.n	8000cb0 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfc:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000c00:	f045 0501 	orr.w	r5, r5, #1
 8000c04:	f8c9 5018 	str.w	r5, [r9, #24]
 8000c08:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000c0c:	f023 0703 	bic.w	r7, r3, #3
 8000c10:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000c14:	f005 0501 	and.w	r5, r5, #1
 8000c18:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000c1c:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000c1e:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000c24:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000c26:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000c2a:	f04f 0e0f 	mov.w	lr, #15
 8000c2e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c32:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000c36:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c3a:	d03b      	beq.n	8000cb4 <HAL_GPIO_Init+0x17c>
 8000c3c:	4d24      	ldr	r5, [pc, #144]	; (8000cd0 <HAL_GPIO_Init+0x198>)
 8000c3e:	42a8      	cmp	r0, r5
 8000c40:	d03a      	beq.n	8000cb8 <HAL_GPIO_Init+0x180>
 8000c42:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c46:	42a8      	cmp	r0, r5
 8000c48:	d038      	beq.n	8000cbc <HAL_GPIO_Init+0x184>
 8000c4a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c4e:	42a8      	cmp	r0, r5
 8000c50:	d036      	beq.n	8000cc0 <HAL_GPIO_Init+0x188>
 8000c52:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c56:	42a8      	cmp	r0, r5
 8000c58:	d034      	beq.n	8000cc4 <HAL_GPIO_Init+0x18c>
 8000c5a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c5e:	42a8      	cmp	r0, r5
 8000c60:	d032      	beq.n	8000cc8 <HAL_GPIO_Init+0x190>
 8000c62:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c66:	42a8      	cmp	r0, r5
 8000c68:	bf14      	ite	ne
 8000c6a:	2507      	movne	r5, #7
 8000c6c:	2506      	moveq	r5, #6
 8000c6e:	fa05 f50c 	lsl.w	r5, r5, ip
 8000c72:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c76:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000c78:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c7a:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c7c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000c80:	bf0c      	ite	eq
 8000c82:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000c84:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000c86:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000c88:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c8a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000c8e:	bf0c      	ite	eq
 8000c90:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000c92:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000c94:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000c96:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c98:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000c9c:	bf0c      	ite	eq
 8000c9e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000ca0:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8000ca2:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000ca4:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ca6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000ca8:	bf54      	ite	pl
 8000caa:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8000cac:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8000cae:	60d5      	str	r5, [r2, #12]
    position++;
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	e749      	b.n	8000b48 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000cb4:	2500      	movs	r5, #0
 8000cb6:	e7da      	b.n	8000c6e <HAL_GPIO_Init+0x136>
 8000cb8:	2501      	movs	r5, #1
 8000cba:	e7d8      	b.n	8000c6e <HAL_GPIO_Init+0x136>
 8000cbc:	2502      	movs	r5, #2
 8000cbe:	e7d6      	b.n	8000c6e <HAL_GPIO_Init+0x136>
 8000cc0:	2503      	movs	r5, #3
 8000cc2:	e7d4      	b.n	8000c6e <HAL_GPIO_Init+0x136>
 8000cc4:	2504      	movs	r5, #4
 8000cc6:	e7d2      	b.n	8000c6e <HAL_GPIO_Init+0x136>
 8000cc8:	2505      	movs	r5, #5
 8000cca:	e7d0      	b.n	8000c6e <HAL_GPIO_Init+0x136>
 8000ccc:	40010400 	.word	0x40010400
 8000cd0:	48000400 	.word	0x48000400
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cd8:	b10a      	cbz	r2, 8000cde <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cda:	6181      	str	r1, [r0, #24]
 8000cdc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cde:	6281      	str	r1, [r0, #40]	; 0x28
 8000ce0:	4770      	bx	lr

08000ce2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000ce2:	6943      	ldr	r3, [r0, #20]
 8000ce4:	4059      	eors	r1, r3
 8000ce6:	6141      	str	r1, [r0, #20]
 8000ce8:	4770      	bx	lr

08000cea <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000cea:	6803      	ldr	r3, [r0, #0]
 8000cec:	699a      	ldr	r2, [r3, #24]
 8000cee:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8000cf0:	bf44      	itt	mi
 8000cf2:	2200      	movmi	r2, #0
 8000cf4:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000cf6:	699a      	ldr	r2, [r3, #24]
 8000cf8:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000cfa:	bf5e      	ittt	pl
 8000cfc:	699a      	ldrpl	r2, [r3, #24]
 8000cfe:	f042 0201 	orrpl.w	r2, r2, #1
 8000d02:	619a      	strpl	r2, [r3, #24]
 8000d04:	4770      	bx	lr

08000d06 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000d06:	b530      	push	{r4, r5, lr}
 8000d08:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000d0a:	6805      	ldr	r5, [r0, #0]
 8000d0c:	4323      	orrs	r3, r4
 8000d0e:	0d64      	lsrs	r4, r4, #21
 8000d10:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8000d14:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8000d18:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8000d1c:	6868      	ldr	r0, [r5, #4]
 8000d1e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000d22:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8000d26:	4319      	orrs	r1, r3
 8000d28:	f044 0403 	orr.w	r4, r4, #3
 8000d2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000d30:	ea20 0404 	bic.w	r4, r0, r4
 8000d34:	4321      	orrs	r1, r4
 8000d36:	6069      	str	r1, [r5, #4]
 8000d38:	bd30      	pop	{r4, r5, pc}

08000d3a <I2C_WaitOnFlagUntilTimeout>:
{
 8000d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d3e:	9f06      	ldr	r7, [sp, #24]
 8000d40:	4604      	mov	r4, r0
 8000d42:	4688      	mov	r8, r1
 8000d44:	4616      	mov	r6, r2
 8000d46:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000d48:	6822      	ldr	r2, [r4, #0]
 8000d4a:	6993      	ldr	r3, [r2, #24]
 8000d4c:	ea38 0303 	bics.w	r3, r8, r3
 8000d50:	bf0c      	ite	eq
 8000d52:	2301      	moveq	r3, #1
 8000d54:	2300      	movne	r3, #0
 8000d56:	42b3      	cmp	r3, r6
 8000d58:	d002      	beq.n	8000d60 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8000d5a:	2000      	movs	r0, #0
}
 8000d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000d60:	1c6b      	adds	r3, r5, #1
 8000d62:	d0f2      	beq.n	8000d4a <I2C_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000d64:	b955      	cbnz	r5, 8000d7c <I2C_WaitOnFlagUntilTimeout+0x42>
        hi2c->State = HAL_I2C_STATE_READY;
 8000d66:	2320      	movs	r3, #32
 8000d68:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8000d72:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8000d76:	2003      	movs	r0, #3
 8000d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000d7c:	f7ff fac2 	bl	8000304 <HAL_GetTick>
 8000d80:	1bc0      	subs	r0, r0, r7
 8000d82:	4285      	cmp	r5, r0
 8000d84:	d2e0      	bcs.n	8000d48 <I2C_WaitOnFlagUntilTimeout+0xe>
 8000d86:	e7ee      	b.n	8000d66 <I2C_WaitOnFlagUntilTimeout+0x2c>

08000d88 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000d88:	6803      	ldr	r3, [r0, #0]
{
 8000d8a:	b570      	push	{r4, r5, r6, lr}
 8000d8c:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000d8e:	6998      	ldr	r0, [r3, #24]
 8000d90:	f010 0010 	ands.w	r0, r0, #16
{
 8000d94:	460d      	mov	r5, r1
 8000d96:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000d98:	d112      	bne.n	8000dc0 <I2C_IsAcknowledgeFailed+0x38>
 8000d9a:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000d9c:	1c69      	adds	r1, r5, #1
 8000d9e:	d010      	beq.n	8000dc2 <I2C_IsAcknowledgeFailed+0x3a>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000da0:	b94d      	cbnz	r5, 8000db6 <I2C_IsAcknowledgeFailed+0x2e>
          hi2c->State = HAL_I2C_STATE_READY;
 8000da2:	2320      	movs	r3, #32
 8000da4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8000dae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 8000db2:	2003      	movs	r0, #3
 8000db4:	bd70      	pop	{r4, r5, r6, pc}
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000db6:	f7ff faa5 	bl	8000304 <HAL_GetTick>
 8000dba:	1b80      	subs	r0, r0, r6
 8000dbc:	4285      	cmp	r5, r0
 8000dbe:	d3f0      	bcc.n	8000da2 <I2C_IsAcknowledgeFailed+0x1a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000dc0:	6823      	ldr	r3, [r4, #0]
 8000dc2:	6999      	ldr	r1, [r3, #24]
 8000dc4:	068a      	lsls	r2, r1, #26
 8000dc6:	d5e9      	bpl.n	8000d9c <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000dc8:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000dca:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000dcc:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000dce:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000dd0:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000dd2:	f7ff ff8a 	bl	8000cea <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000dd6:	6822      	ldr	r2, [r4, #0]
 8000dd8:	6853      	ldr	r3, [r2, #4]
 8000dda:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000dde:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000de2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000de6:	f023 0301 	bic.w	r3, r3, #1
 8000dea:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000dec:	2304      	movs	r3, #4
 8000dee:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000df0:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000df2:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000df6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dfa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_ERROR;
 8000dfe:	2001      	movs	r0, #1
}
 8000e00:	bd70      	pop	{r4, r5, r6, pc}

08000e02 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000e02:	b570      	push	{r4, r5, r6, lr}
 8000e04:	4604      	mov	r4, r0
 8000e06:	460d      	mov	r5, r1
 8000e08:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000e0a:	6823      	ldr	r3, [r4, #0]
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	079b      	lsls	r3, r3, #30
 8000e10:	d501      	bpl.n	8000e16 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8000e12:	2000      	movs	r0, #0
 8000e14:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e16:	4632      	mov	r2, r6
 8000e18:	4629      	mov	r1, r5
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	f7ff ffb4 	bl	8000d88 <I2C_IsAcknowledgeFailed>
 8000e20:	b9b0      	cbnz	r0, 8000e50 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8000e22:	1c6a      	adds	r2, r5, #1
 8000e24:	d0f1      	beq.n	8000e0a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000e26:	b96d      	cbnz	r5, 8000e44 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e28:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e2a:	f043 0320 	orr.w	r3, r3, #32
 8000e2e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000e30:	2320      	movs	r3, #32
 8000e32:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000e3c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000e40:	2003      	movs	r0, #3
 8000e42:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000e44:	f7ff fa5e 	bl	8000304 <HAL_GetTick>
 8000e48:	1b80      	subs	r0, r0, r6
 8000e4a:	4285      	cmp	r5, r0
 8000e4c:	d2dd      	bcs.n	8000e0a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 8000e4e:	e7eb      	b.n	8000e28 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
      return HAL_ERROR;
 8000e50:	2001      	movs	r0, #1
}
 8000e52:	bd70      	pop	{r4, r5, r6, pc}

08000e54 <I2C_RequestMemoryWrite>:
{
 8000e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000e56:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000e58:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <I2C_RequestMemoryWrite+0x68>)
 8000e5c:	9300      	str	r3, [sp, #0]
{
 8000e5e:	4604      	mov	r4, r0
 8000e60:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000e62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e66:	b2fa      	uxtb	r2, r7
 8000e68:	f7ff ff4d 	bl	8000d06 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e6c:	4632      	mov	r2, r6
 8000e6e:	9908      	ldr	r1, [sp, #32]
 8000e70:	4620      	mov	r0, r4
 8000e72:	f7ff ffc6 	bl	8000e02 <I2C_WaitOnTXISFlagUntilTimeout>
 8000e76:	b128      	cbz	r0, 8000e84 <I2C_RequestMemoryWrite+0x30>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e78:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	d110      	bne.n	8000ea0 <I2C_RequestMemoryWrite+0x4c>
      return HAL_ERROR;
 8000e7e:	2001      	movs	r0, #1
}
 8000e80:	b003      	add	sp, #12
 8000e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000e84:	2f01      	cmp	r7, #1
 8000e86:	6823      	ldr	r3, [r4, #0]
 8000e88:	d10c      	bne.n	8000ea4 <I2C_RequestMemoryWrite+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000e8a:	b2ed      	uxtb	r5, r5
 8000e8c:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8000e8e:	9b08      	ldr	r3, [sp, #32]
 8000e90:	9600      	str	r6, [sp, #0]
 8000e92:	2200      	movs	r2, #0
 8000e94:	2180      	movs	r1, #128	; 0x80
 8000e96:	4620      	mov	r0, r4
 8000e98:	f7ff ff4f 	bl	8000d3a <I2C_WaitOnFlagUntilTimeout>
 8000e9c:	2800      	cmp	r0, #0
 8000e9e:	d0ef      	beq.n	8000e80 <I2C_RequestMemoryWrite+0x2c>
      return HAL_TIMEOUT;
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	e7ed      	b.n	8000e80 <I2C_RequestMemoryWrite+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000ea4:	0a2a      	lsrs	r2, r5, #8
 8000ea6:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ea8:	9908      	ldr	r1, [sp, #32]
 8000eaa:	4632      	mov	r2, r6
 8000eac:	4620      	mov	r0, r4
 8000eae:	f7ff ffa8 	bl	8000e02 <I2C_WaitOnTXISFlagUntilTimeout>
 8000eb2:	2800      	cmp	r0, #0
 8000eb4:	d1e0      	bne.n	8000e78 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000eb6:	6823      	ldr	r3, [r4, #0]
 8000eb8:	e7e7      	b.n	8000e8a <I2C_RequestMemoryWrite+0x36>
 8000eba:	bf00      	nop
 8000ebc:	80002000 	.word	0x80002000

08000ec0 <I2C_RequestMemoryRead>:
{
 8000ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000ec2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000ec4:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <I2C_RequestMemoryRead+0x64>)
 8000ec8:	9300      	str	r3, [sp, #0]
{
 8000eca:	4604      	mov	r4, r0
 8000ecc:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000ece:	2300      	movs	r3, #0
 8000ed0:	b2fa      	uxtb	r2, r7
 8000ed2:	f7ff ff18 	bl	8000d06 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ed6:	4632      	mov	r2, r6
 8000ed8:	9908      	ldr	r1, [sp, #32]
 8000eda:	4620      	mov	r0, r4
 8000edc:	f7ff ff91 	bl	8000e02 <I2C_WaitOnTXISFlagUntilTimeout>
 8000ee0:	b128      	cbz	r0, 8000eee <I2C_RequestMemoryRead+0x2e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ee2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ee4:	2b04      	cmp	r3, #4
 8000ee6:	d110      	bne.n	8000f0a <I2C_RequestMemoryRead+0x4a>
      return HAL_ERROR;
 8000ee8:	2001      	movs	r0, #1
}
 8000eea:	b003      	add	sp, #12
 8000eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000eee:	2f01      	cmp	r7, #1
 8000ef0:	6823      	ldr	r3, [r4, #0]
 8000ef2:	d10c      	bne.n	8000f0e <I2C_RequestMemoryRead+0x4e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000ef4:	b2ed      	uxtb	r5, r5
 8000ef6:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8000ef8:	9b08      	ldr	r3, [sp, #32]
 8000efa:	9600      	str	r6, [sp, #0]
 8000efc:	2200      	movs	r2, #0
 8000efe:	2140      	movs	r1, #64	; 0x40
 8000f00:	4620      	mov	r0, r4
 8000f02:	f7ff ff1a 	bl	8000d3a <I2C_WaitOnFlagUntilTimeout>
 8000f06:	2800      	cmp	r0, #0
 8000f08:	d0ef      	beq.n	8000eea <I2C_RequestMemoryRead+0x2a>
      return HAL_TIMEOUT;
 8000f0a:	2003      	movs	r0, #3
 8000f0c:	e7ed      	b.n	8000eea <I2C_RequestMemoryRead+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000f0e:	0a2a      	lsrs	r2, r5, #8
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f12:	9908      	ldr	r1, [sp, #32]
 8000f14:	4632      	mov	r2, r6
 8000f16:	4620      	mov	r0, r4
 8000f18:	f7ff ff73 	bl	8000e02 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f1c:	2800      	cmp	r0, #0
 8000f1e:	d1e0      	bne.n	8000ee2 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000f20:	6823      	ldr	r3, [r4, #0]
 8000f22:	e7e7      	b.n	8000ef4 <I2C_RequestMemoryRead+0x34>
 8000f24:	80002000 	.word	0x80002000

08000f28 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000f28:	b570      	push	{r4, r5, r6, lr}
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	460d      	mov	r5, r1
 8000f2e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000f30:	6823      	ldr	r3, [r4, #0]
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	069b      	lsls	r3, r3, #26
 8000f36:	d501      	bpl.n	8000f3c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8000f38:	2000      	movs	r0, #0
 8000f3a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f3c:	4632      	mov	r2, r6
 8000f3e:	4629      	mov	r1, r5
 8000f40:	4620      	mov	r0, r4
 8000f42:	f7ff ff21 	bl	8000d88 <I2C_IsAcknowledgeFailed>
 8000f46:	b9a0      	cbnz	r0, 8000f72 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000f48:	b96d      	cbnz	r5, 8000f66 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f4c:	f043 0320 	orr.w	r3, r3, #32
 8000f50:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000f52:	2320      	movs	r3, #32
 8000f54:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000f5e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000f62:	2003      	movs	r0, #3
 8000f64:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000f66:	f7ff f9cd 	bl	8000304 <HAL_GetTick>
 8000f6a:	1b80      	subs	r0, r0, r6
 8000f6c:	4285      	cmp	r5, r0
 8000f6e:	d2df      	bcs.n	8000f30 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 8000f70:	e7eb      	b.n	8000f4a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000f72:	2001      	movs	r0, #1
}
 8000f74:	bd70      	pop	{r4, r5, r6, pc}

08000f76 <HAL_I2C_Init>:
{
 8000f76:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8000f78:	4604      	mov	r4, r0
 8000f7a:	2800      	cmp	r0, #0
 8000f7c:	d04a      	beq.n	8001014 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f7e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000f82:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f86:	b91b      	cbnz	r3, 8000f90 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000f88:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000f8c:	f003 f80c 	bl	8003fa8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f90:	2324      	movs	r3, #36	; 0x24
 8000f92:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000f96:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f98:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	f022 0201 	bic.w	r2, r2, #1
 8000fa0:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fa2:	6862      	ldr	r2, [r4, #4]
 8000fa4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000fa8:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000faa:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fac:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fb6:	d124      	bne.n	8001002 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fbc:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000fbe:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000fc0:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000fc2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000fc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fca:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000fcc:	68da      	ldr	r2, [r3, #12]
 8000fce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fd2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000fd4:	6922      	ldr	r2, [r4, #16]
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	69a1      	ldr	r1, [r4, #24]
 8000fda:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000fde:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fe0:	6a21      	ldr	r1, [r4, #32]
 8000fe2:	69e2      	ldr	r2, [r4, #28]
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	f042 0201 	orr.w	r2, r2, #1
 8000fee:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ff0:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000ff2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ff4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ff6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ffa:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ffc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8001000:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001002:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001006:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001008:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800100a:	bf04      	itt	eq
 800100c:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001010:	605a      	streq	r2, [r3, #4]
 8001012:	e7d4      	b.n	8000fbe <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001014:	2001      	movs	r0, #1
}
 8001016:	bd10      	pop	{r4, pc}

08001018 <HAL_I2C_Mem_Write>:
{
 8001018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800101c:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800101e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001022:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001024:	2b20      	cmp	r3, #32
{
 8001026:	4604      	mov	r4, r0
 8001028:	460f      	mov	r7, r1
 800102a:	9203      	str	r2, [sp, #12]
 800102c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8001030:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001034:	f040 80a6 	bne.w	8001184 <HAL_I2C_Mem_Write+0x16c>
    if ((pData == NULL) || (Size == 0U))
 8001038:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800103a:	b91b      	cbnz	r3, 8001044 <HAL_I2C_Mem_Write+0x2c>
      return  HAL_ERROR;
 800103c:	2001      	movs	r0, #1
}
 800103e:	b005      	add	sp, #20
 8001040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 8001044:	f1ba 0f00 	cmp.w	sl, #0
 8001048:	d0f8      	beq.n	800103c <HAL_I2C_Mem_Write+0x24>
    __HAL_LOCK(hi2c);
 800104a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800104e:	2b01      	cmp	r3, #1
 8001050:	f000 8098 	beq.w	8001184 <HAL_I2C_Mem_Write+0x16c>
 8001054:	2501      	movs	r5, #1
 8001056:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800105a:	f7ff f953 	bl	8000304 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800105e:	2319      	movs	r3, #25
 8001060:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8001062:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001064:	462a      	mov	r2, r5
 8001066:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800106a:	4620      	mov	r0, r4
 800106c:	f7ff fe65 	bl	8000d3a <I2C_WaitOnFlagUntilTimeout>
 8001070:	4680      	mov	r8, r0
 8001072:	b9d0      	cbnz	r0, 80010aa <HAL_I2C_Mem_Write+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001074:	2321      	movs	r3, #33	; 0x21
 8001076:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800107a:	2340      	movs	r3, #64	; 0x40
 800107c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001080:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001082:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001084:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8001086:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001088:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800108c:	9601      	str	r6, [sp, #4]
 800108e:	f8cd 9000 	str.w	r9, [sp]
 8001092:	465b      	mov	r3, fp
 8001094:	9a03      	ldr	r2, [sp, #12]
 8001096:	4639      	mov	r1, r7
 8001098:	4620      	mov	r0, r4
 800109a:	f7ff fedb 	bl	8000e54 <I2C_RequestMemoryWrite>
 800109e:	b130      	cbz	r0, 80010ae <HAL_I2C_Mem_Write+0x96>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80010a2:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	d0c8      	beq.n	800103c <HAL_I2C_Mem_Write+0x24>
          return HAL_TIMEOUT;
 80010aa:	2003      	movs	r0, #3
 80010ac:	e7c7      	b.n	800103e <HAL_I2C_Mem_Write+0x26>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	2bff      	cmp	r3, #255	; 0xff
 80010b4:	d910      	bls.n	80010d8 <HAL_I2C_Mem_Write+0xc0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80010b6:	22ff      	movs	r2, #255	; 0xff
 80010b8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80010ba:	9000      	str	r0, [sp, #0]
 80010bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80010c0:	4639      	mov	r1, r7
 80010c2:	4620      	mov	r0, r4
 80010c4:	f7ff fe1f 	bl	8000d06 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010c8:	4632      	mov	r2, r6
 80010ca:	4649      	mov	r1, r9
 80010cc:	4620      	mov	r0, r4
 80010ce:	f7ff fe98 	bl	8000e02 <I2C_WaitOnTXISFlagUntilTimeout>
 80010d2:	b148      	cbz	r0, 80010e8 <HAL_I2C_Mem_Write+0xd0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010d6:	e7e6      	b.n	80010a6 <HAL_I2C_Mem_Write+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 80010d8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80010da:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80010dc:	b292      	uxth	r2, r2
 80010de:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80010e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	e7eb      	b.n	80010c0 <HAL_I2C_Mem_Write+0xa8>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80010e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80010ea:	6822      	ldr	r2, [r4, #0]
 80010ec:	1c59      	adds	r1, r3, #1
 80010ee:	6261      	str	r1, [r4, #36]	; 0x24
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 80010f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80010f6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80010f8:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80010fa:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80010fc:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80010fe:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8001100:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001102:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001104:	b9ba      	cbnz	r2, 8001136 <HAL_I2C_Mem_Write+0x11e>
 8001106:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001108:	b29b      	uxth	r3, r3
 800110a:	b1a3      	cbz	r3, 8001136 <HAL_I2C_Mem_Write+0x11e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800110c:	9600      	str	r6, [sp, #0]
 800110e:	464b      	mov	r3, r9
 8001110:	2180      	movs	r1, #128	; 0x80
 8001112:	4620      	mov	r0, r4
 8001114:	f7ff fe11 	bl	8000d3a <I2C_WaitOnFlagUntilTimeout>
 8001118:	2800      	cmp	r0, #0
 800111a:	d1c6      	bne.n	80010aa <HAL_I2C_Mem_Write+0x92>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800111c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800111e:	b29b      	uxth	r3, r3
 8001120:	2bff      	cmp	r3, #255	; 0xff
 8001122:	d927      	bls.n	8001174 <HAL_I2C_Mem_Write+0x15c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001124:	22ff      	movs	r2, #255	; 0xff
 8001126:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001128:	9000      	str	r0, [sp, #0]
 800112a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800112e:	4639      	mov	r1, r7
 8001130:	4620      	mov	r0, r4
 8001132:	f7ff fde8 	bl	8000d06 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8001136:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001138:	b29b      	uxth	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1c4      	bne.n	80010c8 <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800113e:	4632      	mov	r2, r6
 8001140:	4649      	mov	r1, r9
 8001142:	4620      	mov	r0, r4
 8001144:	f7ff fef0 	bl	8000f28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001148:	2800      	cmp	r0, #0
 800114a:	d1c3      	bne.n	80010d4 <HAL_I2C_Mem_Write+0xbc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800114c:	6823      	ldr	r3, [r4, #0]
 800114e:	2120      	movs	r1, #32
 8001150:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001158:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800115c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001160:	f022 0201 	bic.w	r2, r2, #1
 8001164:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001166:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800116a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800116e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001172:	e764      	b.n	800103e <HAL_I2C_Mem_Write+0x26>
          hi2c->XferSize = hi2c->XferCount;
 8001174:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001176:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001178:	b292      	uxth	r2, r2
 800117a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800117c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	e7d4      	b.n	800112e <HAL_I2C_Mem_Write+0x116>
    return HAL_BUSY;
 8001184:	2002      	movs	r0, #2
 8001186:	e75a      	b.n	800103e <HAL_I2C_Mem_Write+0x26>

08001188 <HAL_I2C_Mem_Read>:
{
 8001188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800118c:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800118e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001192:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001194:	2b20      	cmp	r3, #32
{
 8001196:	4604      	mov	r4, r0
 8001198:	460f      	mov	r7, r1
 800119a:	9203      	str	r2, [sp, #12]
 800119c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80011a0:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011a4:	f040 80a9 	bne.w	80012fa <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 80011a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80011aa:	b91b      	cbnz	r3, 80011b4 <HAL_I2C_Mem_Read+0x2c>
      return  HAL_ERROR;
 80011ac:	2001      	movs	r0, #1
}
 80011ae:	b005      	add	sp, #20
 80011b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 80011b4:	f1ba 0f00 	cmp.w	sl, #0
 80011b8:	d0f8      	beq.n	80011ac <HAL_I2C_Mem_Read+0x24>
    __HAL_LOCK(hi2c);
 80011ba:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80011be:	2b01      	cmp	r3, #1
 80011c0:	f000 809b 	beq.w	80012fa <HAL_I2C_Mem_Read+0x172>
 80011c4:	2501      	movs	r5, #1
 80011c6:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80011ca:	f7ff f89b 	bl	8000304 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011ce:	2319      	movs	r3, #25
 80011d0:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80011d2:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011d4:	462a      	mov	r2, r5
 80011d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011da:	4620      	mov	r0, r4
 80011dc:	f7ff fdad 	bl	8000d3a <I2C_WaitOnFlagUntilTimeout>
 80011e0:	4680      	mov	r8, r0
 80011e2:	b9d0      	cbnz	r0, 800121a <HAL_I2C_Mem_Read+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80011e4:	2322      	movs	r3, #34	; 0x22
 80011e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011ea:	2340      	movs	r3, #64	; 0x40
 80011ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80011f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011f2:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80011f4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 80011f6:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80011f8:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80011fc:	9601      	str	r6, [sp, #4]
 80011fe:	f8cd 9000 	str.w	r9, [sp]
 8001202:	465b      	mov	r3, fp
 8001204:	9a03      	ldr	r2, [sp, #12]
 8001206:	4639      	mov	r1, r7
 8001208:	4620      	mov	r0, r4
 800120a:	f7ff fe59 	bl	8000ec0 <I2C_RequestMemoryRead>
 800120e:	b130      	cbz	r0, 800121e <HAL_I2C_Mem_Read+0x96>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001210:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8001212:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001216:	2b04      	cmp	r3, #4
 8001218:	d0c8      	beq.n	80011ac <HAL_I2C_Mem_Read+0x24>
        return HAL_TIMEOUT;
 800121a:	2003      	movs	r0, #3
 800121c:	e7c7      	b.n	80011ae <HAL_I2C_Mem_Read+0x26>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800121e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001220:	b29b      	uxth	r3, r3
 8001222:	2bff      	cmp	r3, #255	; 0xff
 8001224:	4b36      	ldr	r3, [pc, #216]	; (8001300 <HAL_I2C_Mem_Read+0x178>)
 8001226:	d944      	bls.n	80012b2 <HAL_I2C_Mem_Read+0x12a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001228:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800122a:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800122c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800122e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001232:	4639      	mov	r1, r7
 8001234:	4620      	mov	r0, r4
 8001236:	f7ff fd66 	bl	8000d06 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800123a:	9600      	str	r6, [sp, #0]
 800123c:	464b      	mov	r3, r9
 800123e:	2200      	movs	r2, #0
 8001240:	2104      	movs	r1, #4
 8001242:	4620      	mov	r0, r4
 8001244:	f7ff fd79 	bl	8000d3a <I2C_WaitOnFlagUntilTimeout>
 8001248:	2800      	cmp	r0, #0
 800124a:	d1e6      	bne.n	800121a <HAL_I2C_Mem_Read+0x92>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800124c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	6262      	str	r2, [r4, #36]	; 0x24
 8001252:	6822      	ldr	r2, [r4, #0]
 8001254:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001256:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8001258:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800125a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800125c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800125e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8001260:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8001262:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001264:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001266:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001268:	b9ba      	cbnz	r2, 800129a <HAL_I2C_Mem_Read+0x112>
 800126a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800126c:	b29b      	uxth	r3, r3
 800126e:	b1a3      	cbz	r3, 800129a <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001270:	9600      	str	r6, [sp, #0]
 8001272:	464b      	mov	r3, r9
 8001274:	2180      	movs	r1, #128	; 0x80
 8001276:	4620      	mov	r0, r4
 8001278:	f7ff fd5f 	bl	8000d3a <I2C_WaitOnFlagUntilTimeout>
 800127c:	2800      	cmp	r0, #0
 800127e:	d1cc      	bne.n	800121a <HAL_I2C_Mem_Read+0x92>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001280:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001282:	b29b      	uxth	r3, r3
 8001284:	2bff      	cmp	r3, #255	; 0xff
 8001286:	d91c      	bls.n	80012c2 <HAL_I2C_Mem_Read+0x13a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001288:	22ff      	movs	r2, #255	; 0xff
 800128a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800128c:	9000      	str	r0, [sp, #0]
 800128e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001292:	4639      	mov	r1, r7
 8001294:	4620      	mov	r0, r4
 8001296:	f7ff fd36 	bl	8000d06 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800129a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800129c:	b29b      	uxth	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1cb      	bne.n	800123a <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012a2:	4632      	mov	r2, r6
 80012a4:	4649      	mov	r1, r9
 80012a6:	4620      	mov	r0, r4
 80012a8:	f7ff fe3e 	bl	8000f28 <I2C_WaitOnSTOPFlagUntilTimeout>
 80012ac:	b188      	cbz	r0, 80012d2 <HAL_I2C_Mem_Read+0x14a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012b0:	e7b1      	b.n	8001216 <HAL_I2C_Mem_Read+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 80012b2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80012b4:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80012b6:	b292      	uxth	r2, r2
 80012b8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80012ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	e7b7      	b.n	8001232 <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 80012c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80012c4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80012c6:	b292      	uxth	r2, r2
 80012c8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80012ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	e7df      	b.n	8001292 <HAL_I2C_Mem_Read+0x10a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012d2:	6823      	ldr	r3, [r4, #0]
 80012d4:	2120      	movs	r1, #32
 80012d6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80012de:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80012e2:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80012e6:	f022 0201 	bic.w	r2, r2, #1
 80012ea:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80012ec:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80012f0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80012f4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80012f8:	e759      	b.n	80011ae <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 80012fa:	2002      	movs	r0, #2
 80012fc:	e757      	b.n	80011ae <HAL_I2C_Mem_Read+0x26>
 80012fe:	bf00      	nop
 8001300:	80002400 	.word	0x80002400

08001304 <HAL_I2C_GetState>:
  return hi2c->State;
 8001304:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8001308:	4770      	bx	lr

0800130a <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800130a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	2a20      	cmp	r2, #32
{
 8001312:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001314:	d11d      	bne.n	8001352 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001316:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800131a:	2b01      	cmp	r3, #1
 800131c:	d019      	beq.n	8001352 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800131e:	2324      	movs	r3, #36	; 0x24
 8001320:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001324:	6803      	ldr	r3, [r0, #0]
 8001326:	681c      	ldr	r4, [r3, #0]
 8001328:	f024 0401 	bic.w	r4, r4, #1
 800132c:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800132e:	681c      	ldr	r4, [r3, #0]
 8001330:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001334:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001336:	681c      	ldr	r4, [r3, #0]
 8001338:	4321      	orrs	r1, r4
 800133a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800133c:	6819      	ldr	r1, [r3, #0]
 800133e:	f041 0101 	orr.w	r1, r1, #1
 8001342:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001344:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001346:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800134a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800134e:	4618      	mov	r0, r3
 8001350:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001352:	2002      	movs	r0, #2
  }
}
 8001354:	bd10      	pop	{r4, pc}

08001356 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001356:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001358:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800135c:	b2e4      	uxtb	r4, r4
 800135e:	2c20      	cmp	r4, #32
 8001360:	d11c      	bne.n	800139c <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001362:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001366:	2b01      	cmp	r3, #1
 8001368:	d018      	beq.n	800139c <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800136a:	2324      	movs	r3, #36	; 0x24
 800136c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001370:	6803      	ldr	r3, [r0, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	f022 0201 	bic.w	r2, r2, #1
 8001378:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800137a:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800137c:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001380:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001384:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	f042 0201 	orr.w	r2, r2, #1
 800138c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800138e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001390:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001394:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001398:	4618      	mov	r0, r3
 800139a:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800139c:	2002      	movs	r0, #2
  }
}
 800139e:	bd10      	pop	{r4, pc}

080013a0 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 80013a0:	4a02      	ldr	r2, [pc, #8]	; (80013ac <HAL_PWR_EnableBkUpAccess+0xc>)
 80013a2:	6813      	ldr	r3, [r2, #0]
 80013a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	4770      	bx	lr
 80013ac:	40007000 	.word	0x40007000

080013b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b4:	4605      	mov	r5, r0
 80013b6:	b918      	cbnz	r0, 80013c0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80013b8:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80013ba:	b002      	add	sp, #8
 80013bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c0:	6803      	ldr	r3, [r0, #0]
 80013c2:	07df      	lsls	r7, r3, #31
 80013c4:	d411      	bmi.n	80013ea <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c6:	682b      	ldr	r3, [r5, #0]
 80013c8:	079e      	lsls	r6, r3, #30
 80013ca:	f100 8088 	bmi.w	80014de <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ce:	682b      	ldr	r3, [r5, #0]
 80013d0:	071c      	lsls	r4, r3, #28
 80013d2:	f100 80fc 	bmi.w	80015ce <HAL_RCC_OscConfig+0x21e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d6:	682b      	ldr	r3, [r5, #0]
 80013d8:	0758      	lsls	r0, r3, #29
 80013da:	f100 8145 	bmi.w	8001668 <HAL_RCC_OscConfig+0x2b8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013de:	69aa      	ldr	r2, [r5, #24]
 80013e0:	2a00      	cmp	r2, #0
 80013e2:	f040 81dc 	bne.w	800179e <HAL_RCC_OscConfig+0x3ee>
  return HAL_OK;
 80013e6:	2000      	movs	r0, #0
 80013e8:	e7e7      	b.n	80013ba <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013ea:	4cbd      	ldr	r4, [pc, #756]	; (80016e0 <HAL_RCC_OscConfig+0x330>)
 80013ec:	6863      	ldr	r3, [r4, #4]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	d00a      	beq.n	800140c <HAL_RCC_OscConfig+0x5c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013f6:	6863      	ldr	r3, [r4, #4]
 80013f8:	f003 030c 	and.w	r3, r3, #12
 80013fc:	2b08      	cmp	r3, #8
 80013fe:	d119      	bne.n	8001434 <HAL_RCC_OscConfig+0x84>
 8001400:	6863      	ldr	r3, [r4, #4]
 8001402:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800140a:	d113      	bne.n	8001434 <HAL_RCC_OscConfig+0x84>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001410:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001414:	6821      	ldr	r1, [r4, #0]
 8001416:	fa93 f3a3 	rbit	r3, r3
 800141a:	fab3 f383 	clz	r3, r3
 800141e:	f003 031f 	and.w	r3, r3, #31
 8001422:	2201      	movs	r2, #1
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	420b      	tst	r3, r1
 800142a:	d0cc      	beq.n	80013c6 <HAL_RCC_OscConfig+0x16>
 800142c:	686b      	ldr	r3, [r5, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1c9      	bne.n	80013c6 <HAL_RCC_OscConfig+0x16>
 8001432:	e7c1      	b.n	80013b8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001434:	686b      	ldr	r3, [r5, #4]
 8001436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800143a:	d11e      	bne.n	800147a <HAL_RCC_OscConfig+0xca>
 800143c:	6823      	ldr	r3, [r4, #0]
 800143e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001442:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001444:	f7fe ff5e 	bl	8000304 <HAL_GetTick>
 8001448:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800144c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144e:	2701      	movs	r7, #1
 8001450:	fa96 f3a6 	rbit	r3, r6
 8001454:	6822      	ldr	r2, [r4, #0]
 8001456:	fa96 f3a6 	rbit	r3, r6
 800145a:	fab3 f383 	clz	r3, r3
 800145e:	f003 031f 	and.w	r3, r3, #31
 8001462:	fa07 f303 	lsl.w	r3, r7, r3
 8001466:	4213      	tst	r3, r2
 8001468:	d1ad      	bne.n	80013c6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800146a:	f7fe ff4b 	bl	8000304 <HAL_GetTick>
 800146e:	eba0 0008 	sub.w	r0, r0, r8
 8001472:	2864      	cmp	r0, #100	; 0x64
 8001474:	d9ec      	bls.n	8001450 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8001476:	2003      	movs	r0, #3
 8001478:	e79f      	b.n	80013ba <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800147a:	bb0b      	cbnz	r3, 80014c0 <HAL_RCC_OscConfig+0x110>
 800147c:	6823      	ldr	r3, [r4, #0]
 800147e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001482:	6023      	str	r3, [r4, #0]
 8001484:	6823      	ldr	r3, [r4, #0]
 8001486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800148a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800148c:	f7fe ff3a 	bl	8000304 <HAL_GetTick>
 8001490:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001494:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001496:	2701      	movs	r7, #1
 8001498:	fa96 f3a6 	rbit	r3, r6
 800149c:	6822      	ldr	r2, [r4, #0]
 800149e:	fa96 f3a6 	rbit	r3, r6
 80014a2:	fab3 f383 	clz	r3, r3
 80014a6:	f003 031f 	and.w	r3, r3, #31
 80014aa:	fa07 f303 	lsl.w	r3, r7, r3
 80014ae:	4213      	tst	r3, r2
 80014b0:	d089      	beq.n	80013c6 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b2:	f7fe ff27 	bl	8000304 <HAL_GetTick>
 80014b6:	eba0 0008 	sub.w	r0, r0, r8
 80014ba:	2864      	cmp	r0, #100	; 0x64
 80014bc:	d9ec      	bls.n	8001498 <HAL_RCC_OscConfig+0xe8>
 80014be:	e7da      	b.n	8001476 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014c4:	6823      	ldr	r3, [r4, #0]
 80014c6:	d103      	bne.n	80014d0 <HAL_RCC_OscConfig+0x120>
 80014c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014cc:	6023      	str	r3, [r4, #0]
 80014ce:	e7b5      	b.n	800143c <HAL_RCC_OscConfig+0x8c>
 80014d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d4:	6023      	str	r3, [r4, #0]
 80014d6:	6823      	ldr	r3, [r4, #0]
 80014d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014dc:	e7b1      	b.n	8001442 <HAL_RCC_OscConfig+0x92>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014de:	4c80      	ldr	r4, [pc, #512]	; (80016e0 <HAL_RCC_OscConfig+0x330>)
 80014e0:	6863      	ldr	r3, [r4, #4]
 80014e2:	f013 0f0c 	tst.w	r3, #12
 80014e6:	d00a      	beq.n	80014fe <HAL_RCC_OscConfig+0x14e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014e8:	6863      	ldr	r3, [r4, #4]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	2b08      	cmp	r3, #8
 80014f0:	d125      	bne.n	800153e <HAL_RCC_OscConfig+0x18e>
 80014f2:	6863      	ldr	r3, [r4, #4]
 80014f4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80014f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014fc:	d11f      	bne.n	800153e <HAL_RCC_OscConfig+0x18e>
 80014fe:	2302      	movs	r3, #2
 8001500:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001504:	6821      	ldr	r1, [r4, #0]
 8001506:	fa93 f3a3 	rbit	r3, r3
 800150a:	fab3 f383 	clz	r3, r3
 800150e:	f003 031f 	and.w	r3, r3, #31
 8001512:	2201      	movs	r2, #1
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	420b      	tst	r3, r1
 800151a:	d003      	beq.n	8001524 <HAL_RCC_OscConfig+0x174>
 800151c:	68eb      	ldr	r3, [r5, #12]
 800151e:	4293      	cmp	r3, r2
 8001520:	f47f af4a 	bne.w	80013b8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001524:	6821      	ldr	r1, [r4, #0]
 8001526:	23f8      	movs	r3, #248	; 0xf8
 8001528:	fa93 f3a3 	rbit	r3, r3
 800152c:	fab3 f283 	clz	r2, r3
 8001530:	692b      	ldr	r3, [r5, #16]
 8001532:	4093      	lsls	r3, r2
 8001534:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001538:	4313      	orrs	r3, r2
 800153a:	6023      	str	r3, [r4, #0]
 800153c:	e747      	b.n	80013ce <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800153e:	68ea      	ldr	r2, [r5, #12]
 8001540:	2601      	movs	r6, #1
 8001542:	b30a      	cbz	r2, 8001588 <HAL_RCC_OscConfig+0x1d8>
 8001544:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8001548:	fab3 f383 	clz	r3, r3
 800154c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001550:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	2702      	movs	r7, #2
 8001558:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800155a:	f7fe fed3 	bl	8000304 <HAL_GetTick>
 800155e:	4680      	mov	r8, r0
 8001560:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001564:	6822      	ldr	r2, [r4, #0]
 8001566:	fa97 f3a7 	rbit	r3, r7
 800156a:	fab3 f383 	clz	r3, r3
 800156e:	f003 031f 	and.w	r3, r3, #31
 8001572:	fa06 f303 	lsl.w	r3, r6, r3
 8001576:	4213      	tst	r3, r2
 8001578:	d1d4      	bne.n	8001524 <HAL_RCC_OscConfig+0x174>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800157a:	f7fe fec3 	bl	8000304 <HAL_GetTick>
 800157e:	eba0 0008 	sub.w	r0, r0, r8
 8001582:	2802      	cmp	r0, #2
 8001584:	d9ec      	bls.n	8001560 <HAL_RCC_OscConfig+0x1b0>
 8001586:	e776      	b.n	8001476 <HAL_RCC_OscConfig+0xc6>
 8001588:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 800158c:	fab3 f383 	clz	r3, r3
 8001590:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001594:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	2702      	movs	r7, #2
 800159c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800159e:	f7fe feb1 	bl	8000304 <HAL_GetTick>
 80015a2:	4680      	mov	r8, r0
 80015a4:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a8:	6822      	ldr	r2, [r4, #0]
 80015aa:	fa97 f3a7 	rbit	r3, r7
 80015ae:	fab3 f383 	clz	r3, r3
 80015b2:	f003 031f 	and.w	r3, r3, #31
 80015b6:	fa06 f303 	lsl.w	r3, r6, r3
 80015ba:	4213      	tst	r3, r2
 80015bc:	f43f af07 	beq.w	80013ce <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c0:	f7fe fea0 	bl	8000304 <HAL_GetTick>
 80015c4:	eba0 0008 	sub.w	r0, r0, r8
 80015c8:	2802      	cmp	r0, #2
 80015ca:	d9eb      	bls.n	80015a4 <HAL_RCC_OscConfig+0x1f4>
 80015cc:	e753      	b.n	8001476 <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ce:	696a      	ldr	r2, [r5, #20]
 80015d0:	4e43      	ldr	r6, [pc, #268]	; (80016e0 <HAL_RCC_OscConfig+0x330>)
 80015d2:	4944      	ldr	r1, [pc, #272]	; (80016e4 <HAL_RCC_OscConfig+0x334>)
 80015d4:	2401      	movs	r4, #1
 80015d6:	b31a      	cbz	r2, 8001620 <HAL_RCC_OscConfig+0x270>
 80015d8:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80015dc:	fab3 f383 	clz	r3, r3
 80015e0:	440b      	add	r3, r1
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	2702      	movs	r7, #2
 80015e6:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80015e8:	f7fe fe8c 	bl	8000304 <HAL_GetTick>
 80015ec:	4680      	mov	r8, r0
 80015ee:	fa97 f3a7 	rbit	r3, r7
 80015f2:	fa97 f3a7 	rbit	r3, r7
 80015f6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015fa:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80015fc:	fa97 f3a7 	rbit	r3, r7
 8001600:	fab3 f383 	clz	r3, r3
 8001604:	f003 031f 	and.w	r3, r3, #31
 8001608:	fa04 f303 	lsl.w	r3, r4, r3
 800160c:	4213      	tst	r3, r2
 800160e:	f47f aee2 	bne.w	80013d6 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001612:	f7fe fe77 	bl	8000304 <HAL_GetTick>
 8001616:	eba0 0008 	sub.w	r0, r0, r8
 800161a:	2802      	cmp	r0, #2
 800161c:	d9e7      	bls.n	80015ee <HAL_RCC_OscConfig+0x23e>
 800161e:	e72a      	b.n	8001476 <HAL_RCC_OscConfig+0xc6>
 8001620:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001624:	fab3 f383 	clz	r3, r3
 8001628:	440b      	add	r3, r1
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	2702      	movs	r7, #2
 800162e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001630:	f7fe fe68 	bl	8000304 <HAL_GetTick>
 8001634:	4680      	mov	r8, r0
 8001636:	fa97 f3a7 	rbit	r3, r7
 800163a:	fa97 f3a7 	rbit	r3, r7
 800163e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001642:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001644:	fa97 f3a7 	rbit	r3, r7
 8001648:	fab3 f383 	clz	r3, r3
 800164c:	f003 031f 	and.w	r3, r3, #31
 8001650:	fa04 f303 	lsl.w	r3, r4, r3
 8001654:	4213      	tst	r3, r2
 8001656:	f43f aebe 	beq.w	80013d6 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800165a:	f7fe fe53 	bl	8000304 <HAL_GetTick>
 800165e:	eba0 0008 	sub.w	r0, r0, r8
 8001662:	2802      	cmp	r0, #2
 8001664:	d9e7      	bls.n	8001636 <HAL_RCC_OscConfig+0x286>
 8001666:	e706      	b.n	8001476 <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001668:	4c1d      	ldr	r4, [pc, #116]	; (80016e0 <HAL_RCC_OscConfig+0x330>)
 800166a:	69e3      	ldr	r3, [r4, #28]
 800166c:	00d9      	lsls	r1, r3, #3
 800166e:	d434      	bmi.n	80016da <HAL_RCC_OscConfig+0x32a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001670:	69e3      	ldr	r3, [r4, #28]
 8001672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001676:	61e3      	str	r3, [r4, #28]
 8001678:	69e3      	ldr	r3, [r4, #28]
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	9301      	str	r3, [sp, #4]
 8001680:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001682:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001684:	4f18      	ldr	r7, [pc, #96]	; (80016e8 <HAL_RCC_OscConfig+0x338>)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	05da      	lsls	r2, r3, #23
 800168a:	d52f      	bpl.n	80016ec <HAL_RCC_OscConfig+0x33c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800168c:	68ab      	ldr	r3, [r5, #8]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d13d      	bne.n	800170e <HAL_RCC_OscConfig+0x35e>
 8001692:	6a23      	ldr	r3, [r4, #32]
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800169a:	f7fe fe33 	bl	8000304 <HAL_GetTick>
 800169e:	2702      	movs	r7, #2
 80016a0:	4682      	mov	sl, r0
 80016a2:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a4:	f04f 0801 	mov.w	r8, #1
 80016a8:	fa97 f3a7 	rbit	r3, r7
 80016ac:	fa97 f3a7 	rbit	r3, r7
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d06c      	beq.n	800178e <HAL_RCC_OscConfig+0x3de>
 80016b4:	6a22      	ldr	r2, [r4, #32]
 80016b6:	fa99 f3a9 	rbit	r3, r9
 80016ba:	fab3 f383 	clz	r3, r3
 80016be:	f003 031f 	and.w	r3, r3, #31
 80016c2:	fa08 f303 	lsl.w	r3, r8, r3
 80016c6:	4213      	tst	r3, r2
 80016c8:	d058      	beq.n	800177c <HAL_RCC_OscConfig+0x3cc>
    if(pwrclkchanged == SET)
 80016ca:	2e00      	cmp	r6, #0
 80016cc:	f43f ae87 	beq.w	80013de <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d0:	69e3      	ldr	r3, [r4, #28]
 80016d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d6:	61e3      	str	r3, [r4, #28]
 80016d8:	e681      	b.n	80013de <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 80016da:	2600      	movs	r6, #0
 80016dc:	e7d2      	b.n	8001684 <HAL_RCC_OscConfig+0x2d4>
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000
 80016e4:	10908120 	.word	0x10908120
 80016e8:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80016f4:	f7fe fe06 	bl	8000304 <HAL_GetTick>
 80016f8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	05db      	lsls	r3, r3, #23
 80016fe:	d4c5      	bmi.n	800168c <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001700:	f7fe fe00 	bl	8000304 <HAL_GetTick>
 8001704:	eba0 0008 	sub.w	r0, r0, r8
 8001708:	2864      	cmp	r0, #100	; 0x64
 800170a:	d9f6      	bls.n	80016fa <HAL_RCC_OscConfig+0x34a>
 800170c:	e6b3      	b.n	8001476 <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800170e:	bb3b      	cbnz	r3, 8001760 <HAL_RCC_OscConfig+0x3b0>
 8001710:	6a23      	ldr	r3, [r4, #32]
 8001712:	f023 0301 	bic.w	r3, r3, #1
 8001716:	6223      	str	r3, [r4, #32]
 8001718:	6a23      	ldr	r3, [r4, #32]
 800171a:	f023 0304 	bic.w	r3, r3, #4
 800171e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001720:	f7fe fdf0 	bl	8000304 <HAL_GetTick>
 8001724:	2702      	movs	r7, #2
 8001726:	4682      	mov	sl, r0
 8001728:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172a:	f04f 0801 	mov.w	r8, #1
 800172e:	fa97 f3a7 	rbit	r3, r7
 8001732:	fa97 f3a7 	rbit	r3, r7
 8001736:	b373      	cbz	r3, 8001796 <HAL_RCC_OscConfig+0x3e6>
 8001738:	6a22      	ldr	r2, [r4, #32]
 800173a:	fa99 f3a9 	rbit	r3, r9
 800173e:	fab3 f383 	clz	r3, r3
 8001742:	f003 031f 	and.w	r3, r3, #31
 8001746:	fa08 f303 	lsl.w	r3, r8, r3
 800174a:	4213      	tst	r3, r2
 800174c:	d0bd      	beq.n	80016ca <HAL_RCC_OscConfig+0x31a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800174e:	f7fe fdd9 	bl	8000304 <HAL_GetTick>
 8001752:	f241 3388 	movw	r3, #5000	; 0x1388
 8001756:	eba0 000a 	sub.w	r0, r0, sl
 800175a:	4298      	cmp	r0, r3
 800175c:	d9e7      	bls.n	800172e <HAL_RCC_OscConfig+0x37e>
 800175e:	e68a      	b.n	8001476 <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001760:	2b05      	cmp	r3, #5
 8001762:	6a23      	ldr	r3, [r4, #32]
 8001764:	d103      	bne.n	800176e <HAL_RCC_OscConfig+0x3be>
 8001766:	f043 0304 	orr.w	r3, r3, #4
 800176a:	6223      	str	r3, [r4, #32]
 800176c:	e791      	b.n	8001692 <HAL_RCC_OscConfig+0x2e2>
 800176e:	f023 0301 	bic.w	r3, r3, #1
 8001772:	6223      	str	r3, [r4, #32]
 8001774:	6a23      	ldr	r3, [r4, #32]
 8001776:	f023 0304 	bic.w	r3, r3, #4
 800177a:	e78d      	b.n	8001698 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800177c:	f7fe fdc2 	bl	8000304 <HAL_GetTick>
 8001780:	f241 3388 	movw	r3, #5000	; 0x1388
 8001784:	eba0 000a 	sub.w	r0, r0, sl
 8001788:	4298      	cmp	r0, r3
 800178a:	d98d      	bls.n	80016a8 <HAL_RCC_OscConfig+0x2f8>
 800178c:	e673      	b.n	8001476 <HAL_RCC_OscConfig+0xc6>
 800178e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001792:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001794:	e78f      	b.n	80016b6 <HAL_RCC_OscConfig+0x306>
 8001796:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800179c:	e7cd      	b.n	800173a <HAL_RCC_OscConfig+0x38a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800179e:	4c44      	ldr	r4, [pc, #272]	; (80018b0 <HAL_RCC_OscConfig+0x500>)
 80017a0:	6863      	ldr	r3, [r4, #4]
 80017a2:	f003 030c 	and.w	r3, r3, #12
 80017a6:	2b08      	cmp	r3, #8
 80017a8:	f43f ae06 	beq.w	80013b8 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ac:	2a02      	cmp	r2, #2
 80017ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017b2:	d158      	bne.n	8001866 <HAL_RCC_OscConfig+0x4b6>
 80017b4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80017b8:	fab3 f383 	clz	r3, r3
 80017bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017ca:	f7fe fd9b 	bl	8000304 <HAL_GetTick>
 80017ce:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80017d2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d4:	2601      	movs	r6, #1
 80017d6:	fa97 f3a7 	rbit	r3, r7
 80017da:	6822      	ldr	r2, [r4, #0]
 80017dc:	fa97 f3a7 	rbit	r3, r7
 80017e0:	fab3 f383 	clz	r3, r3
 80017e4:	f003 031f 	and.w	r3, r3, #31
 80017e8:	fa06 f303 	lsl.w	r3, r6, r3
 80017ec:	4213      	tst	r3, r2
 80017ee:	d133      	bne.n	8001858 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80017f2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80017f4:	f023 030f 	bic.w	r3, r3, #15
 80017f8:	4313      	orrs	r3, r2
 80017fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80017fc:	6862      	ldr	r2, [r4, #4]
 80017fe:	6a2b      	ldr	r3, [r5, #32]
 8001800:	69e9      	ldr	r1, [r5, #28]
 8001802:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8001806:	430b      	orrs	r3, r1
 8001808:	4313      	orrs	r3, r2
 800180a:	6063      	str	r3, [r4, #4]
 800180c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001810:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001814:	fab3 f383 	clz	r3, r3
 8001818:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800181c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001826:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001828:	f7fe fd6c 	bl	8000304 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800182c:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 800182e:	4607      	mov	r7, r0
 8001830:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001834:	6822      	ldr	r2, [r4, #0]
 8001836:	fa95 f3a5 	rbit	r3, r5
 800183a:	fab3 f383 	clz	r3, r3
 800183e:	f003 031f 	and.w	r3, r3, #31
 8001842:	fa06 f303 	lsl.w	r3, r6, r3
 8001846:	4213      	tst	r3, r2
 8001848:	f47f adcd 	bne.w	80013e6 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800184c:	f7fe fd5a 	bl	8000304 <HAL_GetTick>
 8001850:	1bc0      	subs	r0, r0, r7
 8001852:	2802      	cmp	r0, #2
 8001854:	d9ec      	bls.n	8001830 <HAL_RCC_OscConfig+0x480>
 8001856:	e60e      	b.n	8001476 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001858:	f7fe fd54 	bl	8000304 <HAL_GetTick>
 800185c:	eba0 0008 	sub.w	r0, r0, r8
 8001860:	2802      	cmp	r0, #2
 8001862:	d9b8      	bls.n	80017d6 <HAL_RCC_OscConfig+0x426>
 8001864:	e607      	b.n	8001476 <HAL_RCC_OscConfig+0xc6>
 8001866:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800186a:	fab3 f383 	clz	r3, r3
 800186e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001872:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800187c:	f7fe fd42 	bl	8000304 <HAL_GetTick>
 8001880:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001884:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001886:	2601      	movs	r6, #1
 8001888:	fa95 f3a5 	rbit	r3, r5
 800188c:	6822      	ldr	r2, [r4, #0]
 800188e:	fa95 f3a5 	rbit	r3, r5
 8001892:	fab3 f383 	clz	r3, r3
 8001896:	f003 031f 	and.w	r3, r3, #31
 800189a:	fa06 f303 	lsl.w	r3, r6, r3
 800189e:	4213      	tst	r3, r2
 80018a0:	f43f ada1 	beq.w	80013e6 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a4:	f7fe fd2e 	bl	8000304 <HAL_GetTick>
 80018a8:	1bc0      	subs	r0, r0, r7
 80018aa:	2802      	cmp	r0, #2
 80018ac:	d9ec      	bls.n	8001888 <HAL_RCC_OscConfig+0x4d8>
 80018ae:	e5e2      	b.n	8001476 <HAL_RCC_OscConfig+0xc6>
 80018b0:	40021000 	.word	0x40021000

080018b4 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80018b4:	4911      	ldr	r1, [pc, #68]	; (80018fc <HAL_RCC_GetSysClockFreq+0x48>)
 80018b6:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018b8:	f003 020c 	and.w	r2, r3, #12
 80018bc:	2a08      	cmp	r2, #8
 80018be:	d11a      	bne.n	80018f6 <HAL_RCC_GetSysClockFreq+0x42>
 80018c0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80018c4:	fa92 f2a2 	rbit	r2, r2
 80018c8:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80018ca:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80018ce:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80018d0:	fa90 f0a0 	rbit	r0, r0
 80018d4:	fab0 f080 	clz	r0, r0
 80018d8:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80018dc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80018e0:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80018e2:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80018e4:	4a06      	ldr	r2, [pc, #24]	; (8001900 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80018e6:	4807      	ldr	r0, [pc, #28]	; (8001904 <HAL_RCC_GetSysClockFreq+0x50>)
 80018e8:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80018ea:	4807      	ldr	r0, [pc, #28]	; (8001908 <HAL_RCC_GetSysClockFreq+0x54>)
 80018ec:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80018f0:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80018f2:	4348      	muls	r0, r1
 80018f4:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80018f6:	4804      	ldr	r0, [pc, #16]	; (8001908 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000
 8001900:	0800540c 	.word	0x0800540c
 8001904:	0800541c 	.word	0x0800541c
 8001908:	007a1200 	.word	0x007a1200

0800190c <HAL_RCC_ClockConfig>:
{
 800190c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001910:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001912:	4604      	mov	r4, r0
 8001914:	b910      	cbnz	r0, 800191c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001916:	2001      	movs	r0, #1
 8001918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800191c:	4a4c      	ldr	r2, [pc, #304]	; (8001a50 <HAL_RCC_ClockConfig+0x144>)
 800191e:	6813      	ldr	r3, [r2, #0]
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	428b      	cmp	r3, r1
 8001926:	d32e      	bcc.n	8001986 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001928:	6822      	ldr	r2, [r4, #0]
 800192a:	0791      	lsls	r1, r2, #30
 800192c:	d436      	bmi.n	800199c <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800192e:	07d2      	lsls	r2, r2, #31
 8001930:	d43c      	bmi.n	80019ac <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001932:	4a47      	ldr	r2, [pc, #284]	; (8001a50 <HAL_RCC_ClockConfig+0x144>)
 8001934:	6813      	ldr	r3, [r2, #0]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	429d      	cmp	r5, r3
 800193c:	d375      	bcc.n	8001a2a <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193e:	6822      	ldr	r2, [r4, #0]
 8001940:	4d44      	ldr	r5, [pc, #272]	; (8001a54 <HAL_RCC_ClockConfig+0x148>)
 8001942:	f012 0f04 	tst.w	r2, #4
 8001946:	d17c      	bne.n	8001a42 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001948:	0713      	lsls	r3, r2, #28
 800194a:	d506      	bpl.n	800195a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800194c:	686b      	ldr	r3, [r5, #4]
 800194e:	6922      	ldr	r2, [r4, #16]
 8001950:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001954:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001958:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800195a:	f7ff ffab 	bl	80018b4 <HAL_RCC_GetSysClockFreq>
 800195e:	686b      	ldr	r3, [r5, #4]
 8001960:	22f0      	movs	r2, #240	; 0xf0
 8001962:	fa92 f2a2 	rbit	r2, r2
 8001966:	fab2 f282 	clz	r2, r2
 800196a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800196e:	40d3      	lsrs	r3, r2
 8001970:	4a39      	ldr	r2, [pc, #228]	; (8001a58 <HAL_RCC_ClockConfig+0x14c>)
 8001972:	5cd3      	ldrb	r3, [r2, r3]
 8001974:	40d8      	lsrs	r0, r3
 8001976:	4b39      	ldr	r3, [pc, #228]	; (8001a5c <HAL_RCC_ClockConfig+0x150>)
 8001978:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800197a:	2000      	movs	r0, #0
 800197c:	f7fe fc80 	bl	8000280 <HAL_InitTick>
  return HAL_OK;
 8001980:	2000      	movs	r0, #0
 8001982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001986:	6813      	ldr	r3, [r2, #0]
 8001988:	f023 0307 	bic.w	r3, r3, #7
 800198c:	430b      	orrs	r3, r1
 800198e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001990:	6813      	ldr	r3, [r2, #0]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	4299      	cmp	r1, r3
 8001998:	d1bd      	bne.n	8001916 <HAL_RCC_ClockConfig+0xa>
 800199a:	e7c5      	b.n	8001928 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800199c:	492d      	ldr	r1, [pc, #180]	; (8001a54 <HAL_RCC_ClockConfig+0x148>)
 800199e:	68a0      	ldr	r0, [r4, #8]
 80019a0:	684b      	ldr	r3, [r1, #4]
 80019a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019a6:	4303      	orrs	r3, r0
 80019a8:	604b      	str	r3, [r1, #4]
 80019aa:	e7c0      	b.n	800192e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ac:	6862      	ldr	r2, [r4, #4]
 80019ae:	4e29      	ldr	r6, [pc, #164]	; (8001a54 <HAL_RCC_ClockConfig+0x148>)
 80019b0:	2a01      	cmp	r2, #1
 80019b2:	d127      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xf8>
 80019b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019b8:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019bc:	6831      	ldr	r1, [r6, #0]
 80019be:	fa93 f3a3 	rbit	r3, r3
 80019c2:	fab3 f383 	clz	r3, r3
 80019c6:	f003 031f 	and.w	r3, r3, #31
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d0:	d0a1      	beq.n	8001916 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019d2:	6873      	ldr	r3, [r6, #4]
 80019d4:	f023 0303 	bic.w	r3, r3, #3
 80019d8:	431a      	orrs	r2, r3
 80019da:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 80019dc:	f7fe fc92 	bl	8000304 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80019e4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e6:	6873      	ldr	r3, [r6, #4]
 80019e8:	6862      	ldr	r2, [r4, #4]
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80019f2:	d09e      	beq.n	8001932 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f4:	f7fe fc86 	bl	8000304 <HAL_GetTick>
 80019f8:	1bc0      	subs	r0, r0, r7
 80019fa:	4540      	cmp	r0, r8
 80019fc:	d9f3      	bls.n	80019e6 <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 80019fe:	2003      	movs	r0, #3
}
 8001a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a04:	2a02      	cmp	r2, #2
 8001a06:	bf0c      	ite	eq
 8001a08:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001a0c:	2302      	movne	r3, #2
 8001a0e:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a12:	6830      	ldr	r0, [r6, #0]
 8001a14:	fa93 f3a3 	rbit	r3, r3
 8001a18:	fab3 f383 	clz	r3, r3
 8001a1c:	f003 031f 	and.w	r3, r3, #31
 8001a20:	2101      	movs	r1, #1
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	4203      	tst	r3, r0
 8001a28:	e7d2      	b.n	80019d0 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	6813      	ldr	r3, [r2, #0]
 8001a2c:	f023 0307 	bic.w	r3, r3, #7
 8001a30:	432b      	orrs	r3, r5
 8001a32:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a34:	6813      	ldr	r3, [r2, #0]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	429d      	cmp	r5, r3
 8001a3c:	f47f af6b 	bne.w	8001916 <HAL_RCC_ClockConfig+0xa>
 8001a40:	e77d      	b.n	800193e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a42:	686b      	ldr	r3, [r5, #4]
 8001a44:	68e1      	ldr	r1, [r4, #12]
 8001a46:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a4a:	430b      	orrs	r3, r1
 8001a4c:	606b      	str	r3, [r5, #4]
 8001a4e:	e77b      	b.n	8001948 <HAL_RCC_ClockConfig+0x3c>
 8001a50:	40022000 	.word	0x40022000
 8001a54:	40021000 	.word	0x40021000
 8001a58:	08005e32 	.word	0x08005e32
 8001a5c:	2000001c 	.word	0x2000001c

08001a60 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001a60:	4b01      	ldr	r3, [pc, #4]	; (8001a68 <HAL_RCC_GetHCLKFreq+0x8>)
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	2000001c 	.word	0x2000001c

08001a6c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001a6c:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a6e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	fa92 f2a2 	rbit	r2, r2
 8001a78:	fab2 f282 	clz	r2, r2
 8001a7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a80:	40d3      	lsrs	r3, r2
 8001a82:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a84:	5cd3      	ldrb	r3, [r2, r3]
 8001a86:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001a88:	6810      	ldr	r0, [r2, #0]
}    
 8001a8a:	40d8      	lsrs	r0, r3
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000
 8001a94:	08005e42 	.word	0x08005e42
 8001a98:	2000001c 	.word	0x2000001c

08001a9c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a9e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	fa92 f2a2 	rbit	r2, r2
 8001aa8:	fab2 f282 	clz	r2, r2
 8001aac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001ab0:	40d3      	lsrs	r3, r2
 8001ab2:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ab4:	5cd3      	ldrb	r3, [r2, r3]
 8001ab6:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001ab8:	6810      	ldr	r0, [r2, #0]
} 
 8001aba:	40d8      	lsrs	r0, r3
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	08005e42 	.word	0x08005e42
 8001ac8:	2000001c 	.word	0x2000001c

08001acc <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001acc:	6803      	ldr	r3, [r0, #0]
{
 8001ace:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ad2:	03df      	lsls	r7, r3, #15
{
 8001ad4:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ad6:	d523      	bpl.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ad8:	4d9b      	ldr	r5, [pc, #620]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001ada:	69eb      	ldr	r3, [r5, #28]
 8001adc:	00de      	lsls	r6, r3, #3
 8001ade:	f100 80d7 	bmi.w	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	69eb      	ldr	r3, [r5, #28]
 8001ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	61eb      	str	r3, [r5, #28]
 8001aea:	69eb      	ldr	r3, [r5, #28]
 8001aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af0:	9301      	str	r3, [sp, #4]
 8001af2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001af4:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af6:	4f95      	ldr	r7, [pc, #596]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	05d8      	lsls	r0, r3, #23
 8001afc:	f140 80ca 	bpl.w	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b00:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b02:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001b06:	f040 80da 	bne.w	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001b0a:	6a2b      	ldr	r3, [r5, #32]
 8001b0c:	6862      	ldr	r2, [r4, #4]
 8001b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b12:	4313      	orrs	r3, r2
 8001b14:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b16:	b11e      	cbz	r6, 8001b20 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b18:	69eb      	ldr	r3, [r5, #28]
 8001b1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b20:	6820      	ldr	r0, [r4, #0]
 8001b22:	07c3      	lsls	r3, r0, #31
 8001b24:	d506      	bpl.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b26:	4a88      	ldr	r2, [pc, #544]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001b28:	68a1      	ldr	r1, [r4, #8]
 8001b2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001b2c:	f023 0303 	bic.w	r3, r3, #3
 8001b30:	430b      	orrs	r3, r1
 8001b32:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b34:	0787      	lsls	r7, r0, #30
 8001b36:	d506      	bpl.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b38:	4a83      	ldr	r2, [pc, #524]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001b3a:	68e1      	ldr	r1, [r4, #12]
 8001b3c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001b3e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001b42:	430b      	orrs	r3, r1
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001b46:	0746      	lsls	r6, r0, #29
 8001b48:	d506      	bpl.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001b4a:	4a7f      	ldr	r2, [pc, #508]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001b4c:	6921      	ldr	r1, [r4, #16]
 8001b4e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001b50:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001b54:	430b      	orrs	r3, r1
 8001b56:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b58:	0685      	lsls	r5, r0, #26
 8001b5a:	d506      	bpl.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b5c:	4a7a      	ldr	r2, [pc, #488]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001b5e:	69e1      	ldr	r1, [r4, #28]
 8001b60:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001b62:	f023 0310 	bic.w	r3, r3, #16
 8001b66:	430b      	orrs	r3, r1
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b6a:	0381      	lsls	r1, r0, #14
 8001b6c:	d506      	bpl.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001b6e:	4a76      	ldr	r2, [pc, #472]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001b70:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001b72:	6853      	ldr	r3, [r2, #4]
 8001b74:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b78:	430b      	orrs	r3, r1
 8001b7a:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001b7c:	0642      	lsls	r2, r0, #25
 8001b7e:	d506      	bpl.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001b80:	4a71      	ldr	r2, [pc, #452]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001b82:	6a21      	ldr	r1, [r4, #32]
 8001b84:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001b86:	f023 0320 	bic.w	r3, r3, #32
 8001b8a:	430b      	orrs	r3, r1
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001b8e:	0343      	lsls	r3, r0, #13
 8001b90:	d506      	bpl.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001b92:	4a6d      	ldr	r2, [pc, #436]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001b94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001b96:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001b98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b9c:	430b      	orrs	r3, r1
 8001b9e:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ba0:	0707      	lsls	r7, r0, #28
 8001ba2:	d506      	bpl.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001ba4:	4a68      	ldr	r2, [pc, #416]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001ba6:	6961      	ldr	r1, [r4, #20]
 8001ba8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001baa:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001bae:	430b      	orrs	r3, r1
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001bb2:	06c6      	lsls	r6, r0, #27
 8001bb4:	d506      	bpl.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001bb6:	4a64      	ldr	r2, [pc, #400]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001bb8:	69a1      	ldr	r1, [r4, #24]
 8001bba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001bbc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001bc0:	430b      	orrs	r3, r1
 8001bc2:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001bc4:	0585      	lsls	r5, r0, #22
 8001bc6:	d506      	bpl.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001bc8:	4a5f      	ldr	r2, [pc, #380]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001bca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001bcc:	6853      	ldr	r3, [r2, #4]
 8001bce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001bd2:	430b      	orrs	r3, r1
 8001bd4:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001bd6:	0601      	lsls	r1, r0, #24
 8001bd8:	d506      	bpl.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001bda:	4a5b      	ldr	r2, [pc, #364]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001bdc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001bde:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001be0:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001be4:	430b      	orrs	r3, r1
 8001be6:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001be8:	05c2      	lsls	r2, r0, #23
 8001bea:	d506      	bpl.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001bec:	4a56      	ldr	r2, [pc, #344]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001bee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001bf0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001bf2:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8001bf6:	430b      	orrs	r3, r1
 8001bf8:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001bfa:	04c3      	lsls	r3, r0, #19
 8001bfc:	d506      	bpl.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001bfe:	4a52      	ldr	r2, [pc, #328]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c02:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c08:	430b      	orrs	r3, r1
 8001c0a:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001c0c:	0487      	lsls	r7, r0, #18
 8001c0e:	d506      	bpl.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001c10:	4a4d      	ldr	r2, [pc, #308]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c12:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001c14:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c16:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c1a:	430b      	orrs	r3, r1
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8001c1e:	02c6      	lsls	r6, r0, #11
 8001c20:	d506      	bpl.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8001c22:	4a49      	ldr	r2, [pc, #292]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c24:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001c26:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c2c:	430b      	orrs	r3, r1
 8001c2e:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8001c30:	0285      	lsls	r5, r0, #10
 8001c32:	d506      	bpl.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8001c34:	4a44      	ldr	r2, [pc, #272]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c36:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001c38:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c3a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001c3e:	430b      	orrs	r3, r1
 8001c40:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001c42:	0241      	lsls	r1, r0, #9
 8001c44:	d506      	bpl.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001c46:	4a40      	ldr	r2, [pc, #256]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c48:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001c4a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c50:	430b      	orrs	r3, r1
 8001c52:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8001c54:	0202      	lsls	r2, r0, #8
 8001c56:	d506      	bpl.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8001c58:	4a3b      	ldr	r2, [pc, #236]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c5a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001c5c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c62:	430b      	orrs	r3, r1
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8001c66:	01c3      	lsls	r3, r0, #7
 8001c68:	d506      	bpl.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8001c6a:	4a37      	ldr	r2, [pc, #220]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c6c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001c6e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c74:	430b      	orrs	r3, r1
 8001c76:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8001c78:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8001c7c:	d01c      	beq.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8001c7e:	4a32      	ldr	r2, [pc, #200]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c80:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001c82:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001c88:	430b      	orrs	r3, r1
 8001c8a:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	e013      	b.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 8001c90:	2600      	movs	r6, #0
 8001c92:	e730      	b.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001c9c:	f7fe fb32 	bl	8000304 <HAL_GetTick>
 8001ca0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	05d9      	lsls	r1, r3, #23
 8001ca6:	f53f af2b 	bmi.w	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001caa:	f7fe fb2b 	bl	8000304 <HAL_GetTick>
 8001cae:	eba0 0008 	sub.w	r0, r0, r8
 8001cb2:	2864      	cmp	r0, #100	; 0x64
 8001cb4:	d9f5      	bls.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 8001cb6:	2003      	movs	r0, #3
}
 8001cb8:	b002      	add	sp, #8
 8001cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cbe:	6862      	ldr	r2, [r4, #4]
 8001cc0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	f43f af20 	beq.w	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cca:	6a29      	ldr	r1, [r5, #32]
 8001ccc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cd0:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8001cd4:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cd8:	f8df e074 	ldr.w	lr, [pc, #116]	; 8001d50 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8001cdc:	fab2 f282 	clz	r2, r2
 8001ce0:	4472      	add	r2, lr
 8001ce2:	0092      	lsls	r2, r2, #2
 8001ce4:	2701      	movs	r7, #1
 8001ce6:	6017      	str	r7, [r2, #0]
 8001ce8:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cec:	fab3 f383 	clz	r3, r3
 8001cf0:	4473      	add	r3, lr
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001cf8:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8001cfa:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001cfc:	f57f af05 	bpl.w	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8001d00:	f7fe fb00 	bl	8000304 <HAL_GetTick>
 8001d04:	f04f 0802 	mov.w	r8, #2
 8001d08:	4682      	mov	sl, r0
 8001d0a:	46c1      	mov	r9, r8
 8001d0c:	fa98 f3a8 	rbit	r3, r8
 8001d10:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d14:	b1a3      	cbz	r3, 8001d40 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8001d16:	6a2a      	ldr	r2, [r5, #32]
 8001d18:	fa99 f3a9 	rbit	r3, r9
 8001d1c:	fab3 f383 	clz	r3, r3
 8001d20:	f003 031f 	and.w	r3, r3, #31
 8001d24:	fa07 f303 	lsl.w	r3, r7, r3
 8001d28:	4213      	tst	r3, r2
 8001d2a:	f47f aeee 	bne.w	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2e:	f7fe fae9 	bl	8000304 <HAL_GetTick>
 8001d32:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d36:	eba0 000a 	sub.w	r0, r0, sl
 8001d3a:	4298      	cmp	r0, r3
 8001d3c:	d9e6      	bls.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8001d3e:	e7ba      	b.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8001d40:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d44:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001d46:	e7e7      	b.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40007000 	.word	0x40007000
 8001d50:	10908100 	.word	0x10908100

08001d54 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001d54:	6802      	ldr	r2, [r0, #0]
{
 8001d56:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001d58:	68d3      	ldr	r3, [r2, #12]
 8001d5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001d5e:	60d3      	str	r3, [r2, #12]
{
 8001d60:	4604      	mov	r4, r0
  
  tickstart = HAL_GetTick();
 8001d62:	f7fe facf 	bl	8000304 <HAL_GetTick>
 8001d66:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001d68:	6823      	ldr	r3, [r4, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	069b      	lsls	r3, r3, #26
 8001d6e:	d501      	bpl.n	8001d74 <HAL_RTC_WaitForSynchro+0x20>
    {       
      return HAL_TIMEOUT;
    } 
  }

  return HAL_OK;
 8001d70:	2000      	movs	r0, #0
 8001d72:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8001d74:	f7fe fac6 	bl	8000304 <HAL_GetTick>
 8001d78:	1b40      	subs	r0, r0, r5
 8001d7a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001d7e:	d9f3      	bls.n	8001d68 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8001d80:	2003      	movs	r0, #3
}
 8001d82:	bd38      	pop	{r3, r4, r5, pc}

08001d84 <HAL_RTC_GetState>:
  * @retval HAL state
  */
HAL_RTCStateTypeDef HAL_RTC_GetState(RTC_HandleTypeDef* hrtc)
{
  /* Return RTC handle state */
  return hrtc->State;
 8001d84:	7f40      	ldrb	r0, [r0, #29]
}
 8001d86:	4770      	bx	lr

08001d88 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout 
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001d88:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001d8a:	6803      	ldr	r3, [r0, #0]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	0652      	lsls	r2, r2, #25
{
 8001d90:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001d92:	d501      	bpl.n	8001d98 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8001d94:	2000      	movs	r0, #0
 8001d96:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001d98:	f04f 32ff 	mov.w	r2, #4294967295
 8001d9c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001d9e:	f7fe fab1 	bl	8000304 <HAL_GetTick>
 8001da2:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001da4:	6823      	ldr	r3, [r4, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	065b      	lsls	r3, r3, #25
 8001daa:	d4f3      	bmi.n	8001d94 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8001dac:	f7fe faaa 	bl	8000304 <HAL_GetTick>
 8001db0:	1b40      	subs	r0, r0, r5
 8001db2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001db6:	d9f5      	bls.n	8001da4 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8001db8:	2003      	movs	r0, #3
}
 8001dba:	bd38      	pop	{r3, r4, r5, pc}

08001dbc <HAL_RTC_Init>:
{
 8001dbc:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8001dbe:	4604      	mov	r4, r0
 8001dc0:	b1b8      	cbz	r0, 8001df2 <HAL_RTC_Init+0x36>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001dc2:	7f43      	ldrb	r3, [r0, #29]
 8001dc4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001dc8:	b913      	cbnz	r3, 8001dd0 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8001dca:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8001dcc:	f002 f93e 	bl	800404c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001dd4:	6823      	ldr	r3, [r4, #0]
 8001dd6:	22ca      	movs	r2, #202	; 0xca
 8001dd8:	625a      	str	r2, [r3, #36]	; 0x24
 8001dda:	2253      	movs	r2, #83	; 0x53
 8001ddc:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001dde:	4620      	mov	r0, r4
 8001de0:	f7ff ffd2 	bl	8001d88 <RTC_EnterInitMode>
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	4605      	mov	r5, r0
 8001de8:	b128      	cbz	r0, 8001df6 <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001dea:	22ff      	movs	r2, #255	; 0xff
 8001dec:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001dee:	2304      	movs	r3, #4
 8001df0:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8001df2:	2501      	movs	r5, #1
 8001df4:	e02e      	b.n	8001e54 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001df6:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001df8:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001dfa:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8001dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e02:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e04:	6862      	ldr	r2, [r4, #4]
 8001e06:	6899      	ldr	r1, [r3, #8]
 8001e08:	4302      	orrs	r2, r0
 8001e0a:	6960      	ldr	r0, [r4, #20]
 8001e0c:	4302      	orrs	r2, r0
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001e12:	68e2      	ldr	r2, [r4, #12]
 8001e14:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001e16:	691a      	ldr	r2, [r3, #16]
 8001e18:	68a1      	ldr	r1, [r4, #8]
 8001e1a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001e1e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e26:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	069b      	lsls	r3, r3, #26
 8001e2c:	d405      	bmi.n	8001e3a <HAL_RTC_Init+0x7e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e2e:	4620      	mov	r0, r4
 8001e30:	f7ff ff90 	bl	8001d54 <HAL_RTC_WaitForSynchro>
 8001e34:	b108      	cbz	r0, 8001e3a <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e36:	6823      	ldr	r3, [r4, #0]
 8001e38:	e7d7      	b.n	8001dea <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001e3a:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001e3c:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001e3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e44:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001e46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001e4c:	22ff      	movs	r2, #255	; 0xff
 8001e4e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001e50:	2301      	movs	r3, #1
 8001e52:	7763      	strb	r3, [r4, #29]
}
 8001e54:	4628      	mov	r0, r5
 8001e56:	bd38      	pop	{r3, r4, r5, pc}

08001e58 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8001e58:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 8001e5a:	2809      	cmp	r0, #9
 8001e5c:	d803      	bhi.n	8001e66 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8001e5e:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8001e62:	b2c0      	uxtb	r0, r0
 8001e64:	4770      	bx	lr
    Value -= 10U;
 8001e66:	380a      	subs	r0, #10
    bcdhigh++;
 8001e68:	3301      	adds	r3, #1
    Value -= 10U;
 8001e6a:	b2c0      	uxtb	r0, r0
 8001e6c:	e7f5      	b.n	8001e5a <RTC_ByteToBcd2+0x2>

08001e6e <HAL_RTC_SetDate>:
{
 8001e6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8001e70:	7f03      	ldrb	r3, [r0, #28]
 8001e72:	2b01      	cmp	r3, #1
{
 8001e74:	4605      	mov	r5, r0
 8001e76:	f04f 0602 	mov.w	r6, #2
 __HAL_LOCK(hrtc);
 8001e7a:	d030      	beq.n	8001ede <HAL_RTC_SetDate+0x70>
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8001e80:	7746      	strb	r6, [r0, #29]
 8001e82:	784b      	ldrb	r3, [r1, #1]
 8001e84:	78c8      	ldrb	r0, [r1, #3]
 8001e86:	788e      	ldrb	r6, [r1, #2]
 8001e88:	780c      	ldrb	r4, [r1, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001e8a:	2a00      	cmp	r2, #0
 8001e8c:	d148      	bne.n	8001f20 <HAL_RTC_SetDate+0xb2>
 8001e8e:	06da      	lsls	r2, r3, #27
 8001e90:	d503      	bpl.n	8001e9a <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001e92:	f023 0310 	bic.w	r3, r3, #16
 8001e96:	330a      	adds	r3, #10
 8001e98:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001e9a:	f7ff ffdd 	bl	8001e58 <RTC_ByteToBcd2>
 8001e9e:	4607      	mov	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001ea0:	7848      	ldrb	r0, [r1, #1]
 8001ea2:	f7ff ffd9 	bl	8001e58 <RTC_ByteToBcd2>
 8001ea6:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8001ea8:	4630      	mov	r0, r6
 8001eaa:	f7ff ffd5 	bl	8001e58 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001eae:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 8001eb2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001eb6:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001eba:	682b      	ldr	r3, [r5, #0]
 8001ebc:	22ca      	movs	r2, #202	; 0xca
 8001ebe:	625a      	str	r2, [r3, #36]	; 0x24
 8001ec0:	2253      	movs	r2, #83	; 0x53
 8001ec2:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001ec4:	4628      	mov	r0, r5
 8001ec6:	f7ff ff5f 	bl	8001d88 <RTC_EnterInitMode>
 8001eca:	682b      	ldr	r3, [r5, #0]
 8001ecc:	4606      	mov	r6, r0
 8001ece:	b140      	cbz	r0, 8001ee2 <HAL_RTC_SetDate+0x74>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001ed0:	22ff      	movs	r2, #255	; 0xff
 8001ed2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8001ed8:	2300      	movs	r3, #0
 8001eda:	772b      	strb	r3, [r5, #28]
        return HAL_ERROR;
 8001edc:	2601      	movs	r6, #1
}
 8001ede:	4630      	mov	r0, r6
 8001ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001ee2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8001ee6:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8001eea:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ef2:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	069b      	lsls	r3, r3, #26
 8001ef8:	d40a      	bmi.n	8001f10 <HAL_RTC_SetDate+0xa2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001efa:	4628      	mov	r0, r5
 8001efc:	f7ff ff2a 	bl	8001d54 <HAL_RTC_WaitForSynchro>
 8001f00:	b130      	cbz	r0, 8001f10 <HAL_RTC_SetDate+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001f02:	682b      	ldr	r3, [r5, #0]
 8001f04:	22ff      	movs	r2, #255	; 0xff
 8001f06:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001f08:	2304      	movs	r3, #4
 8001f0a:	776b      	strb	r3, [r5, #29]
        __HAL_UNLOCK(hrtc);
 8001f0c:	772e      	strb	r6, [r5, #28]
 8001f0e:	e7e5      	b.n	8001edc <HAL_RTC_SetDate+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001f10:	682b      	ldr	r3, [r5, #0]
 8001f12:	22ff      	movs	r2, #255	; 0xff
 8001f14:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8001f16:	2301      	movs	r3, #1
 8001f18:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	772b      	strb	r3, [r5, #28]
    return HAL_OK;    
 8001f1e:	e7de      	b.n	8001ede <HAL_RTC_SetDate+0x70>
                  (((uint32_t)sDate->Month) << 8U) | \
 8001f20:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001f22:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8001f26:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001f28:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 8001f2c:	e7c5      	b.n	8001eba <HAL_RTC_SetDate+0x4c>

08001f2e <HAL_RTC_SetTime>:
{
 8001f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001f30:	7f03      	ldrb	r3, [r0, #28]
 8001f32:	2b01      	cmp	r3, #1
{
 8001f34:	4606      	mov	r6, r0
 8001f36:	460f      	mov	r7, r1
 8001f38:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hrtc);
 8001f3c:	d02f      	beq.n	8001f9e <HAL_RTC_SetTime+0x70>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	7703      	strb	r3, [r0, #28]
 8001f42:	6803      	ldr	r3, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f44:	7745      	strb	r5, [r0, #29]
 8001f46:	7808      	ldrb	r0, [r1, #0]
 8001f48:	784d      	ldrb	r5, [r1, #1]
 8001f4a:	788c      	ldrb	r4, [r1, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001f4c:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 8001f4e:	bb42      	cbnz	r2, 8001fa2 <HAL_RTC_SetTime+0x74>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001f50:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 8001f54:	bf08      	it	eq
 8001f56:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001f58:	f7ff ff7e 	bl	8001e58 <RTC_ByteToBcd2>
 8001f5c:	4601      	mov	r1, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001f5e:	4628      	mov	r0, r5
 8001f60:	f7ff ff7a 	bl	8001e58 <RTC_ByteToBcd2>
 8001f64:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001f66:	4620      	mov	r0, r4
 8001f68:	f7ff ff76 	bl	8001e58 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001f6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001f72:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001f76:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f7a:	6833      	ldr	r3, [r6, #0]
 8001f7c:	22ca      	movs	r2, #202	; 0xca
 8001f7e:	625a      	str	r2, [r3, #36]	; 0x24
 8001f80:	2253      	movs	r2, #83	; 0x53
 8001f82:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001f84:	4630      	mov	r0, r6
 8001f86:	f7ff feff 	bl	8001d88 <RTC_EnterInitMode>
 8001f8a:	6833      	ldr	r3, [r6, #0]
 8001f8c:	4605      	mov	r5, r0
 8001f8e:	b1a8      	cbz	r0, 8001fbc <HAL_RTC_SetTime+0x8e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001f90:	22ff      	movs	r2, #255	; 0xff
 8001f92:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001f94:	2304      	movs	r3, #4
 8001f96:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8001f98:	2300      	movs	r3, #0
 8001f9a:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 8001f9c:	2501      	movs	r5, #1
}
 8001f9e:	4628      	mov	r0, r5
 8001fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001fa2:	f013 0340 	ands.w	r3, r3, #64	; 0x40
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001fa6:	ea4f 2505 	mov.w	r5, r5, lsl #8
      sTime->TimeFormat = 0x00U;
 8001faa:	bf08      	it	eq
 8001fac:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001fae:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001fb2:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 8001fb4:	78cc      	ldrb	r4, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001fb6:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001fba:	e7de      	b.n	8001f7a <HAL_RTC_SetTime+0x4c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001fbc:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 8001fc0:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8001fc4:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8001fc6:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001fc8:	6938      	ldr	r0, [r7, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8001fca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fce:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	6899      	ldr	r1, [r3, #8]
 8001fd4:	4302      	orrs	r2, r0
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fe0:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	069b      	lsls	r3, r3, #26
 8001fe6:	d40a      	bmi.n	8001ffe <HAL_RTC_SetTime+0xd0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001fe8:	4630      	mov	r0, r6
 8001fea:	f7ff feb3 	bl	8001d54 <HAL_RTC_WaitForSynchro>
 8001fee:	b130      	cbz	r0, 8001ffe <HAL_RTC_SetTime+0xd0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001ff0:	6833      	ldr	r3, [r6, #0]
 8001ff2:	22ff      	movs	r2, #255	; 0xff
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	7773      	strb	r3, [r6, #29]
        __HAL_UNLOCK(hrtc);
 8001ffa:	7735      	strb	r5, [r6, #28]
 8001ffc:	e7ce      	b.n	8001f9c <HAL_RTC_SetTime+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ffe:	6833      	ldr	r3, [r6, #0]
 8002000:	22ff      	movs	r2, #255	; 0xff
 8002002:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8002004:	2301      	movs	r3, #1
 8002006:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc); 
 8002008:	2300      	movs	r3, #0
 800200a:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 800200c:	e7c7      	b.n	8001f9e <HAL_RTC_SetTime+0x70>

0800200e <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800200e:	0903      	lsrs	r3, r0, #4
 8002010:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0FU));
 8002014:	f000 000f 	and.w	r0, r0, #15
 8002018:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800201c:	b2c0      	uxtb	r0, r0
 800201e:	4770      	bx	lr

08002020 <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002020:	6803      	ldr	r3, [r0, #0]
 8002022:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002024:	6048      	str	r0, [r1, #4]
{
 8002026:	b570      	push	{r4, r5, r6, lr}
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002028:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 800202a:	681d      	ldr	r5, [r3, #0]
 800202c:	f005 337f 	and.w	r3, r5, #2139062143	; 0x7f7f7f7f
 8002030:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002034:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002038:	0c1e      	lsrs	r6, r3, #16
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800203a:	6088      	str	r0, [r1, #8]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800203c:	f3c3 2406 	ubfx	r4, r3, #8, #7
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002040:	f006 003f 	and.w	r0, r6, #63	; 0x3f
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002044:	f005 057f 	and.w	r5, r5, #127	; 0x7f
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8002048:	f006 0640 	and.w	r6, r6, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800204c:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800204e:	704c      	strb	r4, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002050:	708d      	strb	r5, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8002052:	70ce      	strb	r6, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8002054:	b952      	cbnz	r2, 800206c <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002056:	f7ff ffda 	bl	800200e <RTC_Bcd2ToByte>
 800205a:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800205c:	4620      	mov	r0, r4
 800205e:	f7ff ffd6 	bl	800200e <RTC_Bcd2ToByte>
 8002062:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8002064:	4628      	mov	r0, r5
 8002066:	f7ff ffd2 	bl	800200e <RTC_Bcd2ToByte>
 800206a:	7088      	strb	r0, [r1, #2]
}
 800206c:	2000      	movs	r0, #0
 800206e:	bd70      	pop	{r4, r5, r6, pc}

08002070 <HAL_RTC_GetDate>:
{
 8002070:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8002072:	6803      	ldr	r3, [r0, #0]
 8002074:	685c      	ldr	r4, [r3, #4]
 8002076:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
 800207a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800207e:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002080:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002084:	f004 043f 	and.w	r4, r4, #63	; 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8002088:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800208c:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800208e:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002090:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8002092:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8002094:	b952      	cbnz	r2, 80020ac <HAL_RTC_GetDate+0x3c>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002096:	f7ff ffba 	bl	800200e <RTC_Bcd2ToByte>
 800209a:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800209c:	4628      	mov	r0, r5
 800209e:	f7ff ffb6 	bl	800200e <RTC_Bcd2ToByte>
 80020a2:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 80020a4:	4620      	mov	r0, r4
 80020a6:	f7ff ffb2 	bl	800200e <RTC_Bcd2ToByte>
 80020aa:	7088      	strb	r0, [r1, #2]
}
 80020ac:	2000      	movs	r0, #0
 80020ae:	bd38      	pop	{r3, r4, r5, pc}

080020b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020b0:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020b2:	4604      	mov	r4, r0
 80020b4:	2800      	cmp	r0, #0
 80020b6:	d04e      	beq.n	8002156 <HAL_SPI_Init+0xa6>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020b8:	2300      	movs	r3, #0
 80020ba:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020bc:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80020c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020c4:	b91b      	cbnz	r3, 80020ce <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020c6:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020ca:	f001 ffd3 	bl	8004074 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020ce:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020d0:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80020d2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80020d6:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020d8:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80020da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020de:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80020e2:	600b      	str	r3, [r1, #0]
 80020e4:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020e8:	d932      	bls.n	8002150 <HAL_SPI_Init+0xa0>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80020ea:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80020ec:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020f0:	bf18      	it	ne
 80020f2:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80020f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80020f6:	b92b      	cbnz	r3, 8002104 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020f8:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80020fc:	bf8c      	ite	hi
 80020fe:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002100:	2301      	movls	r3, #1
 8002102:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002104:	68a6      	ldr	r6, [r4, #8]
 8002106:	6863      	ldr	r3, [r4, #4]
 8002108:	69a5      	ldr	r5, [r4, #24]
 800210a:	4333      	orrs	r3, r6
 800210c:	6926      	ldr	r6, [r4, #16]
 800210e:	4333      	orrs	r3, r6
 8002110:	6966      	ldr	r6, [r4, #20]
 8002112:	4333      	orrs	r3, r6
 8002114:	69e6      	ldr	r6, [r4, #28]
 8002116:	4333      	orrs	r3, r6
 8002118:	6a26      	ldr	r6, [r4, #32]
 800211a:	4333      	orrs	r3, r6
 800211c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800211e:	4333      	orrs	r3, r6
 8002120:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8002124:	4333      	orrs	r3, r6
 8002126:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002128:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800212a:	431a      	orrs	r2, r3
 800212c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800212e:	0c2d      	lsrs	r5, r5, #16
 8002130:	431a      	orrs	r2, r3
 8002132:	f005 0504 	and.w	r5, r5, #4
 8002136:	432a      	orrs	r2, r5
 8002138:	4302      	orrs	r2, r0
 800213a:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800213c:	69cb      	ldr	r3, [r1, #28]
 800213e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002142:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002144:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002146:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002148:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800214a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 800214e:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002150:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002154:	e7cc      	b.n	80020f0 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8002156:	2001      	movs	r0, #1
}
 8002158:	bd70      	pop	{r4, r5, r6, pc}
	...

0800215c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800215c:	4a32      	ldr	r2, [pc, #200]	; (8002228 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 800215e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002160:	4290      	cmp	r0, r2
 8002162:	d012      	beq.n	800218a <TIM_Base_SetConfig+0x2e>
 8002164:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002168:	d00f      	beq.n	800218a <TIM_Base_SetConfig+0x2e>
 800216a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800216e:	4290      	cmp	r0, r2
 8002170:	d00b      	beq.n	800218a <TIM_Base_SetConfig+0x2e>
 8002172:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002176:	4290      	cmp	r0, r2
 8002178:	d007      	beq.n	800218a <TIM_Base_SetConfig+0x2e>
 800217a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800217e:	4290      	cmp	r0, r2
 8002180:	d003      	beq.n	800218a <TIM_Base_SetConfig+0x2e>
 8002182:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8002186:	4290      	cmp	r0, r2
 8002188:	d115      	bne.n	80021b6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800218a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800218c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002190:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002192:	4a25      	ldr	r2, [pc, #148]	; (8002228 <TIM_Base_SetConfig+0xcc>)
 8002194:	4290      	cmp	r0, r2
 8002196:	d01d      	beq.n	80021d4 <TIM_Base_SetConfig+0x78>
 8002198:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800219c:	d01a      	beq.n	80021d4 <TIM_Base_SetConfig+0x78>
 800219e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80021a2:	4290      	cmp	r0, r2
 80021a4:	d016      	beq.n	80021d4 <TIM_Base_SetConfig+0x78>
 80021a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021aa:	4290      	cmp	r0, r2
 80021ac:	d012      	beq.n	80021d4 <TIM_Base_SetConfig+0x78>
 80021ae:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80021b2:	4290      	cmp	r0, r2
 80021b4:	d00e      	beq.n	80021d4 <TIM_Base_SetConfig+0x78>
 80021b6:	4a1d      	ldr	r2, [pc, #116]	; (800222c <TIM_Base_SetConfig+0xd0>)
 80021b8:	4290      	cmp	r0, r2
 80021ba:	d00b      	beq.n	80021d4 <TIM_Base_SetConfig+0x78>
 80021bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021c0:	4290      	cmp	r0, r2
 80021c2:	d007      	beq.n	80021d4 <TIM_Base_SetConfig+0x78>
 80021c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021c8:	4290      	cmp	r0, r2
 80021ca:	d003      	beq.n	80021d4 <TIM_Base_SetConfig+0x78>
 80021cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021d0:	4290      	cmp	r0, r2
 80021d2:	d103      	bne.n	80021dc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021d4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80021d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021da:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021dc:	694a      	ldr	r2, [r1, #20]
 80021de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021e2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80021e4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021e6:	688b      	ldr	r3, [r1, #8]
 80021e8:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80021ea:	680b      	ldr	r3, [r1, #0]
 80021ec:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80021ee:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <TIM_Base_SetConfig+0xcc>)
 80021f0:	4298      	cmp	r0, r3
 80021f2:	d013      	beq.n	800221c <TIM_Base_SetConfig+0xc0>
 80021f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021f8:	4298      	cmp	r0, r3
 80021fa:	d00f      	beq.n	800221c <TIM_Base_SetConfig+0xc0>
 80021fc:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002200:	4298      	cmp	r0, r3
 8002202:	d00b      	beq.n	800221c <TIM_Base_SetConfig+0xc0>
 8002204:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002208:	4298      	cmp	r0, r3
 800220a:	d007      	beq.n	800221c <TIM_Base_SetConfig+0xc0>
 800220c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002210:	4298      	cmp	r0, r3
 8002212:	d003      	beq.n	800221c <TIM_Base_SetConfig+0xc0>
 8002214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002218:	4298      	cmp	r0, r3
 800221a:	d101      	bne.n	8002220 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800221c:	690b      	ldr	r3, [r1, #16]
 800221e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002220:	2301      	movs	r3, #1
 8002222:	6143      	str	r3, [r0, #20]
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40012c00 	.word	0x40012c00
 800222c:	40014000 	.word	0x40014000

08002230 <HAL_TIM_PWM_Init>:
{
 8002230:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002232:	4604      	mov	r4, r0
 8002234:	b1a0      	cbz	r0, 8002260 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002236:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800223a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800223e:	b91b      	cbnz	r3, 8002248 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002240:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002244:	f001 ff3c 	bl	80040c0 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002248:	2302      	movs	r3, #2
 800224a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800224e:	6820      	ldr	r0, [r4, #0]
 8002250:	1d21      	adds	r1, r4, #4
 8002252:	f7ff ff83 	bl	800215c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002256:	2301      	movs	r3, #1
 8002258:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800225c:	2000      	movs	r0, #0
 800225e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002260:	2001      	movs	r0, #1
}
 8002262:	bd10      	pop	{r4, pc}

08002264 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002264:	6a03      	ldr	r3, [r0, #32]
 8002266:	f023 0301 	bic.w	r3, r3, #1
 800226a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800226c:	6a03      	ldr	r3, [r0, #32]
{
 800226e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002270:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002272:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002274:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002276:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800227a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800227e:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002280:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002282:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002286:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002288:	4d1f      	ldr	r5, [pc, #124]	; (8002308 <TIM_OC1_SetConfig+0xa4>)
 800228a:	42a8      	cmp	r0, r5
 800228c:	d013      	beq.n	80022b6 <TIM_OC1_SetConfig+0x52>
 800228e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002292:	42a8      	cmp	r0, r5
 8002294:	d00f      	beq.n	80022b6 <TIM_OC1_SetConfig+0x52>
 8002296:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800229a:	42a8      	cmp	r0, r5
 800229c:	d00b      	beq.n	80022b6 <TIM_OC1_SetConfig+0x52>
 800229e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80022a2:	42a8      	cmp	r0, r5
 80022a4:	d007      	beq.n	80022b6 <TIM_OC1_SetConfig+0x52>
 80022a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80022aa:	42a8      	cmp	r0, r5
 80022ac:	d003      	beq.n	80022b6 <TIM_OC1_SetConfig+0x52>
 80022ae:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80022b2:	42a8      	cmp	r0, r5
 80022b4:	d122      	bne.n	80022fc <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80022b6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80022b8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80022bc:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80022be:	4d12      	ldr	r5, [pc, #72]	; (8002308 <TIM_OC1_SetConfig+0xa4>)
 80022c0:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80022c2:	f023 0304 	bic.w	r3, r3, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80022c6:	d013      	beq.n	80022f0 <TIM_OC1_SetConfig+0x8c>
 80022c8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80022cc:	42a8      	cmp	r0, r5
 80022ce:	d00f      	beq.n	80022f0 <TIM_OC1_SetConfig+0x8c>
 80022d0:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80022d4:	42a8      	cmp	r0, r5
 80022d6:	d00b      	beq.n	80022f0 <TIM_OC1_SetConfig+0x8c>
 80022d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80022dc:	42a8      	cmp	r0, r5
 80022de:	d007      	beq.n	80022f0 <TIM_OC1_SetConfig+0x8c>
 80022e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80022e4:	42a8      	cmp	r0, r5
 80022e6:	d003      	beq.n	80022f0 <TIM_OC1_SetConfig+0x8c>
 80022e8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80022ec:	42a8      	cmp	r0, r5
 80022ee:	d105      	bne.n	80022fc <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80022f0:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80022f4:	698e      	ldr	r6, [r1, #24]
 80022f6:	694c      	ldr	r4, [r1, #20]
 80022f8:	4334      	orrs	r4, r6
 80022fa:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022fc:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022fe:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002300:	684a      	ldr	r2, [r1, #4]
 8002302:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002304:	6203      	str	r3, [r0, #32]
 8002306:	bd70      	pop	{r4, r5, r6, pc}
 8002308:	40012c00 	.word	0x40012c00

0800230c <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800230c:	6a03      	ldr	r3, [r0, #32]
 800230e:	f023 0310 	bic.w	r3, r3, #16
 8002312:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002314:	6a03      	ldr	r3, [r0, #32]
{
 8002316:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002318:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800231a:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800231c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800231e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002322:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002326:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800232a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800232c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002330:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002334:	4d1a      	ldr	r5, [pc, #104]	; (80023a0 <TIM_OC2_SetConfig+0x94>)
 8002336:	42a8      	cmp	r0, r5
 8002338:	d007      	beq.n	800234a <TIM_OC2_SetConfig+0x3e>
 800233a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800233e:	42a8      	cmp	r0, r5
 8002340:	d003      	beq.n	800234a <TIM_OC2_SetConfig+0x3e>
 8002342:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8002346:	42a8      	cmp	r0, r5
 8002348:	d10d      	bne.n	8002366 <TIM_OC2_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800234a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800234c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002350:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002354:	4d12      	ldr	r5, [pc, #72]	; (80023a0 <TIM_OC2_SetConfig+0x94>)
 8002356:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8002358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800235c:	d012      	beq.n	8002384 <TIM_OC2_SetConfig+0x78>
 800235e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002362:	42a8      	cmp	r0, r5
 8002364:	d00e      	beq.n	8002384 <TIM_OC2_SetConfig+0x78>
 8002366:	4d0f      	ldr	r5, [pc, #60]	; (80023a4 <TIM_OC2_SetConfig+0x98>)
 8002368:	42a8      	cmp	r0, r5
 800236a:	d00b      	beq.n	8002384 <TIM_OC2_SetConfig+0x78>
 800236c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002370:	42a8      	cmp	r0, r5
 8002372:	d007      	beq.n	8002384 <TIM_OC2_SetConfig+0x78>
 8002374:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002378:	42a8      	cmp	r0, r5
 800237a:	d003      	beq.n	8002384 <TIM_OC2_SetConfig+0x78>
 800237c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002380:	42a8      	cmp	r0, r5
 8002382:	d106      	bne.n	8002392 <TIM_OC2_SetConfig+0x86>
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002384:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002388:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800238a:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800238c:	4334      	orrs	r4, r6
 800238e:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002392:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002394:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002396:	684a      	ldr	r2, [r1, #4]
 8002398:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800239a:	6203      	str	r3, [r0, #32]
 800239c:	bd70      	pop	{r4, r5, r6, pc}
 800239e:	bf00      	nop
 80023a0:	40012c00 	.word	0x40012c00
 80023a4:	40014000 	.word	0x40014000

080023a8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023a8:	6a03      	ldr	r3, [r0, #32]
 80023aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023ae:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023b0:	6a03      	ldr	r3, [r0, #32]
{
 80023b2:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80023b4:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023b6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023b8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80023ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023be:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80023c2:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023c4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80023c6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023ca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023ce:	4d1a      	ldr	r5, [pc, #104]	; (8002438 <TIM_OC3_SetConfig+0x90>)
 80023d0:	42a8      	cmp	r0, r5
 80023d2:	d007      	beq.n	80023e4 <TIM_OC3_SetConfig+0x3c>
 80023d4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80023d8:	42a8      	cmp	r0, r5
 80023da:	d003      	beq.n	80023e4 <TIM_OC3_SetConfig+0x3c>
 80023dc:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80023e0:	42a8      	cmp	r0, r5
 80023e2:	d10d      	bne.n	8002400 <TIM_OC3_SetConfig+0x58>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023e4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80023e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023ea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80023ee:	4d12      	ldr	r5, [pc, #72]	; (8002438 <TIM_OC3_SetConfig+0x90>)
 80023f0:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 80023f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80023f6:	d012      	beq.n	800241e <TIM_OC3_SetConfig+0x76>
 80023f8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80023fc:	42a8      	cmp	r0, r5
 80023fe:	d00e      	beq.n	800241e <TIM_OC3_SetConfig+0x76>
 8002400:	4d0e      	ldr	r5, [pc, #56]	; (800243c <TIM_OC3_SetConfig+0x94>)
 8002402:	42a8      	cmp	r0, r5
 8002404:	d00b      	beq.n	800241e <TIM_OC3_SetConfig+0x76>
 8002406:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800240a:	42a8      	cmp	r0, r5
 800240c:	d007      	beq.n	800241e <TIM_OC3_SetConfig+0x76>
 800240e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002412:	42a8      	cmp	r0, r5
 8002414:	d003      	beq.n	800241e <TIM_OC3_SetConfig+0x76>
 8002416:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800241a:	42a8      	cmp	r0, r5
 800241c:	d106      	bne.n	800242c <TIM_OC3_SetConfig+0x84>

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800241e:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002422:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002424:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002426:	4334      	orrs	r4, r6
 8002428:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800242c:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800242e:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002430:	684a      	ldr	r2, [r1, #4]
 8002432:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002434:	6203      	str	r3, [r0, #32]
 8002436:	bd70      	pop	{r4, r5, r6, pc}
 8002438:	40012c00 	.word	0x40012c00
 800243c:	40014000 	.word	0x40014000

08002440 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002440:	6a03      	ldr	r3, [r0, #32]
 8002442:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002446:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002448:	6a03      	ldr	r3, [r0, #32]
{
 800244a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800244c:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800244e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002450:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002452:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002456:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800245a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800245e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002460:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002464:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002468:	4d10      	ldr	r5, [pc, #64]	; (80024ac <TIM_OC4_SetConfig+0x6c>)
 800246a:	42a8      	cmp	r0, r5
 800246c:	d013      	beq.n	8002496 <TIM_OC4_SetConfig+0x56>
 800246e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002472:	42a8      	cmp	r0, r5
 8002474:	d00f      	beq.n	8002496 <TIM_OC4_SetConfig+0x56>
 8002476:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800247a:	42a8      	cmp	r0, r5
 800247c:	d00b      	beq.n	8002496 <TIM_OC4_SetConfig+0x56>
 800247e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002482:	42a8      	cmp	r0, r5
 8002484:	d007      	beq.n	8002496 <TIM_OC4_SetConfig+0x56>
 8002486:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800248a:	42a8      	cmp	r0, r5
 800248c:	d003      	beq.n	8002496 <TIM_OC4_SetConfig+0x56>
 800248e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002492:	42a8      	cmp	r0, r5
 8002494:	d104      	bne.n	80024a0 <TIM_OC4_SetConfig+0x60>
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002496:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002498:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800249c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024a0:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024a2:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024a4:	684a      	ldr	r2, [r1, #4]
 80024a6:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80024a8:	6203      	str	r3, [r0, #32]
 80024aa:	bd30      	pop	{r4, r5, pc}
 80024ac:	40012c00 	.word	0x40012c00

080024b0 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80024b0:	6a03      	ldr	r3, [r0, #32]
 80024b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024b8:	6a03      	ldr	r3, [r0, #32]
{
 80024ba:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80024bc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80024be:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024c0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80024c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80024ca:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80024cc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 80024ce:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80024d2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80024d6:	4d11      	ldr	r5, [pc, #68]	; (800251c <TIM_OC5_SetConfig+0x6c>)
 80024d8:	42a8      	cmp	r0, r5
 80024da:	d013      	beq.n	8002504 <TIM_OC5_SetConfig+0x54>
 80024dc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80024e0:	42a8      	cmp	r0, r5
 80024e2:	d00f      	beq.n	8002504 <TIM_OC5_SetConfig+0x54>
 80024e4:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80024e8:	42a8      	cmp	r0, r5
 80024ea:	d00b      	beq.n	8002504 <TIM_OC5_SetConfig+0x54>
 80024ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80024f0:	42a8      	cmp	r0, r5
 80024f2:	d007      	beq.n	8002504 <TIM_OC5_SetConfig+0x54>
 80024f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80024f8:	42a8      	cmp	r0, r5
 80024fa:	d003      	beq.n	8002504 <TIM_OC5_SetConfig+0x54>
 80024fc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002500:	42a8      	cmp	r0, r5
 8002502:	d104      	bne.n	800250e <TIM_OC5_SetConfig+0x5e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002504:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002506:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800250a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800250e:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002510:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002512:	684a      	ldr	r2, [r1, #4]
 8002514:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002516:	6203      	str	r3, [r0, #32]
 8002518:	bd30      	pop	{r4, r5, pc}
 800251a:	bf00      	nop
 800251c:	40012c00 	.word	0x40012c00

08002520 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002520:	6a03      	ldr	r3, [r0, #32]
 8002522:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002526:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002528:	6a03      	ldr	r3, [r0, #32]
{
 800252a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800252c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800252e:	6d42      	ldr	r2, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002530:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002532:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002536:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800253a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800253e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002540:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002544:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002548:	4d10      	ldr	r5, [pc, #64]	; (800258c <TIM_OC6_SetConfig+0x6c>)
 800254a:	42a8      	cmp	r0, r5
 800254c:	d013      	beq.n	8002576 <TIM_OC6_SetConfig+0x56>
 800254e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002552:	42a8      	cmp	r0, r5
 8002554:	d00f      	beq.n	8002576 <TIM_OC6_SetConfig+0x56>
 8002556:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800255a:	42a8      	cmp	r0, r5
 800255c:	d00b      	beq.n	8002576 <TIM_OC6_SetConfig+0x56>
 800255e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002562:	42a8      	cmp	r0, r5
 8002564:	d007      	beq.n	8002576 <TIM_OC6_SetConfig+0x56>
 8002566:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800256a:	42a8      	cmp	r0, r5
 800256c:	d003      	beq.n	8002576 <TIM_OC6_SetConfig+0x56>
 800256e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002572:	42a8      	cmp	r0, r5
 8002574:	d104      	bne.n	8002580 <TIM_OC6_SetConfig+0x60>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002576:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002578:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800257c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002580:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002582:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002584:	684a      	ldr	r2, [r1, #4]
 8002586:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002588:	6203      	str	r3, [r0, #32]
 800258a:	bd30      	pop	{r4, r5, pc}
 800258c:	40012c00 	.word	0x40012c00

08002590 <HAL_TIM_PWM_ConfigChannel>:
{
 8002590:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002592:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002596:	2b01      	cmp	r3, #1
{
 8002598:	4604      	mov	r4, r0
 800259a:	460d      	mov	r5, r1
 800259c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80025a0:	d010      	beq.n	80025c4 <HAL_TIM_PWM_ConfigChannel+0x34>
 80025a2:	2301      	movs	r3, #1
  switch (Channel)
 80025a4:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 80025a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80025aa:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 80025ae:	d043      	beq.n	8002638 <HAL_TIM_PWM_ConfigChannel+0xa8>
 80025b0:	d809      	bhi.n	80025c6 <HAL_TIM_PWM_ConfigChannel+0x36>
 80025b2:	b1fa      	cbz	r2, 80025f4 <HAL_TIM_PWM_ConfigChannel+0x64>
 80025b4:	2a04      	cmp	r2, #4
 80025b6:	d02e      	beq.n	8002616 <HAL_TIM_PWM_ConfigChannel+0x86>
  htim->State = HAL_TIM_STATE_READY;
 80025b8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80025ba:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80025bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80025c0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80025c4:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 80025c6:	2a10      	cmp	r2, #16
 80025c8:	d047      	beq.n	800265a <HAL_TIM_PWM_ConfigChannel+0xca>
 80025ca:	2a14      	cmp	r2, #20
 80025cc:	d056      	beq.n	800267c <HAL_TIM_PWM_ConfigChannel+0xec>
 80025ce:	2a0c      	cmp	r2, #12
 80025d0:	d1f2      	bne.n	80025b8 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025d2:	6820      	ldr	r0, [r4, #0]
 80025d4:	f7ff ff34 	bl	8002440 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025d8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80025da:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025dc:	69da      	ldr	r2, [r3, #28]
 80025de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025e4:	69da      	ldr	r2, [r3, #28]
 80025e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80025ec:	69da      	ldr	r2, [r3, #28]
 80025ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025f2:	e030      	b.n	8002656 <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025f4:	6820      	ldr	r0, [r4, #0]
 80025f6:	f7ff fe35 	bl	8002264 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025fa:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025fc:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025fe:	699a      	ldr	r2, [r3, #24]
 8002600:	f042 0208 	orr.w	r2, r2, #8
 8002604:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002606:	699a      	ldr	r2, [r3, #24]
 8002608:	f022 0204 	bic.w	r2, r2, #4
 800260c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800260e:	699a      	ldr	r2, [r3, #24]
 8002610:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002612:	619a      	str	r2, [r3, #24]
    break;
 8002614:	e7d0      	b.n	80025b8 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002616:	6820      	ldr	r0, [r4, #0]
 8002618:	f7ff fe78 	bl	800230c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800261c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800261e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002620:	699a      	ldr	r2, [r3, #24]
 8002622:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002628:	699a      	ldr	r2, [r3, #24]
 800262a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800262e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002630:	699a      	ldr	r2, [r3, #24]
 8002632:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002636:	e7ec      	b.n	8002612 <HAL_TIM_PWM_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002638:	6820      	ldr	r0, [r4, #0]
 800263a:	f7ff feb5 	bl	80023a8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800263e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002640:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002642:	69da      	ldr	r2, [r3, #28]
 8002644:	f042 0208 	orr.w	r2, r2, #8
 8002648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800264a:	69da      	ldr	r2, [r3, #28]
 800264c:	f022 0204 	bic.w	r2, r2, #4
 8002650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002652:	69da      	ldr	r2, [r3, #28]
 8002654:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002656:	61da      	str	r2, [r3, #28]
    break;
 8002658:	e7ae      	b.n	80025b8 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800265a:	6820      	ldr	r0, [r4, #0]
 800265c:	f7ff ff28 	bl	80024b0 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002660:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8002662:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002664:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002666:	f042 0208 	orr.w	r2, r2, #8
 800266a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800266c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800266e:	f022 0204 	bic.w	r2, r2, #4
 8002672:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8002674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002676:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8002678:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 800267a:	e79d      	b.n	80025b8 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800267c:	6820      	ldr	r0, [r4, #0]
 800267e:	f7ff ff4f 	bl	8002520 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002682:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8002684:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002686:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800268c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800268e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002690:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002694:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8002696:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002698:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800269c:	e7ec      	b.n	8002678 <HAL_TIM_PWM_ConfigChannel+0xe8>
	...

080026a0 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 80026a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80026a4:	2b01      	cmp	r3, #1
{
 80026a6:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80026a8:	d020      	beq.n	80026ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  tmpcr2 = htim->Instance->CR2;
 80026aa:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80026ac:	4d10      	ldr	r5, [pc, #64]	; (80026f0 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
  tmpcr2 = htim->Instance->CR2;
 80026ae:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80026b0:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80026b2:	42aa      	cmp	r2, r5
 80026b4:	d007      	beq.n	80026c6 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 80026b6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80026ba:	42aa      	cmp	r2, r5
 80026bc:	d003      	beq.n	80026c6 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 80026be:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80026c2:	42aa      	cmp	r2, r5
 80026c4:	d103      	bne.n	80026ce <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80026c6:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80026c8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80026cc:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026ce:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026d0:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80026d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026d6:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 80026d8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  htim->Instance->CR2 = tmpcr2;
 80026dc:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026de:	4321      	orrs	r1, r4
  __HAL_UNLOCK(htim);
 80026e0:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 80026e2:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80026e4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80026e8:	4618      	mov	r0, r3
 80026ea:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80026ec:	2002      	movs	r0, #2
} 
 80026ee:	bd30      	pop	{r4, r5, pc}
 80026f0:	40012c00 	.word	0x40012c00

080026f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026f4:	b538      	push	{r3, r4, r5, lr}
 80026f6:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80026f8:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026fa:	6921      	ldr	r1, [r4, #16]
 80026fc:	68a2      	ldr	r2, [r4, #8]
 80026fe:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002700:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002702:	430a      	orrs	r2, r1
 8002704:	6961      	ldr	r1, [r4, #20]
 8002706:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002708:	4977      	ldr	r1, [pc, #476]	; (80028e8 <UART_SetConfig+0x1f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800270a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800270c:	4001      	ands	r1, r0
 800270e:	430a      	orrs	r2, r1
 8002710:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002712:	686a      	ldr	r2, [r5, #4]
 8002714:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002716:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002718:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800271c:	430a      	orrs	r2, r1
 800271e:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002720:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002722:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002724:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002728:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800272a:	430a      	orrs	r2, r1
 800272c:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800272e:	4a6f      	ldr	r2, [pc, #444]	; (80028ec <UART_SetConfig+0x1f8>)
 8002730:	4295      	cmp	r5, r2
 8002732:	d112      	bne.n	800275a <UART_SetConfig+0x66>
 8002734:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8002738:	496d      	ldr	r1, [pc, #436]	; (80028f0 <UART_SetConfig+0x1fc>)
 800273a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800273c:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002744:	5c8a      	ldrb	r2, [r1, r2]
 8002746:	d066      	beq.n	8002816 <UART_SetConfig+0x122>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8002748:	2a08      	cmp	r2, #8
 800274a:	d819      	bhi.n	8002780 <UART_SetConfig+0x8c>
 800274c:	e8df f002 	tbb	[pc, r2]
 8002750:	189e92c2 	.word	0x189e92c2
 8002754:	181818a9 	.word	0x181818a9
 8002758:	ac          	.byte	0xac
 8002759:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800275a:	4a66      	ldr	r2, [pc, #408]	; (80028f4 <UART_SetConfig+0x200>)
 800275c:	4295      	cmp	r5, r2
 800275e:	d124      	bne.n	80027aa <UART_SetConfig+0xb6>
 8002760:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8002764:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002766:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800276a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800276e:	f000 80a0 	beq.w	80028b2 <UART_SetConfig+0x1be>
 8002772:	d807      	bhi.n	8002784 <UART_SetConfig+0x90>
 8002774:	2a00      	cmp	r2, #0
 8002776:	f000 80aa 	beq.w	80028ce <UART_SetConfig+0x1da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800277a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800277e:	d076      	beq.n	800286e <UART_SetConfig+0x17a>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002780:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8002782:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002784:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8002788:	f000 8099 	beq.w	80028be <UART_SetConfig+0x1ca>
 800278c:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8002790:	d1f3      	bne.n	800277a <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002796:	d179      	bne.n	800288c <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002798:	6860      	ldr	r0, [r4, #4]
 800279a:	0843      	lsrs	r3, r0, #1
 800279c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80027a0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80027a4:	fbb3 f3f0 	udiv	r3, r3, r0
 80027a8:	e054      	b.n	8002854 <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027aa:	4a53      	ldr	r2, [pc, #332]	; (80028f8 <UART_SetConfig+0x204>)
 80027ac:	4295      	cmp	r5, r2
 80027ae:	d10e      	bne.n	80027ce <UART_SetConfig+0xda>
 80027b0:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 80027b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027b6:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80027ba:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80027be:	d078      	beq.n	80028b2 <UART_SetConfig+0x1be>
 80027c0:	d9d8      	bls.n	8002774 <UART_SetConfig+0x80>
 80027c2:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 80027c6:	d07a      	beq.n	80028be <UART_SetConfig+0x1ca>
 80027c8:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 80027cc:	e7e0      	b.n	8002790 <UART_SetConfig+0x9c>
 80027ce:	4a4b      	ldr	r2, [pc, #300]	; (80028fc <UART_SetConfig+0x208>)
 80027d0:	4295      	cmp	r5, r2
 80027d2:	d10e      	bne.n	80027f2 <UART_SetConfig+0xfe>
 80027d4:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 80027d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027da:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80027de:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80027e2:	d066      	beq.n	80028b2 <UART_SetConfig+0x1be>
 80027e4:	d9c6      	bls.n	8002774 <UART_SetConfig+0x80>
 80027e6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80027ea:	d068      	beq.n	80028be <UART_SetConfig+0x1ca>
 80027ec:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80027f0:	e7ce      	b.n	8002790 <UART_SetConfig+0x9c>
 80027f2:	4a43      	ldr	r2, [pc, #268]	; (8002900 <UART_SetConfig+0x20c>)
 80027f4:	4295      	cmp	r5, r2
 80027f6:	d1c0      	bne.n	800277a <UART_SetConfig+0x86>
 80027f8:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 80027fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027fe:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8002802:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8002806:	d054      	beq.n	80028b2 <UART_SetConfig+0x1be>
 8002808:	d9b4      	bls.n	8002774 <UART_SetConfig+0x80>
 800280a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800280e:	d056      	beq.n	80028be <UART_SetConfig+0x1ca>
 8002810:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8002814:	e7bc      	b.n	8002790 <UART_SetConfig+0x9c>
    switch (clocksource)
 8002816:	2a08      	cmp	r2, #8
 8002818:	d829      	bhi.n	800286e <UART_SetConfig+0x17a>
 800281a:	a301      	add	r3, pc, #4	; (adr r3, 8002820 <UART_SetConfig+0x12c>)
 800281c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8002820:	08002845 	.word	0x08002845
 8002824:	08002869 	.word	0x08002869
 8002828:	08002799 	.word	0x08002799
 800282c:	0800286f 	.word	0x0800286f
 8002830:	080028b9 	.word	0x080028b9
 8002834:	0800286f 	.word	0x0800286f
 8002838:	0800286f 	.word	0x0800286f
 800283c:	0800286f 	.word	0x0800286f
 8002840:	080028c5 	.word	0x080028c5
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002844:	f7ff f912 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002848:	6861      	ldr	r1, [r4, #4]
 800284a:	084a      	lsrs	r2, r1, #1
 800284c:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002850:	fbb3 f3f1 	udiv	r3, r3, r1
 8002854:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002856:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8002858:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 800285c:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800285e:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8002862:	4313      	orrs	r3, r2
 8002864:	60cb      	str	r3, [r1, #12]
 8002866:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002868:	f7ff f918 	bl	8001a9c <HAL_RCC_GetPCLK2Freq>
 800286c:	e7ec      	b.n	8002848 <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 800286e:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002870:	2300      	movs	r3, #0
 8002872:	e7f1      	b.n	8002858 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002874:	f7ff f912 	bl	8001a9c <HAL_RCC_GetPCLK2Freq>
 8002878:	6863      	ldr	r3, [r4, #4]
 800287a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800287e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002882:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <UART_SetConfig+0x1f8>)
 8002884:	b280      	uxth	r0, r0
 8002886:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002888:	2000      	movs	r0, #0
        break;
 800288a:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800288c:	6862      	ldr	r2, [r4, #4]
 800288e:	0853      	lsrs	r3, r2, #1
 8002890:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002894:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002898:	fbb3 f3f2 	udiv	r3, r3, r2
 800289c:	b29b      	uxth	r3, r3
 800289e:	60eb      	str	r3, [r5, #12]
 80028a0:	e7f2      	b.n	8002888 <UART_SetConfig+0x194>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80028a2:	f7ff f807 	bl	80018b4 <HAL_RCC_GetSysClockFreq>
 80028a6:	e017      	b.n	80028d8 <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80028a8:	6862      	ldr	r2, [r4, #4]
 80028aa:	0853      	lsrs	r3, r2, #1
 80028ac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80028b0:	e7f2      	b.n	8002898 <UART_SetConfig+0x1a4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028b6:	d1f4      	bne.n	80028a2 <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80028b8:	f7fe fffc 	bl	80018b4 <HAL_RCC_GetSysClockFreq>
 80028bc:	e7c4      	b.n	8002848 <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028c2:	d1f1      	bne.n	80028a8 <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80028c4:	6860      	ldr	r0, [r4, #4]
 80028c6:	0843      	lsrs	r3, r0, #1
 80028c8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80028cc:	e76a      	b.n	80027a4 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028d2:	d0b7      	beq.n	8002844 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80028d4:	f7ff f8ca 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80028d8:	6863      	ldr	r3, [r4, #4]
 80028da:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80028de:	fbb0 f0f3 	udiv	r0, r0, r3
 80028e2:	b280      	uxth	r0, r0
 80028e4:	60e8      	str	r0, [r5, #12]
 80028e6:	e7cf      	b.n	8002888 <UART_SetConfig+0x194>
 80028e8:	efff69f3 	.word	0xefff69f3
 80028ec:	40013800 	.word	0x40013800
 80028f0:	0800542c 	.word	0x0800542c
 80028f4:	40004400 	.word	0x40004400
 80028f8:	40004800 	.word	0x40004800
 80028fc:	40004c00 	.word	0x40004c00
 8002900:	40005000 	.word	0x40005000

08002904 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002904:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002906:	07da      	lsls	r2, r3, #31
{
 8002908:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800290a:	d506      	bpl.n	800291a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800290c:	6801      	ldr	r1, [r0, #0]
 800290e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002910:	684a      	ldr	r2, [r1, #4]
 8002912:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002916:	4322      	orrs	r2, r4
 8002918:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800291a:	079c      	lsls	r4, r3, #30
 800291c:	d506      	bpl.n	800292c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800291e:	6801      	ldr	r1, [r0, #0]
 8002920:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002922:	684a      	ldr	r2, [r1, #4]
 8002924:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002928:	4322      	orrs	r2, r4
 800292a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800292c:	0759      	lsls	r1, r3, #29
 800292e:	d506      	bpl.n	800293e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002930:	6801      	ldr	r1, [r0, #0]
 8002932:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002934:	684a      	ldr	r2, [r1, #4]
 8002936:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800293a:	4322      	orrs	r2, r4
 800293c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800293e:	071a      	lsls	r2, r3, #28
 8002940:	d506      	bpl.n	8002950 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002942:	6801      	ldr	r1, [r0, #0]
 8002944:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002946:	684a      	ldr	r2, [r1, #4]
 8002948:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800294c:	4322      	orrs	r2, r4
 800294e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002950:	06dc      	lsls	r4, r3, #27
 8002952:	d506      	bpl.n	8002962 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002954:	6801      	ldr	r1, [r0, #0]
 8002956:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002958:	688a      	ldr	r2, [r1, #8]
 800295a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800295e:	4322      	orrs	r2, r4
 8002960:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002962:	0699      	lsls	r1, r3, #26
 8002964:	d506      	bpl.n	8002974 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002966:	6801      	ldr	r1, [r0, #0]
 8002968:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800296a:	688a      	ldr	r2, [r1, #8]
 800296c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002970:	4322      	orrs	r2, r4
 8002972:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002974:	065a      	lsls	r2, r3, #25
 8002976:	d50f      	bpl.n	8002998 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002978:	6801      	ldr	r1, [r0, #0]
 800297a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800297c:	684a      	ldr	r2, [r1, #4]
 800297e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002982:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002984:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002988:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800298a:	d105      	bne.n	8002998 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800298c:	684a      	ldr	r2, [r1, #4]
 800298e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002990:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002994:	4322      	orrs	r2, r4
 8002996:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002998:	061b      	lsls	r3, r3, #24
 800299a:	d506      	bpl.n	80029aa <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800299c:	6802      	ldr	r2, [r0, #0]
 800299e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80029a0:	6853      	ldr	r3, [r2, #4]
 80029a2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80029a6:	430b      	orrs	r3, r1
 80029a8:	6053      	str	r3, [r2, #4]
 80029aa:	bd10      	pop	{r4, pc}

080029ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80029ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029b0:	9d06      	ldr	r5, [sp, #24]
 80029b2:	4604      	mov	r4, r0
 80029b4:	460f      	mov	r7, r1
 80029b6:	4616      	mov	r6, r2
 80029b8:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ba:	6821      	ldr	r1, [r4, #0]
 80029bc:	69ca      	ldr	r2, [r1, #28]
 80029be:	ea37 0302 	bics.w	r3, r7, r2
 80029c2:	bf0c      	ite	eq
 80029c4:	2201      	moveq	r2, #1
 80029c6:	2200      	movne	r2, #0
 80029c8:	42b2      	cmp	r2, r6
 80029ca:	d002      	beq.n	80029d2 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80029cc:	2000      	movs	r0, #0
}
 80029ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80029d2:	1c6b      	adds	r3, r5, #1
 80029d4:	d0f2      	beq.n	80029bc <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80029d6:	b99d      	cbnz	r5, 8002a00 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029d8:	6823      	ldr	r3, [r4, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80029e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	f022 0201 	bic.w	r2, r2, #1
 80029e8:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80029ea:	2320      	movs	r3, #32
 80029ec:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80029f0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80029f4:	2300      	movs	r3, #0
 80029f6:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80029fa:	2003      	movs	r0, #3
 80029fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002a00:	f7fd fc80 	bl	8000304 <HAL_GetTick>
 8002a04:	eba0 0008 	sub.w	r0, r0, r8
 8002a08:	4285      	cmp	r5, r0
 8002a0a:	d2d6      	bcs.n	80029ba <UART_WaitOnFlagUntilTimeout+0xe>
 8002a0c:	e7e4      	b.n	80029d8 <UART_WaitOnFlagUntilTimeout+0x2c>

08002a0e <HAL_UART_Transmit>:
{
 8002a0e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002a12:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8002a14:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002a18:	2b20      	cmp	r3, #32
{
 8002a1a:	4604      	mov	r4, r0
 8002a1c:	460d      	mov	r5, r1
 8002a1e:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8002a20:	d14c      	bne.n	8002abc <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8002a22:	2900      	cmp	r1, #0
 8002a24:	d048      	beq.n	8002ab8 <HAL_UART_Transmit+0xaa>
 8002a26:	2a00      	cmp	r2, #0
 8002a28:	d046      	beq.n	8002ab8 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8002a2a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d044      	beq.n	8002abc <HAL_UART_Transmit+0xae>
 8002a32:	2301      	movs	r3, #1
 8002a34:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a3c:	2321      	movs	r3, #33	; 0x21
 8002a3e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8002a42:	f7fd fc5f 	bl	8000304 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002a46:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8002a4a:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002a4c:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002a50:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002a54:	b292      	uxth	r2, r2
 8002a56:	b962      	cbnz	r2, 8002a72 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a58:	9700      	str	r7, [sp, #0]
 8002a5a:	4633      	mov	r3, r6
 8002a5c:	2140      	movs	r1, #64	; 0x40
 8002a5e:	4620      	mov	r0, r4
 8002a60:	f7ff ffa4 	bl	80029ac <UART_WaitOnFlagUntilTimeout>
 8002a64:	b998      	cbnz	r0, 8002a8e <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8002a66:	2320      	movs	r3, #32
 8002a68:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8002a6c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8002a70:	e00e      	b.n	8002a90 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8002a72:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a76:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a80:	2200      	movs	r2, #0
 8002a82:	4633      	mov	r3, r6
 8002a84:	2180      	movs	r1, #128	; 0x80
 8002a86:	4620      	mov	r0, r4
 8002a88:	f7ff ff90 	bl	80029ac <UART_WaitOnFlagUntilTimeout>
 8002a8c:	b118      	cbz	r0, 8002a96 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8002a8e:	2003      	movs	r0, #3
}
 8002a90:	b002      	add	sp, #8
 8002a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a96:	68a3      	ldr	r3, [r4, #8]
 8002a98:	6822      	ldr	r2, [r4, #0]
 8002a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a9e:	d107      	bne.n	8002ab0 <HAL_UART_Transmit+0xa2>
 8002aa0:	6923      	ldr	r3, [r4, #16]
 8002aa2:	b92b      	cbnz	r3, 8002ab0 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002aa4:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aac:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8002aae:	e7cf      	b.n	8002a50 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002ab0:	782b      	ldrb	r3, [r5, #0]
 8002ab2:	8513      	strh	r3, [r2, #40]	; 0x28
 8002ab4:	3501      	adds	r5, #1
 8002ab6:	e7cb      	b.n	8002a50 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002ab8:	2001      	movs	r0, #1
 8002aba:	e7e9      	b.n	8002a90 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8002abc:	2002      	movs	r0, #2
 8002abe:	e7e7      	b.n	8002a90 <HAL_UART_Transmit+0x82>

08002ac0 <HAL_UART_Receive>:
{
 8002ac0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002ac4:	4698      	mov	r8, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8002ac6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002aca:	2b20      	cmp	r3, #32
{
 8002acc:	4604      	mov	r4, r0
 8002ace:	460d      	mov	r5, r1
 8002ad0:	4616      	mov	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8002ad2:	d160      	bne.n	8002b96 <HAL_UART_Receive+0xd6>
    if((pData == NULL ) || (Size == 0U))
 8002ad4:	2900      	cmp	r1, #0
 8002ad6:	d05c      	beq.n	8002b92 <HAL_UART_Receive+0xd2>
 8002ad8:	2a00      	cmp	r2, #0
 8002ada:	d05a      	beq.n	8002b92 <HAL_UART_Receive+0xd2>
    __HAL_LOCK(huart);
 8002adc:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d058      	beq.n	8002b96 <HAL_UART_Receive+0xd6>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002aee:	2322      	movs	r3, #34	; 0x22
 8002af0:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    tickstart = HAL_GetTick();
 8002af4:	f7fd fc06 	bl	8000304 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8002af8:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 8002afa:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8002afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002b02:	4607      	mov	r7, r0
    huart->RxXferCount = Size;
 8002b04:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8002b08:	d115      	bne.n	8002b36 <HAL_UART_Receive+0x76>
 8002b0a:	6923      	ldr	r3, [r4, #16]
 8002b0c:	b98b      	cbnz	r3, 8002b32 <HAL_UART_Receive+0x72>
 8002b0e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002b12:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8002b16:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 8002b1a:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8002b1e:	b280      	uxth	r0, r0
 8002b20:	b9b8      	cbnz	r0, 8002b52 <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 8002b22:	2320      	movs	r3, #32
 8002b24:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 8002b28:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
}
 8002b2c:	b002      	add	sp, #8
 8002b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8002b32:	23ff      	movs	r3, #255	; 0xff
 8002b34:	e7ed      	b.n	8002b12 <HAL_UART_Receive+0x52>
 8002b36:	b923      	cbnz	r3, 8002b42 <HAL_UART_Receive+0x82>
 8002b38:	6923      	ldr	r3, [r4, #16]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f9      	beq.n	8002b32 <HAL_UART_Receive+0x72>
 8002b3e:	237f      	movs	r3, #127	; 0x7f
 8002b40:	e7e7      	b.n	8002b12 <HAL_UART_Receive+0x52>
 8002b42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b46:	d1e6      	bne.n	8002b16 <HAL_UART_Receive+0x56>
 8002b48:	6923      	ldr	r3, [r4, #16]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0f7      	beq.n	8002b3e <HAL_UART_Receive+0x7e>
 8002b4e:	233f      	movs	r3, #63	; 0x3f
 8002b50:	e7df      	b.n	8002b12 <HAL_UART_Receive+0x52>
      huart->RxXferCount--;
 8002b52:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b56:	f8cd 8000 	str.w	r8, [sp]
      huart->RxXferCount--;
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b62:	2200      	movs	r2, #0
 8002b64:	463b      	mov	r3, r7
 8002b66:	2120      	movs	r1, #32
 8002b68:	4620      	mov	r0, r4
 8002b6a:	f7ff ff1f 	bl	80029ac <UART_WaitOnFlagUntilTimeout>
 8002b6e:	b9a0      	cbnz	r0, 8002b9a <HAL_UART_Receive+0xda>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b70:	68a3      	ldr	r3, [r4, #8]
 8002b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b76:	6823      	ldr	r3, [r4, #0]
 8002b78:	d106      	bne.n	8002b88 <HAL_UART_Receive+0xc8>
 8002b7a:	6922      	ldr	r2, [r4, #16]
 8002b7c:	b922      	cbnz	r2, 8002b88 <HAL_UART_Receive+0xc8>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002b7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b80:	4033      	ands	r3, r6
 8002b82:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8002b86:	e7c8      	b.n	8002b1a <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002b88:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b8a:	4033      	ands	r3, r6
 8002b8c:	702b      	strb	r3, [r5, #0]
 8002b8e:	3501      	adds	r5, #1
 8002b90:	e7c3      	b.n	8002b1a <HAL_UART_Receive+0x5a>
      return  HAL_ERROR;
 8002b92:	2001      	movs	r0, #1
 8002b94:	e7ca      	b.n	8002b2c <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 8002b96:	2002      	movs	r0, #2
 8002b98:	e7c8      	b.n	8002b2c <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 8002b9a:	2003      	movs	r0, #3
 8002b9c:	e7c6      	b.n	8002b2c <HAL_UART_Receive+0x6c>

08002b9e <UART_CheckIdleState>:
{
 8002b9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ba0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ba2:	2600      	movs	r6, #0
 8002ba4:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002ba6:	f7fd fbad 	bl	8000304 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002baa:	6823      	ldr	r3, [r4, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002bb0:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002bb2:	d417      	bmi.n	8002be4 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002bb4:	6823      	ldr	r3, [r4, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	075b      	lsls	r3, r3, #29
 8002bba:	d50a      	bpl.n	8002bd2 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	462b      	mov	r3, r5
 8002bc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002bca:	4620      	mov	r0, r4
 8002bcc:	f7ff feee 	bl	80029ac <UART_WaitOnFlagUntilTimeout>
 8002bd0:	b9a0      	cbnz	r0, 8002bfc <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8002bd2:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002bd4:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8002bd6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002bda:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8002bde:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8002be2:	e00c      	b.n	8002bfe <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002be4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	4632      	mov	r2, r6
 8002bec:	4603      	mov	r3, r0
 8002bee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	f7ff feda 	bl	80029ac <UART_WaitOnFlagUntilTimeout>
 8002bf8:	2800      	cmp	r0, #0
 8002bfa:	d0db      	beq.n	8002bb4 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002bfc:	2003      	movs	r0, #3
}
 8002bfe:	b002      	add	sp, #8
 8002c00:	bd70      	pop	{r4, r5, r6, pc}

08002c02 <HAL_UART_Init>:
{
 8002c02:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002c04:	4604      	mov	r4, r0
 8002c06:	b360      	cbz	r0, 8002c62 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002c08:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002c0c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c10:	b91b      	cbnz	r3, 8002c1a <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002c12:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002c16:	f001 fa81 	bl	800411c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002c1a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002c1c:	2324      	movs	r3, #36	; 0x24
 8002c1e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002c22:	6813      	ldr	r3, [r2, #0]
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	f7ff fd62 	bl	80026f4 <UART_SetConfig>
 8002c30:	2801      	cmp	r0, #1
 8002c32:	d016      	beq.n	8002c62 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c36:	b113      	cbz	r3, 8002c3e <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002c38:	4620      	mov	r0, r4
 8002c3a:	f7ff fe63 	bl	8002904 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c3e:	6823      	ldr	r3, [r4, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c4e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002c56:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002c58:	601a      	str	r2, [r3, #0]
}
 8002c5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002c5e:	f7ff bf9e 	b.w	8002b9e <UART_CheckIdleState>
}
 8002c62:	2001      	movs	r0, #1
 8002c64:	bd10      	pop	{r4, pc}
	...

08002c68 <ReadColourSensorSetting>:
#include "colourSensor.h"
#include "uart2.h"


void ReadColourSensorSetting(void)
{
 8002c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	//Reading the Capacitor value set
	address= CAP_RED;
	if(HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK)
 8002c6c:	2364      	movs	r3, #100	; 0x64
 8002c6e:	9302      	str	r3, [sp, #8]
	address= CAP_RED;
 8002c70:	4d65      	ldr	r5, [pc, #404]	; (8002e08 <ReadColourSensorSetting+0x1a0>)
	if(HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK)
 8002c72:	4c66      	ldr	r4, [pc, #408]	; (8002e0c <ReadColourSensorSetting+0x1a4>)
 8002c74:	9400      	str	r4, [sp, #0]
 8002c76:	2301      	movs	r3, #1
	address= CAP_RED;
 8002c78:	2206      	movs	r2, #6
	if(HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK)
 8002c7a:	9301      	str	r3, [sp, #4]
 8002c7c:	21e8      	movs	r1, #232	; 0xe8
 8002c7e:	4864      	ldr	r0, [pc, #400]	; (8002e10 <ReadColourSensorSetting+0x1a8>)
	address= CAP_RED;
 8002c80:	602a      	str	r2, [r5, #0]
	if(HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK)
 8002c82:	f7fe fa81 	bl	8001188 <HAL_I2C_Mem_Read>
 8002c86:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8002e34 <ReadColourSensorSetting+0x1cc>
 8002c8a:	b910      	cbnz	r0, 8002c92 <ReadColourSensorSetting+0x2a>
	{
		CapacitorValue=bufferColourSensor[0];
 8002c8c:	7823      	ldrb	r3, [r4, #0]
 8002c8e:	f8ca 3000 	str.w	r3, [sl]
	}

	//Reading the Red Gain
	address= INT_RED_LO;
	if(HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK)
 8002c92:	2364      	movs	r3, #100	; 0x64
 8002c94:	9302      	str	r3, [sp, #8]
 8002c96:	2301      	movs	r3, #1
	address= INT_RED_LO;
 8002c98:	220a      	movs	r2, #10
	if(HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK)
 8002c9a:	9301      	str	r3, [sp, #4]
 8002c9c:	9400      	str	r4, [sp, #0]
 8002c9e:	21e8      	movs	r1, #232	; 0xe8
 8002ca0:	485b      	ldr	r0, [pc, #364]	; (8002e10 <ReadColourSensorSetting+0x1a8>)
	address= INT_RED_LO;
 8002ca2:	602a      	str	r2, [r5, #0]
	if(HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK)
 8002ca4:	f7fe fa70 	bl	8001188 <HAL_I2C_Mem_Read>
 8002ca8:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8002e38 <ReadColourSensorSetting+0x1d0>
 8002cac:	b910      	cbnz	r0, 8002cb4 <ReadColourSensorSetting+0x4c>
	{
		RedGain=bufferColourSensor[0];
 8002cae:	7823      	ldrb	r3, [r4, #0]
 8002cb0:	f8c9 3000 	str.w	r3, [r9]
	}

	address= INT_RED_HI;
	if(HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK)
 8002cb4:	2364      	movs	r3, #100	; 0x64
 8002cb6:	9302      	str	r3, [sp, #8]
 8002cb8:	2301      	movs	r3, #1
	address= INT_RED_HI;
 8002cba:	220b      	movs	r2, #11
	if(HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK)
 8002cbc:	9301      	str	r3, [sp, #4]
 8002cbe:	9400      	str	r4, [sp, #0]
 8002cc0:	21e8      	movs	r1, #232	; 0xe8
 8002cc2:	4853      	ldr	r0, [pc, #332]	; (8002e10 <ReadColourSensorSetting+0x1a8>)
	address= INT_RED_HI;
 8002cc4:	602a      	str	r2, [r5, #0]
	if(HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK)
 8002cc6:	f7fe fa5f 	bl	8001188 <HAL_I2C_Mem_Read>
 8002cca:	b930      	cbnz	r0, 8002cda <ReadColourSensorSetting+0x72>
	{
		RedGain=(bufferColourSensor[0]*256)+RedGain;
 8002ccc:	f8d9 3000 	ldr.w	r3, [r9]
 8002cd0:	7822      	ldrb	r2, [r4, #0]
 8002cd2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002cd6:	f8c9 3000 	str.w	r3, [r9]
	}

	//Reading the Green Gain
	address= INT_GREEN_LO;
	if(HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK)
 8002cda:	2364      	movs	r3, #100	; 0x64
 8002cdc:	9302      	str	r3, [sp, #8]
 8002cde:	2301      	movs	r3, #1
	address= INT_GREEN_LO;
 8002ce0:	220c      	movs	r2, #12
	if(HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK)
 8002ce2:	9301      	str	r3, [sp, #4]
 8002ce4:	9400      	str	r4, [sp, #0]
 8002ce6:	21e8      	movs	r1, #232	; 0xe8
 8002ce8:	4849      	ldr	r0, [pc, #292]	; (8002e10 <ReadColourSensorSetting+0x1a8>)
	address= INT_GREEN_LO;
 8002cea:	602a      	str	r2, [r5, #0]
	if(HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK)
 8002cec:	f7fe fa4c 	bl	8001188 <HAL_I2C_Mem_Read>
 8002cf0:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8002e3c <ReadColourSensorSetting+0x1d4>
 8002cf4:	b910      	cbnz	r0, 8002cfc <ReadColourSensorSetting+0x94>
	{
		GreenGain=bufferColourSensor[0];
 8002cf6:	7823      	ldrb	r3, [r4, #0]
 8002cf8:	f8c8 3000 	str.w	r3, [r8]
	}

	address= INT_GREEN_HI;
	if(HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK)
 8002cfc:	2364      	movs	r3, #100	; 0x64
 8002cfe:	9302      	str	r3, [sp, #8]
 8002d00:	2301      	movs	r3, #1
	address= INT_GREEN_HI;
 8002d02:	220d      	movs	r2, #13
	if(HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK)
 8002d04:	9301      	str	r3, [sp, #4]
 8002d06:	9400      	str	r4, [sp, #0]
 8002d08:	21e8      	movs	r1, #232	; 0xe8
 8002d0a:	4841      	ldr	r0, [pc, #260]	; (8002e10 <ReadColourSensorSetting+0x1a8>)
	address= INT_GREEN_HI;
 8002d0c:	602a      	str	r2, [r5, #0]
	if(HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK)
 8002d0e:	f7fe fa3b 	bl	8001188 <HAL_I2C_Mem_Read>
 8002d12:	b930      	cbnz	r0, 8002d22 <ReadColourSensorSetting+0xba>
	{
		GreenGain=(bufferColourSensor[0]*256)+GreenGain;
 8002d14:	f8d8 3000 	ldr.w	r3, [r8]
 8002d18:	7822      	ldrb	r2, [r4, #0]
 8002d1a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002d1e:	f8c8 3000 	str.w	r3, [r8]
	}

	//Reading the Blue Gain
	address= INT_BLUE_LO;
	if(HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK)
 8002d22:	2364      	movs	r3, #100	; 0x64
 8002d24:	9302      	str	r3, [sp, #8]
 8002d26:	2301      	movs	r3, #1
	address= INT_BLUE_LO;
 8002d28:	220e      	movs	r2, #14
	if(HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK)
 8002d2a:	9301      	str	r3, [sp, #4]
 8002d2c:	9400      	str	r4, [sp, #0]
 8002d2e:	21e8      	movs	r1, #232	; 0xe8
 8002d30:	4837      	ldr	r0, [pc, #220]	; (8002e10 <ReadColourSensorSetting+0x1a8>)
	address= INT_BLUE_LO;
 8002d32:	602a      	str	r2, [r5, #0]
	if(HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK)
 8002d34:	f7fe fa28 	bl	8001188 <HAL_I2C_Mem_Read>
 8002d38:	4f36      	ldr	r7, [pc, #216]	; (8002e14 <ReadColourSensorSetting+0x1ac>)
 8002d3a:	b908      	cbnz	r0, 8002d40 <ReadColourSensorSetting+0xd8>
	{
		BlueGain=bufferColourSensor[0];
 8002d3c:	7823      	ldrb	r3, [r4, #0]
 8002d3e:	603b      	str	r3, [r7, #0]
	}

	address= INT_BLUE_HI;
	if(HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK)
 8002d40:	2364      	movs	r3, #100	; 0x64
 8002d42:	9302      	str	r3, [sp, #8]
 8002d44:	2301      	movs	r3, #1
	address= INT_BLUE_HI;
 8002d46:	220f      	movs	r2, #15
	if(HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK)
 8002d48:	9301      	str	r3, [sp, #4]
 8002d4a:	9400      	str	r4, [sp, #0]
 8002d4c:	21e8      	movs	r1, #232	; 0xe8
 8002d4e:	4830      	ldr	r0, [pc, #192]	; (8002e10 <ReadColourSensorSetting+0x1a8>)
	address= INT_BLUE_HI;
 8002d50:	602a      	str	r2, [r5, #0]
	if(HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK)
 8002d52:	f7fe fa19 	bl	8001188 <HAL_I2C_Mem_Read>
 8002d56:	b920      	cbnz	r0, 8002d62 <ReadColourSensorSetting+0xfa>
	{
		BlueGain=(bufferColourSensor[0]*256)+BlueGain;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	7822      	ldrb	r2, [r4, #0]
 8002d5c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002d60:	603b      	str	r3, [r7, #0]
	}

	//Reading the Blue Gain
	address= INT_CLEAR_LO;
	if(HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK)
 8002d62:	2364      	movs	r3, #100	; 0x64
 8002d64:	9302      	str	r3, [sp, #8]
 8002d66:	2301      	movs	r3, #1
	address= INT_CLEAR_LO;
 8002d68:	2210      	movs	r2, #16
	if(HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK)
 8002d6a:	9301      	str	r3, [sp, #4]
 8002d6c:	9400      	str	r4, [sp, #0]
 8002d6e:	21e8      	movs	r1, #232	; 0xe8
 8002d70:	4827      	ldr	r0, [pc, #156]	; (8002e10 <ReadColourSensorSetting+0x1a8>)
	address= INT_CLEAR_LO;
 8002d72:	602a      	str	r2, [r5, #0]
	if(HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK)
 8002d74:	f7fe fa08 	bl	8001188 <HAL_I2C_Mem_Read>
 8002d78:	4e27      	ldr	r6, [pc, #156]	; (8002e18 <ReadColourSensorSetting+0x1b0>)
 8002d7a:	b908      	cbnz	r0, 8002d80 <ReadColourSensorSetting+0x118>
	{
		ClearGain=bufferColourSensor[0];
 8002d7c:	7823      	ldrb	r3, [r4, #0]
 8002d7e:	6033      	str	r3, [r6, #0]
	}

	address= INT_CLEAR_HI;
	if(HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK)
 8002d80:	2364      	movs	r3, #100	; 0x64
 8002d82:	9302      	str	r3, [sp, #8]
 8002d84:	2301      	movs	r3, #1
	address= INT_CLEAR_HI;
 8002d86:	2211      	movs	r2, #17
	if(HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK)
 8002d88:	9301      	str	r3, [sp, #4]
 8002d8a:	9400      	str	r4, [sp, #0]
 8002d8c:	21e8      	movs	r1, #232	; 0xe8
 8002d8e:	4820      	ldr	r0, [pc, #128]	; (8002e10 <ReadColourSensorSetting+0x1a8>)
	address= INT_CLEAR_HI;
 8002d90:	602a      	str	r2, [r5, #0]
	if(HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK)
 8002d92:	f7fe f9f9 	bl	8001188 <HAL_I2C_Mem_Read>
 8002d96:	b920      	cbnz	r0, 8002da2 <ReadColourSensorSetting+0x13a>
	{
		ClearGain=(bufferColourSensor[0]*256)+ClearGain;
 8002d98:	6833      	ldr	r3, [r6, #0]
 8002d9a:	7822      	ldrb	r2, [r4, #0]
 8002d9c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002da0:	6033      	str	r3, [r6, #0]
	}



	snprintf((char *)buffer, sizeof(buffer), "The Capacitor is %d!\r\n\r\n", CapacitorValue);
 8002da2:	f8da 3000 	ldr.w	r3, [sl]
 8002da6:	4a1d      	ldr	r2, [pc, #116]	; (8002e1c <ReadColourSensorSetting+0x1b4>)
 8002da8:	481d      	ldr	r0, [pc, #116]	; (8002e20 <ReadColourSensorSetting+0x1b8>)
 8002daa:	2164      	movs	r1, #100	; 0x64
 8002dac:	f001 fee6 	bl	8004b7c <sniprintf>
	TransmitUart((char *)buffer);
 8002db0:	481b      	ldr	r0, [pc, #108]	; (8002e20 <ReadColourSensorSetting+0x1b8>)
 8002db2:	f001 faad 	bl	8004310 <TransmitUart>

	snprintf((char *)buffer, sizeof(buffer), "The Red Gain is %d!\r\n\r\n", RedGain);
 8002db6:	f8d9 3000 	ldr.w	r3, [r9]
 8002dba:	4a1a      	ldr	r2, [pc, #104]	; (8002e24 <ReadColourSensorSetting+0x1bc>)
 8002dbc:	4818      	ldr	r0, [pc, #96]	; (8002e20 <ReadColourSensorSetting+0x1b8>)
 8002dbe:	2164      	movs	r1, #100	; 0x64
 8002dc0:	f001 fedc 	bl	8004b7c <sniprintf>
	TransmitUart((char *)buffer);
 8002dc4:	4816      	ldr	r0, [pc, #88]	; (8002e20 <ReadColourSensorSetting+0x1b8>)
 8002dc6:	f001 faa3 	bl	8004310 <TransmitUart>

	snprintf((char *)buffer, sizeof(buffer), "The Green Gain is %d!\r\n\r\n", GreenGain);
 8002dca:	f8d8 3000 	ldr.w	r3, [r8]
 8002dce:	4a16      	ldr	r2, [pc, #88]	; (8002e28 <ReadColourSensorSetting+0x1c0>)
 8002dd0:	4813      	ldr	r0, [pc, #76]	; (8002e20 <ReadColourSensorSetting+0x1b8>)
 8002dd2:	2164      	movs	r1, #100	; 0x64
 8002dd4:	f001 fed2 	bl	8004b7c <sniprintf>
	TransmitUart((char *)buffer);
 8002dd8:	4811      	ldr	r0, [pc, #68]	; (8002e20 <ReadColourSensorSetting+0x1b8>)
 8002dda:	f001 fa99 	bl	8004310 <TransmitUart>

	snprintf((char *)buffer, sizeof(buffer), "The Blue Gain is %d!\r\n\r\n", BlueGain);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	4a12      	ldr	r2, [pc, #72]	; (8002e2c <ReadColourSensorSetting+0x1c4>)
 8002de2:	480f      	ldr	r0, [pc, #60]	; (8002e20 <ReadColourSensorSetting+0x1b8>)
 8002de4:	2164      	movs	r1, #100	; 0x64
 8002de6:	f001 fec9 	bl	8004b7c <sniprintf>
	TransmitUart((char *)buffer);
 8002dea:	480d      	ldr	r0, [pc, #52]	; (8002e20 <ReadColourSensorSetting+0x1b8>)
 8002dec:	f001 fa90 	bl	8004310 <TransmitUart>

	snprintf((char *)buffer, sizeof(buffer), "The Clear is %d!\r\n\r\n", ClearGain);
 8002df0:	6833      	ldr	r3, [r6, #0]
 8002df2:	4a0f      	ldr	r2, [pc, #60]	; (8002e30 <ReadColourSensorSetting+0x1c8>)
 8002df4:	480a      	ldr	r0, [pc, #40]	; (8002e20 <ReadColourSensorSetting+0x1b8>)
 8002df6:	2164      	movs	r1, #100	; 0x64
 8002df8:	f001 fec0 	bl	8004b7c <sniprintf>
	TransmitUart((char *)buffer);
 8002dfc:	4808      	ldr	r0, [pc, #32]	; (8002e20 <ReadColourSensorSetting+0x1b8>)

}
 8002dfe:	b004      	add	sp, #16
 8002e00:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	TransmitUart((char *)buffer);
 8002e04:	f001 ba84 	b.w	8004310 <TransmitUart>
 8002e08:	200000c0 	.word	0x200000c0
 8002e0c:	200000d8 	.word	0x200000d8
 8002e10:	200002d0 	.word	0x200002d0
 8002e14:	20000008 	.word	0x20000008
 8002e18:	20000010 	.word	0x20000010
 8002e1c:	08005a7b 	.word	0x08005a7b
 8002e20:	2000050c 	.word	0x2000050c
 8002e24:	08005a94 	.word	0x08005a94
 8002e28:	08005aac 	.word	0x08005aac
 8002e2c:	08005ac6 	.word	0x08005ac6
 8002e30:	08005adf 	.word	0x08005adf
 8002e34:	2000000c 	.word	0x2000000c
 8002e38:	20000018 	.word	0x20000018
 8002e3c:	20000014 	.word	0x20000014

08002e40 <CapacitorSelection>:

//Selecting Capacitor amount
void CapacitorSelection(uint16_t y)
{
 8002e40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	address= CAP_RED;
 8002e44:	4d12      	ldr	r5, [pc, #72]	; (8002e90 <CapacitorSelection+0x50>)
	for (x = 0; x <4; x++)
 8002e46:	4c13      	ldr	r4, [pc, #76]	; (8002e94 <CapacitorSelection+0x54>)
	{

	 bufferColourSensor[0]= y;
 8002e48:	4e13      	ldr	r6, [pc, #76]	; (8002e98 <CapacitorSelection+0x58>)

	 if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK);
 8002e4a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8002e9c <CapacitorSelection+0x5c>
	address= CAP_RED;
 8002e4e:	2306      	movs	r3, #6
 8002e50:	602b      	str	r3, [r5, #0]
	for (x = 0; x <4; x++)
 8002e52:	2300      	movs	r3, #0
{
 8002e54:	b085      	sub	sp, #20
 8002e56:	4607      	mov	r7, r0
	for (x = 0; x <4; x++)
 8002e58:	7023      	strb	r3, [r4, #0]
	 if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK);
 8002e5a:	f04f 0864 	mov.w	r8, #100	; 0x64
	for (x = 0; x <4; x++)
 8002e5e:	7823      	ldrb	r3, [r4, #0]
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d902      	bls.n	8002e6a <CapacitorSelection+0x2a>
		snprintf((char *)buffer, sizeof(buffer), "The Capacitor is set as %d!\r\n\r\n", bufferColourSensor[0]);
		TransmitUart((char *)buffer);
	}*/


}
 8002e64:	b005      	add	sp, #20
 8002e66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	 if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK);
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	9301      	str	r3, [sp, #4]
 8002e6e:	882a      	ldrh	r2, [r5, #0]
 8002e70:	f8cd 8008 	str.w	r8, [sp, #8]
 8002e74:	9600      	str	r6, [sp, #0]
 8002e76:	21e8      	movs	r1, #232	; 0xe8
 8002e78:	4648      	mov	r0, r9
	 bufferColourSensor[0]= y;
 8002e7a:	7037      	strb	r7, [r6, #0]
	 if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100) == HAL_OK);
 8002e7c:	f7fe f8cc 	bl	8001018 <HAL_I2C_Mem_Write>
	 address++;
 8002e80:	682b      	ldr	r3, [r5, #0]
 8002e82:	3301      	adds	r3, #1
 8002e84:	602b      	str	r3, [r5, #0]
	for (x = 0; x <4; x++)
 8002e86:	7823      	ldrb	r3, [r4, #0]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	7023      	strb	r3, [r4, #0]
 8002e8c:	e7e7      	b.n	8002e5e <CapacitorSelection+0x1e>
 8002e8e:	bf00      	nop
 8002e90:	200000c0 	.word	0x200000c0
 8002e94:	200000a0 	.word	0x200000a0
 8002e98:	200000d8 	.word	0x200000d8
 8002e9c:	200002d0 	.word	0x200002d0

08002ea0 <GainSensor>:

void GainSensor(void)
{
 8002ea0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	//Setting the Red Gain
	if(RedGain<=0 || RedGain>4096)
 8002ea2:	4e61      	ldr	r6, [pc, #388]	; (8003028 <GainSensor+0x188>)
 8002ea4:	6833      	ldr	r3, [r6, #0]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eac:	d305      	bcc.n	8002eba <GainSensor+0x1a>
	{
		RedGain=GAIN_RED;
 8002eae:	f240 230d 	movw	r3, #525	; 0x20d
		TransmitUart("\r\n\r\nRed Gain is set as default.\r\n\r\n");
 8002eb2:	485e      	ldr	r0, [pc, #376]	; (800302c <GainSensor+0x18c>)
		RedGain=GAIN_RED;
 8002eb4:	6033      	str	r3, [r6, #0]
		TransmitUart("\r\n\r\nRed Gain is set as default.\r\n\r\n");
 8002eb6:	f001 fa2b 	bl	8004310 <TransmitUart>
	}

	address= INT_RED_LO;                                                            //Select value range (Sensor gain)
	bufferColourSensor[0]= RedGain & 0x00FF;
 8002eba:	4c5d      	ldr	r4, [pc, #372]	; (8003030 <GainSensor+0x190>)
 8002ebc:	6833      	ldr	r3, [r6, #0]
 8002ebe:	7023      	strb	r3, [r4, #0]

	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 8002ec0:	2364      	movs	r3, #100	; 0x64
	address= INT_RED_LO;                                                            //Select value range (Sensor gain)
 8002ec2:	4d5c      	ldr	r5, [pc, #368]	; (8003034 <GainSensor+0x194>)
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 8002ec4:	9302      	str	r3, [sp, #8]
 8002ec6:	2301      	movs	r3, #1
	address= INT_RED_LO;                                                            //Select value range (Sensor gain)
 8002ec8:	220a      	movs	r2, #10
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 8002eca:	9301      	str	r3, [sp, #4]
 8002ecc:	9400      	str	r4, [sp, #0]
 8002ece:	21e8      	movs	r1, #232	; 0xe8
 8002ed0:	4859      	ldr	r0, [pc, #356]	; (8003038 <GainSensor+0x198>)
	address= INT_RED_LO;                                                            //Select value range (Sensor gain)
 8002ed2:	602a      	str	r2, [r5, #0]
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 8002ed4:	f7fe f8a0 	bl	8001018 <HAL_I2C_Mem_Write>
 8002ed8:	b110      	cbz	r0, 8002ee0 <GainSensor+0x40>
				TransmitUart("Red Gain of the Colour Sensor is NOT set(LOW)!\r\n");
 8002eda:	4858      	ldr	r0, [pc, #352]	; (800303c <GainSensor+0x19c>)
 8002edc:	f001 fa18 	bl	8004310 <TransmitUart>

	address= INT_RED_HI;
	bufferColourSensor[0]= (RedGain>>8)& 0x00FF;
 8002ee0:	6833      	ldr	r3, [r6, #0]

	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 8002ee2:	4855      	ldr	r0, [pc, #340]	; (8003038 <GainSensor+0x198>)
 8002ee4:	9400      	str	r4, [sp, #0]
	bufferColourSensor[0]= (RedGain>>8)& 0x00FF;
 8002ee6:	0a1b      	lsrs	r3, r3, #8
 8002ee8:	7023      	strb	r3, [r4, #0]
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 8002eea:	2364      	movs	r3, #100	; 0x64
 8002eec:	9302      	str	r3, [sp, #8]
 8002eee:	2301      	movs	r3, #1
	address= INT_RED_HI;
 8002ef0:	220b      	movs	r2, #11
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 8002ef2:	9301      	str	r3, [sp, #4]
 8002ef4:	21e8      	movs	r1, #232	; 0xe8
	address= INT_RED_HI;
 8002ef6:	602a      	str	r2, [r5, #0]
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 8002ef8:	f7fe f88e 	bl	8001018 <HAL_I2C_Mem_Write>
 8002efc:	b110      	cbz	r0, 8002f04 <GainSensor+0x64>
				TransmitUart("Red Gain of the Colour Sensor is NOT set(HIGH)!\r\n");
 8002efe:	4850      	ldr	r0, [pc, #320]	; (8003040 <GainSensor+0x1a0>)
 8002f00:	f001 fa06 	bl	8004310 <TransmitUart>


	//Setting the Green Gain
	if(GreenGain<=0 || GreenGain>4096)
 8002f04:	4e4f      	ldr	r6, [pc, #316]	; (8003044 <GainSensor+0x1a4>)
 8002f06:	6833      	ldr	r3, [r6, #0]
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f0e:	d305      	bcc.n	8002f1c <GainSensor+0x7c>
	{
		GreenGain=GAIN_GREEN;
 8002f10:	f240 2371 	movw	r3, #625	; 0x271
		TransmitUart("\r\n\r\nGreen Gain is set as default.\r\n\r\n");
 8002f14:	484c      	ldr	r0, [pc, #304]	; (8003048 <GainSensor+0x1a8>)
		GreenGain=GAIN_GREEN;
 8002f16:	6033      	str	r3, [r6, #0]
		TransmitUart("\r\n\r\nGreen Gain is set as default.\r\n\r\n");
 8002f18:	f001 f9fa 	bl	8004310 <TransmitUart>
	}

	address= INT_GREEN_LO;                                                            //Select value range (Sensor gain)
	bufferColourSensor[0]= GreenGain & 0x00FF;
 8002f1c:	6833      	ldr	r3, [r6, #0]
 8002f1e:	7023      	strb	r3, [r4, #0]

	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 8002f20:	2364      	movs	r3, #100	; 0x64
 8002f22:	9302      	str	r3, [sp, #8]
 8002f24:	2301      	movs	r3, #1
	address= INT_GREEN_LO;                                                            //Select value range (Sensor gain)
 8002f26:	220c      	movs	r2, #12
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 8002f28:	9301      	str	r3, [sp, #4]
 8002f2a:	9400      	str	r4, [sp, #0]
 8002f2c:	21e8      	movs	r1, #232	; 0xe8
 8002f2e:	4842      	ldr	r0, [pc, #264]	; (8003038 <GainSensor+0x198>)
	address= INT_GREEN_LO;                                                            //Select value range (Sensor gain)
 8002f30:	602a      	str	r2, [r5, #0]
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 8002f32:	f7fe f871 	bl	8001018 <HAL_I2C_Mem_Write>
 8002f36:	b110      	cbz	r0, 8002f3e <GainSensor+0x9e>
				TransmitUart("Green Gain of the Colour Sensor is NOT set(LOW)!\r\n");
 8002f38:	4844      	ldr	r0, [pc, #272]	; (800304c <GainSensor+0x1ac>)
 8002f3a:	f001 f9e9 	bl	8004310 <TransmitUart>

	address= INT_GREEN_HI;
	bufferColourSensor[0]= (GreenGain>>8)& 0x00FF;
 8002f3e:	6833      	ldr	r3, [r6, #0]

	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 8002f40:	483d      	ldr	r0, [pc, #244]	; (8003038 <GainSensor+0x198>)
 8002f42:	9400      	str	r4, [sp, #0]
	bufferColourSensor[0]= (GreenGain>>8)& 0x00FF;
 8002f44:	0a1b      	lsrs	r3, r3, #8
 8002f46:	7023      	strb	r3, [r4, #0]
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 8002f48:	2364      	movs	r3, #100	; 0x64
 8002f4a:	9302      	str	r3, [sp, #8]
 8002f4c:	2301      	movs	r3, #1
	address= INT_GREEN_HI;
 8002f4e:	220d      	movs	r2, #13
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 8002f50:	9301      	str	r3, [sp, #4]
 8002f52:	21e8      	movs	r1, #232	; 0xe8
	address= INT_GREEN_HI;
 8002f54:	602a      	str	r2, [r5, #0]
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 8002f56:	f7fe f85f 	bl	8001018 <HAL_I2C_Mem_Write>
 8002f5a:	b110      	cbz	r0, 8002f62 <GainSensor+0xc2>
				TransmitUart("Green Gain of the Colour Sensor is NOT set(HIGH)!\r\n");
 8002f5c:	483c      	ldr	r0, [pc, #240]	; (8003050 <GainSensor+0x1b0>)
 8002f5e:	f001 f9d7 	bl	8004310 <TransmitUart>


	//Setting the Blue Gain
	if(BlueGain<=0 || BlueGain>4096)
 8002f62:	4e3c      	ldr	r6, [pc, #240]	; (8003054 <GainSensor+0x1b4>)
 8002f64:	6833      	ldr	r3, [r6, #0]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f6c:	d305      	bcc.n	8002f7a <GainSensor+0xda>
	{
		BlueGain=GAIN_BLUE;
 8002f6e:	f44f 7339 	mov.w	r3, #740	; 0x2e4
		TransmitUart("\r\n\r\nBlue Gain is set as default.\r\n\r\n");
 8002f72:	4839      	ldr	r0, [pc, #228]	; (8003058 <GainSensor+0x1b8>)
		BlueGain=GAIN_BLUE;
 8002f74:	6033      	str	r3, [r6, #0]
		TransmitUart("\r\n\r\nBlue Gain is set as default.\r\n\r\n");
 8002f76:	f001 f9cb 	bl	8004310 <TransmitUart>
	}

	address= INT_BLUE_LO;                                                            //Select value range (Sensor gain)
	bufferColourSensor[0]= BlueGain & 0x00FF;
 8002f7a:	6833      	ldr	r3, [r6, #0]
 8002f7c:	7023      	strb	r3, [r4, #0]

	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 8002f7e:	2364      	movs	r3, #100	; 0x64
 8002f80:	9302      	str	r3, [sp, #8]
 8002f82:	2301      	movs	r3, #1
	address= INT_BLUE_LO;                                                            //Select value range (Sensor gain)
 8002f84:	220e      	movs	r2, #14
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	9400      	str	r4, [sp, #0]
 8002f8a:	21e8      	movs	r1, #232	; 0xe8
 8002f8c:	482a      	ldr	r0, [pc, #168]	; (8003038 <GainSensor+0x198>)
	address= INT_BLUE_LO;                                                            //Select value range (Sensor gain)
 8002f8e:	602a      	str	r2, [r5, #0]
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 8002f90:	f7fe f842 	bl	8001018 <HAL_I2C_Mem_Write>
 8002f94:	b110      	cbz	r0, 8002f9c <GainSensor+0xfc>
				TransmitUart("Blue Gain of the Colour Sensor is NOT set(LOW)!\r\n");
 8002f96:	4831      	ldr	r0, [pc, #196]	; (800305c <GainSensor+0x1bc>)
 8002f98:	f001 f9ba 	bl	8004310 <TransmitUart>

	address= INT_BLUE_HI;
	bufferColourSensor[0]= (BlueGain>>8)& 0x00FF;
 8002f9c:	6833      	ldr	r3, [r6, #0]

	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 8002f9e:	4826      	ldr	r0, [pc, #152]	; (8003038 <GainSensor+0x198>)
 8002fa0:	9400      	str	r4, [sp, #0]
	bufferColourSensor[0]= (BlueGain>>8)& 0x00FF;
 8002fa2:	0a1b      	lsrs	r3, r3, #8
 8002fa4:	7023      	strb	r3, [r4, #0]
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 8002fa6:	2364      	movs	r3, #100	; 0x64
 8002fa8:	9302      	str	r3, [sp, #8]
 8002faa:	2301      	movs	r3, #1
	address= INT_BLUE_HI;
 8002fac:	220f      	movs	r2, #15
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 8002fae:	9301      	str	r3, [sp, #4]
 8002fb0:	21e8      	movs	r1, #232	; 0xe8
	address= INT_BLUE_HI;
 8002fb2:	602a      	str	r2, [r5, #0]
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 8002fb4:	f7fe f830 	bl	8001018 <HAL_I2C_Mem_Write>
 8002fb8:	b110      	cbz	r0, 8002fc0 <GainSensor+0x120>
				TransmitUart("Blue Gain of the Colour Sensor is NOT set(HIGH)!\r\n");
 8002fba:	4829      	ldr	r0, [pc, #164]	; (8003060 <GainSensor+0x1c0>)
 8002fbc:	f001 f9a8 	bl	8004310 <TransmitUart>



	//Setting the Clear Gain
	if(ClearGain<=0 || ClearGain>4096)
 8002fc0:	4e28      	ldr	r6, [pc, #160]	; (8003064 <GainSensor+0x1c4>)
 8002fc2:	6833      	ldr	r3, [r6, #0]
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fca:	d304      	bcc.n	8002fd6 <GainSensor+0x136>
	{
		ClearGain=GAIN_CLEAR;
 8002fcc:	23d7      	movs	r3, #215	; 0xd7
		TransmitUart("\r\n\r\nClear Gain is set as default.\r\n\r\n");
 8002fce:	4826      	ldr	r0, [pc, #152]	; (8003068 <GainSensor+0x1c8>)
		ClearGain=GAIN_CLEAR;
 8002fd0:	6033      	str	r3, [r6, #0]
		TransmitUart("\r\n\r\nClear Gain is set as default.\r\n\r\n");
 8002fd2:	f001 f99d 	bl	8004310 <TransmitUart>
	}

	address= INT_CLEAR_LO;                                                            //Select value range (Sensor gain)
	bufferColourSensor[0]= ClearGain & 0x00FF;
 8002fd6:	6833      	ldr	r3, [r6, #0]
 8002fd8:	7023      	strb	r3, [r4, #0]

	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 8002fda:	2364      	movs	r3, #100	; 0x64
 8002fdc:	9302      	str	r3, [sp, #8]
 8002fde:	2301      	movs	r3, #1
	address= INT_CLEAR_LO;                                                            //Select value range (Sensor gain)
 8002fe0:	2210      	movs	r2, #16
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 8002fe2:	9301      	str	r3, [sp, #4]
 8002fe4:	9400      	str	r4, [sp, #0]
 8002fe6:	21e8      	movs	r1, #232	; 0xe8
 8002fe8:	4813      	ldr	r0, [pc, #76]	; (8003038 <GainSensor+0x198>)
	address= INT_CLEAR_LO;                                                            //Select value range (Sensor gain)
 8002fea:	602a      	str	r2, [r5, #0]
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 8002fec:	f7fe f814 	bl	8001018 <HAL_I2C_Mem_Write>
 8002ff0:	b110      	cbz	r0, 8002ff8 <GainSensor+0x158>
				TransmitUart("Clear Gain of the Colour Sensor is NOT set(LOW)!\r\n");
 8002ff2:	481e      	ldr	r0, [pc, #120]	; (800306c <GainSensor+0x1cc>)
 8002ff4:	f001 f98c 	bl	8004310 <TransmitUart>

	address= INT_CLEAR_HI;
	bufferColourSensor[0]= (ClearGain>>8)& 0x00FF;
 8002ff8:	6833      	ldr	r3, [r6, #0]

	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 8002ffa:	480f      	ldr	r0, [pc, #60]	; (8003038 <GainSensor+0x198>)
 8002ffc:	9400      	str	r4, [sp, #0]
	bufferColourSensor[0]= (ClearGain>>8)& 0x00FF;
 8002ffe:	0a1b      	lsrs	r3, r3, #8
 8003000:	7023      	strb	r3, [r4, #0]
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 8003002:	2364      	movs	r3, #100	; 0x64
 8003004:	9302      	str	r3, [sp, #8]
 8003006:	2301      	movs	r3, #1
	address= INT_CLEAR_HI;
 8003008:	2211      	movs	r2, #17
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 800300a:	9301      	str	r3, [sp, #4]
 800300c:	21e8      	movs	r1, #232	; 0xe8
	address= INT_CLEAR_HI;
 800300e:	602a      	str	r2, [r5, #0]
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)!=HAL_OK)
 8003010:	f7fe f802 	bl	8001018 <HAL_I2C_Mem_Write>
 8003014:	b110      	cbz	r0, 800301c <GainSensor+0x17c>
				TransmitUart("Clear Gain of the Colour Sensor is NOT set(HIGH)!\r\n");
 8003016:	4816      	ldr	r0, [pc, #88]	; (8003070 <GainSensor+0x1d0>)
 8003018:	f001 f97a 	bl	8004310 <TransmitUart>

	ReadColourSensorSetting();
}
 800301c:	b004      	add	sp, #16
 800301e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ReadColourSensorSetting();
 8003022:	f7ff be21 	b.w	8002c68 <ReadColourSensorSetting>
 8003026:	bf00      	nop
 8003028:	20000018 	.word	0x20000018
 800302c:	08005850 	.word	0x08005850
 8003030:	200000d8 	.word	0x200000d8
 8003034:	200000c0 	.word	0x200000c0
 8003038:	200002d0 	.word	0x200002d0
 800303c:	08005874 	.word	0x08005874
 8003040:	080058a5 	.word	0x080058a5
 8003044:	20000014 	.word	0x20000014
 8003048:	080058d7 	.word	0x080058d7
 800304c:	080058fd 	.word	0x080058fd
 8003050:	08005930 	.word	0x08005930
 8003054:	20000008 	.word	0x20000008
 8003058:	08005964 	.word	0x08005964
 800305c:	08005989 	.word	0x08005989
 8003060:	080059bb 	.word	0x080059bb
 8003064:	20000010 	.word	0x20000010
 8003068:	080059ee 	.word	0x080059ee
 800306c:	08005a14 	.word	0x08005a14
 8003070:	08005a47 	.word	0x08005a47

08003074 <DataCollection>:


}

void DataCollection(void)
{
 8003074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  HAL_GPIO_WritePin( ColourSensorLed_GPIO_Port, ColourSensorLed_Pin, GPIO_PIN_SET);                                  //Turn on LED

  bufferColourSensor[0]= 0x01;
 8003078:	4c26      	ldr	r4, [pc, #152]	; (8003114 <DataCollection+0xa0>)

  bufferColourSensor[0]= 0x01;

  while(bufferColourSensor[0] !=0)                                                        //Check if the Sensor is done reading
  {
    HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, CTRL, 1, bufferColourSensor, 1, 100);
 800307a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8003118 <DataCollection+0xa4>
  bufferColourSensor[0]= 0x01;
 800307e:	2501      	movs	r5, #1
{
 8003080:	b085      	sub	sp, #20
  HAL_GPIO_WritePin( ColourSensorLed_GPIO_Port, ColourSensorLed_Pin, GPIO_PIN_SET);                                  //Turn on LED
 8003082:	2201      	movs	r2, #1
 8003084:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, CTRL, 1, bufferColourSensor, 1, 100);       //Send to start reading
 800308c:	2664      	movs	r6, #100	; 0x64
  HAL_GPIO_WritePin( ColourSensorLed_GPIO_Port, ColourSensorLed_Pin, GPIO_PIN_SET);                                  //Turn on LED
 800308e:	f7fd fe23 	bl	8000cd8 <HAL_GPIO_WritePin>
  HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, CTRL, 1, bufferColourSensor, 1, 100);       //Send to start reading
 8003092:	e88d 0070 	stmia.w	sp, {r4, r5, r6}
 8003096:	462b      	mov	r3, r5
 8003098:	2200      	movs	r2, #0
 800309a:	21e8      	movs	r1, #232	; 0xe8
 800309c:	481e      	ldr	r0, [pc, #120]	; (8003118 <DataCollection+0xa4>)
  bufferColourSensor[0]= 0x01;
 800309e:	7025      	strb	r5, [r4, #0]
  HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, CTRL, 1, bufferColourSensor, 1, 100);       //Send to start reading
 80030a0:	f7fd ffba 	bl	8001018 <HAL_I2C_Mem_Write>
  bufferColourSensor[0]= 0x01;
 80030a4:	7025      	strb	r5, [r4, #0]
  while(bufferColourSensor[0] !=0)                                                        //Check if the Sensor is done reading
 80030a6:	7827      	ldrb	r7, [r4, #0]
 80030a8:	b9af      	cbnz	r7, 80030d6 <DataCollection+0x62>
  }

  HAL_GPIO_WritePin( ColourSensorLed_GPIO_Port, ColourSensorLed_Pin, GPIO_PIN_RESET);                                   //Turn off LED
 80030aa:	463a      	mov	r2, r7
 80030ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  address= DATA_RED_LO;
 80030b4:	4e19      	ldr	r6, [pc, #100]	; (800311c <DataCollection+0xa8>)
  for (x = 0; x <8; x++)
 80030b6:	4d1a      	ldr	r5, [pc, #104]	; (8003120 <DataCollection+0xac>)
  {
    bufferColourSensor[0]= 0;
    HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100);   //Start collecting DATA
 80030b8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8003118 <DataCollection+0xa4>

    Data[x]= bufferColourSensor[0];
 80030bc:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8003124 <DataCollection+0xb0>
  HAL_GPIO_WritePin( ColourSensorLed_GPIO_Port, ColourSensorLed_Pin, GPIO_PIN_RESET);                                   //Turn off LED
 80030c0:	f7fd fe0a 	bl	8000cd8 <HAL_GPIO_WritePin>
  address= DATA_RED_LO;
 80030c4:	2340      	movs	r3, #64	; 0x40
 80030c6:	6033      	str	r3, [r6, #0]
  for (x = 0; x <8; x++)
 80030c8:	702f      	strb	r7, [r5, #0]
 80030ca:	782b      	ldrb	r3, [r5, #0]
 80030cc:	2b07      	cmp	r3, #7
 80030ce:	d90b      	bls.n	80030e8 <DataCollection+0x74>
    address++;

  }
  //return DATA[];
}
 80030d0:	b005      	add	sp, #20
 80030d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, CTRL, 1, bufferColourSensor, 1, 100);
 80030d6:	e88d 0070 	stmia.w	sp, {r4, r5, r6}
 80030da:	2301      	movs	r3, #1
 80030dc:	2200      	movs	r2, #0
 80030de:	21e8      	movs	r1, #232	; 0xe8
 80030e0:	4640      	mov	r0, r8
 80030e2:	f7fe f851 	bl	8001188 <HAL_I2C_Mem_Read>
 80030e6:	e7de      	b.n	80030a6 <DataCollection+0x32>
    HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100);   //Start collecting DATA
 80030e8:	2364      	movs	r3, #100	; 0x64
 80030ea:	8832      	ldrh	r2, [r6, #0]
 80030ec:	9302      	str	r3, [sp, #8]
 80030ee:	2301      	movs	r3, #1
 80030f0:	9301      	str	r3, [sp, #4]
 80030f2:	9400      	str	r4, [sp, #0]
 80030f4:	21e8      	movs	r1, #232	; 0xe8
 80030f6:	4640      	mov	r0, r8
    bufferColourSensor[0]= 0;
 80030f8:	7027      	strb	r7, [r4, #0]
    HAL_I2C_Mem_Read(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100);   //Start collecting DATA
 80030fa:	f7fe f845 	bl	8001188 <HAL_I2C_Mem_Read>
    Data[x]= bufferColourSensor[0];
 80030fe:	782b      	ldrb	r3, [r5, #0]
 8003100:	7822      	ldrb	r2, [r4, #0]
 8003102:	f809 2003 	strb.w	r2, [r9, r3]
    address++;
 8003106:	6832      	ldr	r2, [r6, #0]
  for (x = 0; x <8; x++)
 8003108:	3301      	adds	r3, #1
    address++;
 800310a:	3201      	adds	r2, #1
 800310c:	6032      	str	r2, [r6, #0]
  for (x = 0; x <8; x++)
 800310e:	702b      	strb	r3, [r5, #0]
 8003110:	e7db      	b.n	80030ca <DataCollection+0x56>
 8003112:	bf00      	nop
 8003114:	200000d8 	.word	0x200000d8
 8003118:	200002d0 	.word	0x200002d0
 800311c:	200000c0 	.word	0x200000c0
 8003120:	200000a0 	.word	0x200000a0
 8003124:	20000104 	.word	0x20000104

08003128 <ColourSensorCalculation>:

void ColourSensorCalculation(void)
{
	Red= Data[1]*256+ Data[0];
 8003128:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <ColourSensorCalculation+0x40>)
 800312a:	7859      	ldrb	r1, [r3, #1]
 800312c:	781a      	ldrb	r2, [r3, #0]
 800312e:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8003132:	490e      	ldr	r1, [pc, #56]	; (800316c <ColourSensorCalculation+0x44>)
 8003134:	600a      	str	r2, [r1, #0]
	Green= Data[3]*256+ Data[2];
 8003136:	78d9      	ldrb	r1, [r3, #3]
 8003138:	789a      	ldrb	r2, [r3, #2]
 800313a:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800313e:	490c      	ldr	r1, [pc, #48]	; (8003170 <ColourSensorCalculation+0x48>)
 8003140:	600a      	str	r2, [r1, #0]
	Blue= Data[5]*256+ Data[4];
 8003142:	7959      	ldrb	r1, [r3, #5]
 8003144:	791a      	ldrb	r2, [r3, #4]
 8003146:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800314a:	490a      	ldr	r1, [pc, #40]	; (8003174 <ColourSensorCalculation+0x4c>)
 800314c:	600a      	str	r2, [r1, #0]
	Clear= Data[7]*256+ Data[6];
 800314e:	79da      	ldrb	r2, [r3, #7]
 8003150:	799b      	ldrb	r3, [r3, #6]
 8003152:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003156:	4a08      	ldr	r2, [pc, #32]	; (8003178 <ColourSensorCalculation+0x50>)

	HAL_GPIO_WritePin( ColourSensorLed_GPIO_Port, ColourSensorLed_Pin, GPIO_PIN_RESET);                                //Turn off LED
 8003158:	f44f 7180 	mov.w	r1, #256	; 0x100
	Clear= Data[7]*256+ Data[6];
 800315c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin( ColourSensorLed_GPIO_Port, ColourSensorLed_Pin, GPIO_PIN_RESET);                                //Turn off LED
 800315e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003162:	2200      	movs	r2, #0
 8003164:	f7fd bdb8 	b.w	8000cd8 <HAL_GPIO_WritePin>
 8003168:	20000104 	.word	0x20000104
 800316c:	20000110 	.word	0x20000110
 8003170:	20000114 	.word	0x20000114
 8003174:	200000ec 	.word	0x200000ec
 8003178:	2000012c 	.word	0x2000012c

0800317c <ArrangeColourSensorArrayValue>:
}

void ArrangeColourSensorArrayValue(void)
{
 800317c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800317e:	2505      	movs	r5, #5
 8003180:	4b17      	ldr	r3, [pc, #92]	; (80031e0 <ArrangeColourSensorArrayValue+0x64>)
 8003182:	4818      	ldr	r0, [pc, #96]	; (80031e4 <ArrangeColourSensorArrayValue+0x68>)
 8003184:	4918      	ldr	r1, [pc, #96]	; (80031e8 <ArrangeColourSensorArrayValue+0x6c>)
 8003186:	4a19      	ldr	r2, [pc, #100]	; (80031ec <ArrangeColourSensorArrayValue+0x70>)
 8003188:	f103 0610 	add.w	r6, r3, #16

		for(int j=0;j<NUM_OF_DATA_COLOURSENSOR;j++)
		{
			for(int i=0;i<(NUM_OF_DATA_COLOURSENSOR-1);i++)
			{
				if(RedColourSensorArray[i]>RedColourSensorArray[i+1])
 800318c:	e893 0090 	ldmia.w	r3, {r4, r7}
 8003190:	42bc      	cmp	r4, r7
				{
					unknown=RedColourSensorArray[i];
					RedColourSensorArray[i]=RedColourSensorArray[i+1];
					RedColourSensorArray[i+1]=unknown;
 8003192:	bf82      	ittt	hi
 8003194:	b2a4      	uxthhi	r4, r4
					RedColourSensorArray[i]=RedColourSensorArray[i+1];
 8003196:	601f      	strhi	r7, [r3, #0]
					RedColourSensorArray[i+1]=unknown;
 8003198:	605c      	strhi	r4, [r3, #4]
				}

				if(GreenColourSensorArray[i]>GreenColourSensorArray[i+1])
 800319a:	e892 0090 	ldmia.w	r2, {r4, r7}
 800319e:	42bc      	cmp	r4, r7
				{
					unknown=GreenColourSensorArray[i];
					GreenColourSensorArray[i]=GreenColourSensorArray[i+1];
					GreenColourSensorArray[i+1]=unknown;
 80031a0:	bf82      	ittt	hi
 80031a2:	b2a4      	uxthhi	r4, r4
					GreenColourSensorArray[i]=GreenColourSensorArray[i+1];
 80031a4:	6017      	strhi	r7, [r2, #0]
					GreenColourSensorArray[i+1]=unknown;
 80031a6:	6054      	strhi	r4, [r2, #4]
				}

				if(BlueColourSensorArray[i]>BlueColourSensorArray[i+1])
 80031a8:	e891 0090 	ldmia.w	r1, {r4, r7}
 80031ac:	42bc      	cmp	r4, r7
				{
					unknown=BlueColourSensorArray[i];
					BlueColourSensorArray[i]=BlueColourSensorArray[i+1];
					BlueColourSensorArray[i+1]=unknown;
 80031ae:	bf82      	ittt	hi
 80031b0:	b2a4      	uxthhi	r4, r4
					BlueColourSensorArray[i]=BlueColourSensorArray[i+1];
 80031b2:	600f      	strhi	r7, [r1, #0]
					BlueColourSensorArray[i+1]=unknown;
 80031b4:	604c      	strhi	r4, [r1, #4]
				}

				if(ClearColourSensorArray[i]>ClearColourSensorArray[i+1])
 80031b6:	e890 0090 	ldmia.w	r0, {r4, r7}
 80031ba:	42bc      	cmp	r4, r7
				{
					unknown=ClearColourSensorArray[i];
					ClearColourSensorArray[i]=ClearColourSensorArray[i+1];
					ClearColourSensorArray[i+1]=unknown;
 80031bc:	bf88      	it	hi
 80031be:	b2a4      	uxthhi	r4, r4
 80031c0:	f103 0304 	add.w	r3, r3, #4
					ClearColourSensorArray[i]=ClearColourSensorArray[i+1];
 80031c4:	bf84      	itt	hi
 80031c6:	6007      	strhi	r7, [r0, #0]
					ClearColourSensorArray[i+1]=unknown;
 80031c8:	6044      	strhi	r4, [r0, #4]
			for(int i=0;i<(NUM_OF_DATA_COLOURSENSOR-1);i++)
 80031ca:	429e      	cmp	r6, r3
 80031cc:	f100 0004 	add.w	r0, r0, #4
 80031d0:	f101 0104 	add.w	r1, r1, #4
 80031d4:	f102 0204 	add.w	r2, r2, #4
 80031d8:	d1d8      	bne.n	800318c <ArrangeColourSensorArrayValue+0x10>
		for(int j=0;j<NUM_OF_DATA_COLOURSENSOR;j++)
 80031da:	3d01      	subs	r5, #1
 80031dc:	d1d0      	bne.n	8003180 <ArrangeColourSensorArrayValue+0x4>
 80031de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031e0:	200000f0 	.word	0x200000f0
 80031e4:	20000130 	.word	0x20000130
 80031e8:	20000118 	.word	0x20000118
 80031ec:	200000c4 	.word	0x200000c4

080031f0 <PrereadingDateCollection>:
			}
		}
}

void PrereadingDateCollection(void)
{
 80031f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t placing=(NUM_OF_DATA_COLOURSENSOR/2);

	GainSensor();
 80031f4:	f7ff fe54 	bl	8002ea0 <GainSensor>

	for(int x=0;x<5;x++)
	{
		DataCollection();
		ColourSensorCalculation();
		RedColourSensorArray[x]=Red;
 80031f8:	f8df b078 	ldr.w	fp, [pc, #120]	; 8003274 <PrereadingDateCollection+0x84>
 80031fc:	4a19      	ldr	r2, [pc, #100]	; (8003264 <PrereadingDateCollection+0x74>)
		GreenColourSensorArray[x]=Green;
 80031fe:	f8df a078 	ldr.w	sl, [pc, #120]	; 8003278 <PrereadingDateCollection+0x88>
	for(int x=0;x<5;x++)
 8003202:	2400      	movs	r4, #0
 8003204:	9201      	str	r2, [sp, #4]
		GreenColourSensorArray[x]=Green;
 8003206:	f8df 9074 	ldr.w	r9, [pc, #116]	; 800327c <PrereadingDateCollection+0x8c>
		BlueColourSensorArray[x]=Blue;
 800320a:	4f17      	ldr	r7, [pc, #92]	; (8003268 <PrereadingDateCollection+0x78>)
 800320c:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8003280 <PrereadingDateCollection+0x90>
		ClearColourSensorArray[x]=Clear;
 8003210:	4d16      	ldr	r5, [pc, #88]	; (800326c <PrereadingDateCollection+0x7c>)
 8003212:	4e17      	ldr	r6, [pc, #92]	; (8003270 <PrereadingDateCollection+0x80>)
		DataCollection();
 8003214:	f7ff ff2e 	bl	8003074 <DataCollection>
		ColourSensorCalculation();
 8003218:	f7ff ff86 	bl	8003128 <ColourSensorCalculation>
		RedColourSensorArray[x]=Red;
 800321c:	9a01      	ldr	r2, [sp, #4]
 800321e:	f8db 3000 	ldr.w	r3, [fp]
 8003222:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		GreenColourSensorArray[x]=Green;
 8003226:	f8d9 3000 	ldr.w	r3, [r9]
 800322a:	f84a 3024 	str.w	r3, [sl, r4, lsl #2]
		BlueColourSensorArray[x]=Blue;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
		ClearColourSensorArray[x]=Clear;
 8003234:	682b      	ldr	r3, [r5, #0]
 8003236:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
	for(int x=0;x<5;x++)
 800323a:	3401      	adds	r4, #1
 800323c:	2c05      	cmp	r4, #5
 800323e:	d1e1      	bne.n	8003204 <PrereadingDateCollection+0x14>
	}

	ArrangeColourSensorArrayValue();
 8003240:	f7ff ff9c 	bl	800317c <ArrangeColourSensorArrayValue>

	Red=RedColourSensorArray[placing];
 8003244:	9a01      	ldr	r2, [sp, #4]
 8003246:	6893      	ldr	r3, [r2, #8]
 8003248:	f8cb 3000 	str.w	r3, [fp]
	Green=GreenColourSensorArray[placing];
 800324c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003250:	f8c9 3000 	str.w	r3, [r9]
	Blue=BlueColourSensorArray[placing];
 8003254:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003258:	603b      	str	r3, [r7, #0]
	Clear=ClearColourSensorArray[placing];
 800325a:	68b3      	ldr	r3, [r6, #8]
 800325c:	602b      	str	r3, [r5, #0]




}
 800325e:	b003      	add	sp, #12
 8003260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003264:	200000f0 	.word	0x200000f0
 8003268:	200000ec 	.word	0x200000ec
 800326c:	2000012c 	.word	0x2000012c
 8003270:	20000130 	.word	0x20000130
 8003274:	20000110 	.word	0x20000110
 8003278:	200000c4 	.word	0x200000c4
 800327c:	20000114 	.word	0x20000114
 8003280:	20000118 	.word	0x20000118

08003284 <ColourSensorMenu>:

void ColourSensorMenu(void)
{
 8003284:	b530      	push	{r4, r5, lr}

	PrereadingDateCollection();


	TransmitUart("/**********************Colour Sensor Menu**********************/\r\n");
	TransmitUart("*                                                             *\r\n");
 8003286:	4d3a      	ldr	r5, [pc, #232]	; (8003370 <ColourSensorMenu+0xec>)
	TransmitUart("* 5- Setting Blue Gain                                        *\r\n");
	TransmitUart("* 6- Setting Clear Gain                                       *\r\n");
	TransmitUart("* 7- Return To Main Menu                                      *\r\n");
	TransmitUart("* 8- Exit                                                     *\r\n");
	TransmitUart("*                                                             *\r\n");
	snprintf((char *)buffer,sizeof(buffer),"*      C:%02d    RG:%04d    GG:%04d    BG:%04d    CG:%04d       *\r\n",CapacitorValue, RedGain, GreenGain,BlueGain, ClearGain);
 8003288:	4c3a      	ldr	r4, [pc, #232]	; (8003374 <ColourSensorMenu+0xf0>)
{
 800328a:	b085      	sub	sp, #20
	PrereadingDateCollection();
 800328c:	f7ff ffb0 	bl	80031f0 <PrereadingDateCollection>
	TransmitUart("/**********************Colour Sensor Menu**********************/\r\n");
 8003290:	4839      	ldr	r0, [pc, #228]	; (8003378 <ColourSensorMenu+0xf4>)
 8003292:	f001 f83d 	bl	8004310 <TransmitUart>
	TransmitUart("*                                                             *\r\n");
 8003296:	4628      	mov	r0, r5
 8003298:	f001 f83a 	bl	8004310 <TransmitUart>
	TransmitUart("* 1- Enter Colour Sensor Mode                                 *\r\n");
 800329c:	4837      	ldr	r0, [pc, #220]	; (800337c <ColourSensorMenu+0xf8>)
 800329e:	f001 f837 	bl	8004310 <TransmitUart>
	TransmitUart("* 2- Setting Capacitor Value                                  *\r\n");
 80032a2:	4837      	ldr	r0, [pc, #220]	; (8003380 <ColourSensorMenu+0xfc>)
 80032a4:	f001 f834 	bl	8004310 <TransmitUart>
	TransmitUart("* 3- Setting Red Gain                                         *\r\n");
 80032a8:	4836      	ldr	r0, [pc, #216]	; (8003384 <ColourSensorMenu+0x100>)
 80032aa:	f001 f831 	bl	8004310 <TransmitUart>
	TransmitUart("* 4- Setting Green Gain                                       *\r\n");
 80032ae:	4836      	ldr	r0, [pc, #216]	; (8003388 <ColourSensorMenu+0x104>)
 80032b0:	f001 f82e 	bl	8004310 <TransmitUart>
	TransmitUart("* 5- Setting Blue Gain                                        *\r\n");
 80032b4:	4835      	ldr	r0, [pc, #212]	; (800338c <ColourSensorMenu+0x108>)
 80032b6:	f001 f82b 	bl	8004310 <TransmitUart>
	TransmitUart("* 6- Setting Clear Gain                                       *\r\n");
 80032ba:	4835      	ldr	r0, [pc, #212]	; (8003390 <ColourSensorMenu+0x10c>)
 80032bc:	f001 f828 	bl	8004310 <TransmitUart>
	TransmitUart("* 7- Return To Main Menu                                      *\r\n");
 80032c0:	4834      	ldr	r0, [pc, #208]	; (8003394 <ColourSensorMenu+0x110>)
 80032c2:	f001 f825 	bl	8004310 <TransmitUart>
	TransmitUart("* 8- Exit                                                     *\r\n");
 80032c6:	4834      	ldr	r0, [pc, #208]	; (8003398 <ColourSensorMenu+0x114>)
 80032c8:	f001 f822 	bl	8004310 <TransmitUart>
	TransmitUart("*                                                             *\r\n");
 80032cc:	4628      	mov	r0, r5
 80032ce:	f001 f81f 	bl	8004310 <TransmitUart>
	snprintf((char *)buffer,sizeof(buffer),"*      C:%02d    RG:%04d    GG:%04d    BG:%04d    CG:%04d       *\r\n",CapacitorValue, RedGain, GreenGain,BlueGain, ClearGain);
 80032d2:	4b32      	ldr	r3, [pc, #200]	; (800339c <ColourSensorMenu+0x118>)
 80032d4:	4a32      	ldr	r2, [pc, #200]	; (80033a0 <ColourSensorMenu+0x11c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	9303      	str	r3, [sp, #12]
 80032da:	4b32      	ldr	r3, [pc, #200]	; (80033a4 <ColourSensorMenu+0x120>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	9302      	str	r3, [sp, #8]
 80032e0:	4b31      	ldr	r3, [pc, #196]	; (80033a8 <ColourSensorMenu+0x124>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	9301      	str	r3, [sp, #4]
 80032e6:	4b31      	ldr	r3, [pc, #196]	; (80033ac <ColourSensorMenu+0x128>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	4b30      	ldr	r3, [pc, #192]	; (80033b0 <ColourSensorMenu+0x12c>)
 80032ee:	2164      	movs	r1, #100	; 0x64
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4620      	mov	r0, r4
 80032f4:	f001 fc42 	bl	8004b7c <sniprintf>
	TransmitUart((char *)buffer);
 80032f8:	4620      	mov	r0, r4
 80032fa:	f001 f809 	bl	8004310 <TransmitUart>
	TransmitUart("*                                                             *\r\n");
 80032fe:	4628      	mov	r0, r5
 8003300:	f001 f806 	bl	8004310 <TransmitUart>
	TransmitUart("*                                                             *\r\n");
 8003304:	4628      	mov	r0, r5
 8003306:	f001 f803 	bl	8004310 <TransmitUart>
	snprintf((char *)buffer,sizeof(buffer),"*     Red:%04d    Green:%04d    Blue:%04d     Clear:%04d       *\r\n", Red, Green,Blue, Clear);
 800330a:	4b2a      	ldr	r3, [pc, #168]	; (80033b4 <ColourSensorMenu+0x130>)
 800330c:	4a2a      	ldr	r2, [pc, #168]	; (80033b8 <ColourSensorMenu+0x134>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	9302      	str	r3, [sp, #8]
 8003312:	4b2a      	ldr	r3, [pc, #168]	; (80033bc <ColourSensorMenu+0x138>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	9301      	str	r3, [sp, #4]
 8003318:	4b29      	ldr	r3, [pc, #164]	; (80033c0 <ColourSensorMenu+0x13c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	4b29      	ldr	r3, [pc, #164]	; (80033c4 <ColourSensorMenu+0x140>)
 8003320:	2164      	movs	r1, #100	; 0x64
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4620      	mov	r0, r4
 8003326:	f001 fc29 	bl	8004b7c <sniprintf>
	TransmitUart((char *)buffer);
 800332a:	4620      	mov	r0, r4
 800332c:	f000 fff0 	bl	8004310 <TransmitUart>
	TransmitUart("*                                                             *\r\n");
 8003330:	4628      	mov	r0, r5
 8003332:	f000 ffed 	bl	8004310 <TransmitUart>
	TransmitUart("*                                                             *\r\n");
 8003336:	4628      	mov	r0, r5
 8003338:	f000 ffea 	bl	8004310 <TransmitUart>
	snprintf((char *)buffer,sizeof(buffer),"*               Time: %02d:%02d           Date: %02d/%02d             *\r\n",sTime.Hours,sTime.Minutes,sDate.Date,sDate.Month);
 800333c:	4922      	ldr	r1, [pc, #136]	; (80033c8 <ColourSensorMenu+0x144>)
 800333e:	4a23      	ldr	r2, [pc, #140]	; (80033cc <ColourSensorMenu+0x148>)
 8003340:	7848      	ldrb	r0, [r1, #1]
 8003342:	7813      	ldrb	r3, [r2, #0]
 8003344:	9002      	str	r0, [sp, #8]
 8003346:	7889      	ldrb	r1, [r1, #2]
 8003348:	9101      	str	r1, [sp, #4]
 800334a:	7852      	ldrb	r2, [r2, #1]
 800334c:	9200      	str	r2, [sp, #0]
 800334e:	2164      	movs	r1, #100	; 0x64
 8003350:	4a1f      	ldr	r2, [pc, #124]	; (80033d0 <ColourSensorMenu+0x14c>)
 8003352:	4620      	mov	r0, r4
 8003354:	f001 fc12 	bl	8004b7c <sniprintf>
	TransmitUart((char *)buffer);
 8003358:	4620      	mov	r0, r4
 800335a:	f000 ffd9 	bl	8004310 <TransmitUart>
	TransmitUart("/**************************************************************/\r\n\n");
 800335e:	481d      	ldr	r0, [pc, #116]	; (80033d4 <ColourSensorMenu+0x150>)
 8003360:	f000 ffd6 	bl	8004310 <TransmitUart>
	TransmitUart("Please Select...(Press enter after selection)\r\n\n");
 8003364:	481c      	ldr	r0, [pc, #112]	; (80033d8 <ColourSensorMenu+0x154>)
}
 8003366:	b005      	add	sp, #20
 8003368:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	TransmitUart("Please Select...(Press enter after selection)\r\n\n");
 800336c:	f000 bfd0 	b.w	8004310 <TransmitUart>
 8003370:	08005473 	.word	0x08005473
 8003374:	2000050c 	.word	0x2000050c
 8003378:	08005430 	.word	0x08005430
 800337c:	080054b5 	.word	0x080054b5
 8003380:	080054f7 	.word	0x080054f7
 8003384:	08005539 	.word	0x08005539
 8003388:	0800557b 	.word	0x0800557b
 800338c:	080055bd 	.word	0x080055bd
 8003390:	080055ff 	.word	0x080055ff
 8003394:	08005641 	.word	0x08005641
 8003398:	08005683 	.word	0x08005683
 800339c:	20000010 	.word	0x20000010
 80033a0:	080056c5 	.word	0x080056c5
 80033a4:	20000008 	.word	0x20000008
 80033a8:	20000014 	.word	0x20000014
 80033ac:	20000018 	.word	0x20000018
 80033b0:	2000000c 	.word	0x2000000c
 80033b4:	2000012c 	.word	0x2000012c
 80033b8:	08005709 	.word	0x08005709
 80033bc:	200000ec 	.word	0x200000ec
 80033c0:	20000114 	.word	0x20000114
 80033c4:	20000110 	.word	0x20000110
 80033c8:	20000570 	.word	0x20000570
 80033cc:	2000031c 	.word	0x2000031c
 80033d0:	0800574c 	.word	0x0800574c
 80033d4:	08005796 	.word	0x08005796
 80033d8:	080057da 	.word	0x080057da

080033dc <SelectionColourSensorUart>:

	SelectionColourSensorUart();
}

void SelectionColourSensorUart(void)
{
 80033dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 80033e0:	4826      	ldr	r0, [pc, #152]	; (800347c <SelectionColourSensorUart+0xa0>)
 80033e2:	f7fd ff8f 	bl	8001304 <HAL_I2C_GetState>
 80033e6:	2820      	cmp	r0, #32
 80033e8:	d004      	beq.n	80033f4 <SelectionColourSensorUart+0x18>
	{
		TransmitUart("Colour Sensor(I2C1) is not ready\r\n\r\n");
 80033ea:	4825      	ldr	r0, [pc, #148]	; (8003480 <SelectionColourSensorUart+0xa4>)
 80033ec:	f000 ff90 	bl	8004310 <TransmitUart>
		SelectionMenuUart();
 80033f0:	f001 fb2a 	bl	8004a48 <SelectionMenuUart>
	}

	ColourSensorMenu();
	exitFlag=0;
 80033f4:	4d23      	ldr	r5, [pc, #140]	; (8003484 <SelectionColourSensorUart+0xa8>)
	autoLogin=0;
 80033f6:	4c24      	ldr	r4, [pc, #144]	; (8003488 <SelectionColourSensorUart+0xac>)

	while(exitFlag==0)
	{
		ReceiveUart();
		menuSelection=recieveInputArray[EnterPlacement];
 80033f8:	4e24      	ldr	r6, [pc, #144]	; (800348c <SelectionColourSensorUart+0xb0>)
 80033fa:	4f25      	ldr	r7, [pc, #148]	; (8003490 <SelectionColourSensorUart+0xb4>)
 80033fc:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80034a0 <SelectionColourSensorUart+0xc4>
	ColourSensorMenu();
 8003400:	f7ff ff40 	bl	8003284 <ColourSensorMenu>
	exitFlag=0;
 8003404:	2100      	movs	r1, #0
 8003406:	7029      	strb	r1, [r5, #0]
	autoLogin=0;
 8003408:	7021      	strb	r1, [r4, #0]
	while(exitFlag==0)
 800340a:	782b      	ldrb	r3, [r5, #0]
 800340c:	b10b      	cbz	r3, 8003412 <SelectionColourSensorUart+0x36>
				SelectionColourSensorUart();
				break;
		}

	}
}
 800340e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ReceiveUart();
 8003412:	f000 ffdb 	bl	80043cc <ReceiveUart>
		menuSelection=recieveInputArray[EnterPlacement];
 8003416:	783b      	ldrb	r3, [r7, #0]
 8003418:	5cf3      	ldrb	r3, [r6, r3]
 800341a:	f888 3000 	strb.w	r3, [r8]
		switch(menuSelection)
 800341e:	3b31      	subs	r3, #49	; 0x31
 8003420:	2b07      	cmp	r3, #7
 8003422:	d81d      	bhi.n	8003460 <SelectionColourSensorUart+0x84>
 8003424:	e8df f003 	tbb	[pc, r3]
 8003428:	0d0a0704 	.word	0x0d0a0704
 800342c:	19161310 	.word	0x19161310
				ColourSensorMode();
 8003430:	f000 f838 	bl	80034a4 <ColourSensorMode>
				break;
 8003434:	e7e9      	b.n	800340a <SelectionColourSensorUart+0x2e>
				SettingCapacitor();
 8003436:	f000 f88d 	bl	8003554 <SettingCapacitor>
				break;
 800343a:	e7e6      	b.n	800340a <SelectionColourSensorUart+0x2e>
				SettingRedGain();
 800343c:	f000 f8ae 	bl	800359c <SettingRedGain>
				break;
 8003440:	e7e3      	b.n	800340a <SelectionColourSensorUart+0x2e>
				SettingGreenGain();
 8003442:	f000 f8f5 	bl	8003630 <SettingGreenGain>
				break;
 8003446:	e7e0      	b.n	800340a <SelectionColourSensorUart+0x2e>
				SettingBlueGain();
 8003448:	f000 f93c 	bl	80036c4 <SettingBlueGain>
				break;
 800344c:	e7dd      	b.n	800340a <SelectionColourSensorUart+0x2e>
				SettingClearGain();
 800344e:	f000 f983 	bl	8003758 <SettingClearGain>
				break;
 8003452:	e7da      	b.n	800340a <SelectionColourSensorUart+0x2e>
				SelectionMenuUart();
 8003454:	f001 faf8 	bl	8004a48 <SelectionMenuUart>
				break;
 8003458:	e7d7      	b.n	800340a <SelectionColourSensorUart+0x2e>
				SettingExit();
 800345a:	f001 facd 	bl	80049f8 <SettingExit>
				break;
 800345e:	e7d4      	b.n	800340a <SelectionColourSensorUart+0x2e>
				autoLogin=0;
 8003460:	2300      	movs	r3, #0
 8003462:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2,buffer,sizeof(buffer),100);
 8003464:	2364      	movs	r3, #100	; 0x64
 8003466:	461a      	mov	r2, r3
 8003468:	490a      	ldr	r1, [pc, #40]	; (8003494 <SelectionColourSensorUart+0xb8>)
 800346a:	480b      	ldr	r0, [pc, #44]	; (8003498 <SelectionColourSensorUart+0xbc>)
 800346c:	f7ff facf 	bl	8002a0e <HAL_UART_Transmit>
					TransmitUart("\r\nSorry your input is invalid. Please try again...\r\n\r\n\r\n\r\n");
 8003470:	480a      	ldr	r0, [pc, #40]	; (800349c <SelectionColourSensorUart+0xc0>)
 8003472:	f000 ff4d 	bl	8004310 <TransmitUart>
				SelectionColourSensorUart();
 8003476:	f7ff ffb1 	bl	80033dc <SelectionColourSensorUart>
				break;
 800347a:	e7c6      	b.n	800340a <SelectionColourSensorUart+0x2e>
 800347c:	200002d0 	.word	0x200002d0
 8003480:	08005af4 	.word	0x08005af4
 8003484:	200001c4 	.word	0x200001c4
 8003488:	200000a1 	.word	0x200000a1
 800348c:	20000148 	.word	0x20000148
 8003490:	200006eb 	.word	0x200006eb
 8003494:	2000050c 	.word	0x2000050c
 8003498:	20000624 	.word	0x20000624
 800349c:	08005b19 	.word	0x08005b19
 80034a0:	200006e9 	.word	0x200006e9

080034a4 <ColourSensorMode>:
{
 80034a4:	b500      	push	{lr}
	CapacitorSelection(CapacitorValue);
 80034a6:	4b20      	ldr	r3, [pc, #128]	; (8003528 <ColourSensorMode+0x84>)
		if(HAL_UART_Receive(&huart2,buffer,1,100)==HAL_OK)
 80034a8:	4c20      	ldr	r4, [pc, #128]	; (800352c <ColourSensorMode+0x88>)
	CapacitorSelection(CapacitorValue);
 80034aa:	8818      	ldrh	r0, [r3, #0]
		if(HAL_UART_Receive(&huart2,buffer,1,100)==HAL_OK)
 80034ac:	4e20      	ldr	r6, [pc, #128]	; (8003530 <ColourSensorMode+0x8c>)
{
 80034ae:	b089      	sub	sp, #36	; 0x24
	CapacitorSelection(CapacitorValue);
 80034b0:	f7ff fcc6 	bl	8002e40 <CapacitorSelection>
	GainSensor();
 80034b4:	f7ff fcf4 	bl	8002ea0 <GainSensor>
		if(secondFlag==1)
 80034b8:	4d1e      	ldr	r5, [pc, #120]	; (8003534 <ColourSensorMode+0x90>)
		if(HAL_UART_Receive(&huart2,buffer,1,100)==HAL_OK)
 80034ba:	491c      	ldr	r1, [pc, #112]	; (800352c <ColourSensorMode+0x88>)
 80034bc:	2364      	movs	r3, #100	; 0x64
 80034be:	2201      	movs	r2, #1
 80034c0:	4630      	mov	r0, r6
 80034c2:	f7ff fafd 	bl	8002ac0 <HAL_UART_Receive>
 80034c6:	b920      	cbnz	r0, 80034d2 <ColourSensorMode+0x2e>
			if(buffer[0]==ESC)
 80034c8:	7823      	ldrb	r3, [r4, #0]
 80034ca:	2b1b      	cmp	r3, #27
 80034cc:	d101      	bne.n	80034d2 <ColourSensorMode+0x2e>
				SelectionColourSensorUart();
 80034ce:	f7ff ff85 	bl	80033dc <SelectionColourSensorUart>
		if(secondFlag==1)
 80034d2:	782b      	ldrb	r3, [r5, #0]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d1f0      	bne.n	80034ba <ColourSensorMode+0x16>
			DataCollection();
 80034d8:	f7ff fdcc 	bl	8003074 <DataCollection>
			ColourSensorCalculation();
 80034dc:	f7ff fe24 	bl	8003128 <ColourSensorCalculation>
			snprintf((char *)buffer, sizeof(buffer),"%02d/%02d, %02d:%02d, Red:%04d, Green: %04d, Blue:%04d, Clear:%04d\r\n",sDate.Date, sDate.Month, sTime.Hours, sTime.Minutes, Red, Green, Blue, Clear);
 80034e0:	4915      	ldr	r1, [pc, #84]	; (8003538 <ColourSensorMode+0x94>)
 80034e2:	4a16      	ldr	r2, [pc, #88]	; (800353c <ColourSensorMode+0x98>)
 80034e4:	6809      	ldr	r1, [r1, #0]
 80034e6:	7893      	ldrb	r3, [r2, #2]
 80034e8:	9106      	str	r1, [sp, #24]
 80034ea:	4915      	ldr	r1, [pc, #84]	; (8003540 <ColourSensorMode+0x9c>)
 80034ec:	6809      	ldr	r1, [r1, #0]
 80034ee:	9105      	str	r1, [sp, #20]
 80034f0:	4914      	ldr	r1, [pc, #80]	; (8003544 <ColourSensorMode+0xa0>)
 80034f2:	6809      	ldr	r1, [r1, #0]
 80034f4:	9104      	str	r1, [sp, #16]
 80034f6:	4914      	ldr	r1, [pc, #80]	; (8003548 <ColourSensorMode+0xa4>)
 80034f8:	6809      	ldr	r1, [r1, #0]
 80034fa:	9103      	str	r1, [sp, #12]
 80034fc:	4913      	ldr	r1, [pc, #76]	; (800354c <ColourSensorMode+0xa8>)
 80034fe:	7848      	ldrb	r0, [r1, #1]
 8003500:	9002      	str	r0, [sp, #8]
 8003502:	7809      	ldrb	r1, [r1, #0]
 8003504:	9101      	str	r1, [sp, #4]
 8003506:	7852      	ldrb	r2, [r2, #1]
 8003508:	9200      	str	r2, [sp, #0]
 800350a:	2164      	movs	r1, #100	; 0x64
 800350c:	4a10      	ldr	r2, [pc, #64]	; (8003550 <ColourSensorMode+0xac>)
 800350e:	4620      	mov	r0, r4
 8003510:	f001 fb34 	bl	8004b7c <sniprintf>
			HAL_UART_Transmit(&huart2,buffer,sizeof(buffer),100);
 8003514:	2364      	movs	r3, #100	; 0x64
 8003516:	461a      	mov	r2, r3
 8003518:	4621      	mov	r1, r4
 800351a:	4630      	mov	r0, r6
 800351c:	f7ff fa77 	bl	8002a0e <HAL_UART_Transmit>
			secondFlag=0;
 8003520:	2300      	movs	r3, #0
 8003522:	702b      	strb	r3, [r5, #0]
 8003524:	e7c8      	b.n	80034b8 <ColourSensorMode+0x14>
 8003526:	bf00      	nop
 8003528:	2000000c 	.word	0x2000000c
 800352c:	2000050c 	.word	0x2000050c
 8003530:	20000624 	.word	0x20000624
 8003534:	200006ea 	.word	0x200006ea
 8003538:	2000012c 	.word	0x2000012c
 800353c:	20000570 	.word	0x20000570
 8003540:	200000ec 	.word	0x200000ec
 8003544:	20000114 	.word	0x20000114
 8003548:	20000110 	.word	0x20000110
 800354c:	2000031c 	.word	0x2000031c
 8003550:	0800580b 	.word	0x0800580b

08003554 <SettingCapacitor>:
{
 8003554:	b510      	push	{r4, lr}
	CapacitorSelection(CapacitorValue);
 8003556:	4c0d      	ldr	r4, [pc, #52]	; (800358c <SettingCapacitor+0x38>)
	autoLogin=0;
 8003558:	4b0d      	ldr	r3, [pc, #52]	; (8003590 <SettingCapacitor+0x3c>)
	CapacitorSelection(CapacitorValue);
 800355a:	8820      	ldrh	r0, [r4, #0]
	autoLogin=0;
 800355c:	2200      	movs	r2, #0
 800355e:	701a      	strb	r2, [r3, #0]
	CapacitorSelection(CapacitorValue);
 8003560:	f7ff fc6e 	bl	8002e40 <CapacitorSelection>
	TransmitUart("\r\nPlease enter the new Capacitor value from 0 to 15.\r\n\r\n");
 8003564:	480b      	ldr	r0, [pc, #44]	; (8003594 <SettingCapacitor+0x40>)
 8003566:	f000 fed3 	bl	8004310 <TransmitUart>
	CapacitorValue= RecieveUartCalculationValue();
 800356a:	f000 ffa5 	bl	80044b8 <RecieveUartCalculationValue>
	if(CapacitorValue<0 || CapacitorValue>15)
 800356e:	280f      	cmp	r0, #15
	CapacitorValue= RecieveUartCalculationValue();
 8003570:	6020      	str	r0, [r4, #0]
	if(CapacitorValue<0 || CapacitorValue>15)
 8003572:	d904      	bls.n	800357e <SettingCapacitor+0x2a>
		TransmitUart("\r\n\r\nSorry your input is invaild...\r\n\r\n");
 8003574:	4808      	ldr	r0, [pc, #32]	; (8003598 <SettingCapacitor+0x44>)
 8003576:	f000 fecb 	bl	8004310 <TransmitUart>
		SettingCapacitor();
 800357a:	f7ff ffeb 	bl	8003554 <SettingCapacitor>
	CapacitorSelection(CapacitorValue);
 800357e:	8820      	ldrh	r0, [r4, #0]
 8003580:	f7ff fc5e 	bl	8002e40 <CapacitorSelection>
}
 8003584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SelectionColourSensorUart();
 8003588:	f7ff bf28 	b.w	80033dc <SelectionColourSensorUart>
 800358c:	2000000c 	.word	0x2000000c
 8003590:	200000a1 	.word	0x200000a1
 8003594:	08005bd9 	.word	0x08005bd9
 8003598:	08005c12 	.word	0x08005c12

0800359c <SettingRedGain>:
{
 800359c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	TransmitUart("PLease enter the Red gain:(0-4095)\r\n\r\n");
 800359e:	481c      	ldr	r0, [pc, #112]	; (8003610 <SettingRedGain+0x74>)
	RedGain= RecieveUartCalculationValue();
 80035a0:	4d1c      	ldr	r5, [pc, #112]	; (8003614 <SettingRedGain+0x78>)
	TransmitUart("PLease enter the Red gain:(0-4095)\r\n\r\n");
 80035a2:	f000 feb5 	bl	8004310 <TransmitUart>
	RedGain= RecieveUartCalculationValue();
 80035a6:	f000 ff87 	bl	80044b8 <RecieveUartCalculationValue>
	if(RedGain<0 || RedGain>4096)
 80035aa:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	RedGain= RecieveUartCalculationValue();
 80035ae:	6028      	str	r0, [r5, #0]
	if(RedGain<0 || RedGain>4096)
 80035b0:	d904      	bls.n	80035bc <SettingRedGain+0x20>
		TransmitUart("\r\n\r\nSorry your input is out of range...\r\n\r\n");
 80035b2:	4819      	ldr	r0, [pc, #100]	; (8003618 <SettingRedGain+0x7c>)
 80035b4:	f000 feac 	bl	8004310 <TransmitUart>
		SettingRedGain();
 80035b8:	f7ff fff0 	bl	800359c <SettingRedGain>
    bufferColourSensor[0]= RedGain & 0x00FF;
 80035bc:	4c17      	ldr	r4, [pc, #92]	; (800361c <SettingRedGain+0x80>)
 80035be:	682b      	ldr	r3, [r5, #0]
 80035c0:	7023      	strb	r3, [r4, #0]
    if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 80035c2:	2364      	movs	r3, #100	; 0x64
    address= INT_RED_LO;                                                            //Select value range (Sensor gain)
 80035c4:	4e16      	ldr	r6, [pc, #88]	; (8003620 <SettingRedGain+0x84>)
    if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 80035c6:	9302      	str	r3, [sp, #8]
 80035c8:	2301      	movs	r3, #1
    address= INT_RED_LO;                                                            //Select value range (Sensor gain)
 80035ca:	220a      	movs	r2, #10
    if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 80035cc:	9301      	str	r3, [sp, #4]
 80035ce:	9400      	str	r4, [sp, #0]
 80035d0:	21e8      	movs	r1, #232	; 0xe8
 80035d2:	4814      	ldr	r0, [pc, #80]	; (8003624 <SettingRedGain+0x88>)
    address= INT_RED_LO;                                                            //Select value range (Sensor gain)
 80035d4:	6032      	str	r2, [r6, #0]
    if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 80035d6:	f7fd fd1f 	bl	8001018 <HAL_I2C_Mem_Write>
 80035da:	b910      	cbnz	r0, 80035e2 <SettingRedGain+0x46>
    			TransmitUart("Red Gain of the Colour Sensor is set(LOW)!\r\n");
 80035dc:	4812      	ldr	r0, [pc, #72]	; (8003628 <SettingRedGain+0x8c>)
 80035de:	f000 fe97 	bl	8004310 <TransmitUart>
    bufferColourSensor[0]= (RedGain>>8)& 0x00FF;
 80035e2:	682b      	ldr	r3, [r5, #0]
    if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 80035e4:	9400      	str	r4, [sp, #0]
    bufferColourSensor[0]= (RedGain>>8)& 0x00FF;
 80035e6:	0a1b      	lsrs	r3, r3, #8
 80035e8:	7023      	strb	r3, [r4, #0]
    if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 80035ea:	2364      	movs	r3, #100	; 0x64
 80035ec:	9302      	str	r3, [sp, #8]
 80035ee:	2301      	movs	r3, #1
    address= INT_RED_HI;
 80035f0:	220b      	movs	r2, #11
    if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 80035f2:	9301      	str	r3, [sp, #4]
 80035f4:	21e8      	movs	r1, #232	; 0xe8
 80035f6:	480b      	ldr	r0, [pc, #44]	; (8003624 <SettingRedGain+0x88>)
    address= INT_RED_HI;
 80035f8:	6032      	str	r2, [r6, #0]
    if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 80035fa:	f7fd fd0d 	bl	8001018 <HAL_I2C_Mem_Write>
 80035fe:	b910      	cbnz	r0, 8003606 <SettingRedGain+0x6a>
    			TransmitUart("Red Gain of the Colour Sensor is set(HIGH)!\r\n");
 8003600:	480a      	ldr	r0, [pc, #40]	; (800362c <SettingRedGain+0x90>)
 8003602:	f000 fe85 	bl	8004310 <TransmitUart>
}
 8003606:	b004      	add	sp, #16
 8003608:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SelectionColourSensorUart();
 800360c:	f7ff bee6 	b.w	80033dc <SelectionColourSensorUart>
 8003610:	08005d49 	.word	0x08005d49
 8003614:	20000018 	.word	0x20000018
 8003618:	08005d70 	.word	0x08005d70
 800361c:	200000d8 	.word	0x200000d8
 8003620:	200000c0 	.word	0x200000c0
 8003624:	200002d0 	.word	0x200002d0
 8003628:	08005d9c 	.word	0x08005d9c
 800362c:	08005dc9 	.word	0x08005dc9

08003630 <SettingGreenGain>:
{
 8003630:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	TransmitUart("PLease enter the Green gain:(0-4095)\r\n\r\n");
 8003632:	481c      	ldr	r0, [pc, #112]	; (80036a4 <SettingGreenGain+0x74>)
	GreenGain= RecieveUartCalculationValue();
 8003634:	4d1c      	ldr	r5, [pc, #112]	; (80036a8 <SettingGreenGain+0x78>)
	TransmitUart("PLease enter the Green gain:(0-4095)\r\n\r\n");
 8003636:	f000 fe6b 	bl	8004310 <TransmitUart>
	GreenGain= RecieveUartCalculationValue();
 800363a:	f000 ff3d 	bl	80044b8 <RecieveUartCalculationValue>
	if(GreenGain<0 || GreenGain>4096)
 800363e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	GreenGain= RecieveUartCalculationValue();
 8003642:	6028      	str	r0, [r5, #0]
	if(GreenGain<0 || GreenGain>4096)
 8003644:	d904      	bls.n	8003650 <SettingGreenGain+0x20>
		TransmitUart("\r\n\r\nSorry your input is out of range...\r\n\r\n");
 8003646:	4819      	ldr	r0, [pc, #100]	; (80036ac <SettingGreenGain+0x7c>)
 8003648:	f000 fe62 	bl	8004310 <TransmitUart>
		SettingGreenGain();
 800364c:	f7ff fff0 	bl	8003630 <SettingGreenGain>
	bufferColourSensor[0]= GreenGain & 0x00FF;
 8003650:	4c17      	ldr	r4, [pc, #92]	; (80036b0 <SettingGreenGain+0x80>)
 8003652:	682b      	ldr	r3, [r5, #0]
 8003654:	7023      	strb	r3, [r4, #0]
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 8003656:	2364      	movs	r3, #100	; 0x64
	address= INT_GREEN_LO;                                                            //Select value range (Sensor gain)
 8003658:	4e16      	ldr	r6, [pc, #88]	; (80036b4 <SettingGreenGain+0x84>)
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 800365a:	9302      	str	r3, [sp, #8]
 800365c:	2301      	movs	r3, #1
	address= INT_GREEN_LO;                                                            //Select value range (Sensor gain)
 800365e:	220c      	movs	r2, #12
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 8003660:	9301      	str	r3, [sp, #4]
 8003662:	9400      	str	r4, [sp, #0]
 8003664:	21e8      	movs	r1, #232	; 0xe8
 8003666:	4814      	ldr	r0, [pc, #80]	; (80036b8 <SettingGreenGain+0x88>)
	address= INT_GREEN_LO;                                                            //Select value range (Sensor gain)
 8003668:	6032      	str	r2, [r6, #0]
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 800366a:	f7fd fcd5 	bl	8001018 <HAL_I2C_Mem_Write>
 800366e:	b910      	cbnz	r0, 8003676 <SettingGreenGain+0x46>
				TransmitUart("Green Gain of the Colour Sensor is set(LOW)!\r\n");
 8003670:	4812      	ldr	r0, [pc, #72]	; (80036bc <SettingGreenGain+0x8c>)
 8003672:	f000 fe4d 	bl	8004310 <TransmitUart>
	bufferColourSensor[0]= (GreenGain>>8)& 0x00FF;
 8003676:	682b      	ldr	r3, [r5, #0]
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 8003678:	9400      	str	r4, [sp, #0]
	bufferColourSensor[0]= (GreenGain>>8)& 0x00FF;
 800367a:	0a1b      	lsrs	r3, r3, #8
 800367c:	7023      	strb	r3, [r4, #0]
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 800367e:	2364      	movs	r3, #100	; 0x64
 8003680:	9302      	str	r3, [sp, #8]
 8003682:	2301      	movs	r3, #1
	address= INT_GREEN_HI;
 8003684:	220d      	movs	r2, #13
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 8003686:	9301      	str	r3, [sp, #4]
 8003688:	21e8      	movs	r1, #232	; 0xe8
 800368a:	480b      	ldr	r0, [pc, #44]	; (80036b8 <SettingGreenGain+0x88>)
	address= INT_GREEN_HI;
 800368c:	6032      	str	r2, [r6, #0]
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 800368e:	f7fd fcc3 	bl	8001018 <HAL_I2C_Mem_Write>
 8003692:	b910      	cbnz	r0, 800369a <SettingGreenGain+0x6a>
				TransmitUart("Green Gain of the Colour Sensor is set(HIGH)!\r\n");
 8003694:	480a      	ldr	r0, [pc, #40]	; (80036c0 <SettingGreenGain+0x90>)
 8003696:	f000 fe3b 	bl	8004310 <TransmitUart>
}
 800369a:	b004      	add	sp, #16
 800369c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SelectionColourSensorUart();
 80036a0:	f7ff be9c 	b.w	80033dc <SelectionColourSensorUart>
 80036a4:	08005cc1 	.word	0x08005cc1
 80036a8:	20000014 	.word	0x20000014
 80036ac:	08005d70 	.word	0x08005d70
 80036b0:	200000d8 	.word	0x200000d8
 80036b4:	200000c0 	.word	0x200000c0
 80036b8:	200002d0 	.word	0x200002d0
 80036bc:	08005cea 	.word	0x08005cea
 80036c0:	08005d19 	.word	0x08005d19

080036c4 <SettingBlueGain>:
{
 80036c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	TransmitUart("PLease enter the Blue gain:(0-4095)\r\n\r\n");
 80036c6:	481c      	ldr	r0, [pc, #112]	; (8003738 <SettingBlueGain+0x74>)
	BlueGain= RecieveUartCalculationValue();
 80036c8:	4d1c      	ldr	r5, [pc, #112]	; (800373c <SettingBlueGain+0x78>)
	TransmitUart("PLease enter the Blue gain:(0-4095)\r\n\r\n");
 80036ca:	f000 fe21 	bl	8004310 <TransmitUart>
	BlueGain= RecieveUartCalculationValue();
 80036ce:	f000 fef3 	bl	80044b8 <RecieveUartCalculationValue>
	if(BlueGain<0 || BlueGain>4096)
 80036d2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	BlueGain= RecieveUartCalculationValue();
 80036d6:	6028      	str	r0, [r5, #0]
	if(BlueGain<0 || BlueGain>4096)
 80036d8:	d904      	bls.n	80036e4 <SettingBlueGain+0x20>
		TransmitUart("\r\n\r\nSorry your input is out of range...\r\n\r\n");
 80036da:	4819      	ldr	r0, [pc, #100]	; (8003740 <SettingBlueGain+0x7c>)
 80036dc:	f000 fe18 	bl	8004310 <TransmitUart>
		SettingBlueGain();
 80036e0:	f7ff fff0 	bl	80036c4 <SettingBlueGain>
	bufferColourSensor[0]= BlueGain & 0x00FF;
 80036e4:	4c17      	ldr	r4, [pc, #92]	; (8003744 <SettingBlueGain+0x80>)
 80036e6:	682b      	ldr	r3, [r5, #0]
 80036e8:	7023      	strb	r3, [r4, #0]
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 80036ea:	2364      	movs	r3, #100	; 0x64
	address= INT_BLUE_LO;                                                            //Select value range (Sensor gain)
 80036ec:	4e16      	ldr	r6, [pc, #88]	; (8003748 <SettingBlueGain+0x84>)
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 80036ee:	9302      	str	r3, [sp, #8]
 80036f0:	2301      	movs	r3, #1
	address= INT_BLUE_LO;                                                            //Select value range (Sensor gain)
 80036f2:	220e      	movs	r2, #14
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 80036f4:	9301      	str	r3, [sp, #4]
 80036f6:	9400      	str	r4, [sp, #0]
 80036f8:	21e8      	movs	r1, #232	; 0xe8
 80036fa:	4814      	ldr	r0, [pc, #80]	; (800374c <SettingBlueGain+0x88>)
	address= INT_BLUE_LO;                                                            //Select value range (Sensor gain)
 80036fc:	6032      	str	r2, [r6, #0]
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 80036fe:	f7fd fc8b 	bl	8001018 <HAL_I2C_Mem_Write>
 8003702:	b910      	cbnz	r0, 800370a <SettingBlueGain+0x46>
				TransmitUart("Blue Gain of the Colour Sensor is set(LOW)!\r\n");
 8003704:	4812      	ldr	r0, [pc, #72]	; (8003750 <SettingBlueGain+0x8c>)
 8003706:	f000 fe03 	bl	8004310 <TransmitUart>
	bufferColourSensor[0]= (BlueGain>>8)& 0x00FF;
 800370a:	682b      	ldr	r3, [r5, #0]
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 800370c:	9400      	str	r4, [sp, #0]
	bufferColourSensor[0]= (BlueGain>>8)& 0x00FF;
 800370e:	0a1b      	lsrs	r3, r3, #8
 8003710:	7023      	strb	r3, [r4, #0]
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 8003712:	2364      	movs	r3, #100	; 0x64
 8003714:	9302      	str	r3, [sp, #8]
 8003716:	2301      	movs	r3, #1
	address= INT_BLUE_HI;
 8003718:	220f      	movs	r2, #15
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 800371a:	9301      	str	r3, [sp, #4]
 800371c:	21e8      	movs	r1, #232	; 0xe8
 800371e:	480b      	ldr	r0, [pc, #44]	; (800374c <SettingBlueGain+0x88>)
	address= INT_BLUE_HI;
 8003720:	6032      	str	r2, [r6, #0]
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 8003722:	f7fd fc79 	bl	8001018 <HAL_I2C_Mem_Write>
 8003726:	b910      	cbnz	r0, 800372e <SettingBlueGain+0x6a>
				TransmitUart("Blue Gain of the Colour Sensor is set(HIGH)!\r\n");
 8003728:	480a      	ldr	r0, [pc, #40]	; (8003754 <SettingBlueGain+0x90>)
 800372a:	f000 fdf1 	bl	8004310 <TransmitUart>
}
 800372e:	b004      	add	sp, #16
 8003730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SelectionColourSensorUart();
 8003734:	f7ff be52 	b.w	80033dc <SelectionColourSensorUart>
 8003738:	08005b54 	.word	0x08005b54
 800373c:	20000008 	.word	0x20000008
 8003740:	08005d70 	.word	0x08005d70
 8003744:	200000d8 	.word	0x200000d8
 8003748:	200000c0 	.word	0x200000c0
 800374c:	200002d0 	.word	0x200002d0
 8003750:	08005b7c 	.word	0x08005b7c
 8003754:	08005baa 	.word	0x08005baa

08003758 <SettingClearGain>:
{
 8003758:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	TransmitUart("Please enter the Clear gain:(0-4095)\r\n\r\n");
 800375a:	481c      	ldr	r0, [pc, #112]	; (80037cc <SettingClearGain+0x74>)
	ClearGain= RecieveUartCalculationValue();
 800375c:	4d1c      	ldr	r5, [pc, #112]	; (80037d0 <SettingClearGain+0x78>)
	TransmitUart("Please enter the Clear gain:(0-4095)\r\n\r\n");
 800375e:	f000 fdd7 	bl	8004310 <TransmitUart>
	ClearGain= RecieveUartCalculationValue();
 8003762:	f000 fea9 	bl	80044b8 <RecieveUartCalculationValue>
	if(ClearGain<0 || ClearGain>4096)
 8003766:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	ClearGain= RecieveUartCalculationValue();
 800376a:	6028      	str	r0, [r5, #0]
	if(ClearGain<0 || ClearGain>4096)
 800376c:	d904      	bls.n	8003778 <SettingClearGain+0x20>
		TransmitUart("\r\n\r\nSorry your input is out of range...\r\n\r\n");
 800376e:	4819      	ldr	r0, [pc, #100]	; (80037d4 <SettingClearGain+0x7c>)
 8003770:	f000 fdce 	bl	8004310 <TransmitUart>
		SettingClearGain();
 8003774:	f7ff fff0 	bl	8003758 <SettingClearGain>
	bufferColourSensor[0]= ClearGain & 0x00FF;
 8003778:	4c17      	ldr	r4, [pc, #92]	; (80037d8 <SettingClearGain+0x80>)
 800377a:	682b      	ldr	r3, [r5, #0]
 800377c:	7023      	strb	r3, [r4, #0]
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 800377e:	2364      	movs	r3, #100	; 0x64
	address= INT_CLEAR_LO;                                                            //Select value range (Sensor gain)
 8003780:	4e16      	ldr	r6, [pc, #88]	; (80037dc <SettingClearGain+0x84>)
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 8003782:	9302      	str	r3, [sp, #8]
 8003784:	2301      	movs	r3, #1
	address= INT_CLEAR_LO;                                                            //Select value range (Sensor gain)
 8003786:	2210      	movs	r2, #16
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 8003788:	9301      	str	r3, [sp, #4]
 800378a:	9400      	str	r4, [sp, #0]
 800378c:	21e8      	movs	r1, #232	; 0xe8
 800378e:	4814      	ldr	r0, [pc, #80]	; (80037e0 <SettingClearGain+0x88>)
	address= INT_CLEAR_LO;                                                            //Select value range (Sensor gain)
 8003790:	6032      	str	r2, [r6, #0]
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 8003792:	f7fd fc41 	bl	8001018 <HAL_I2C_Mem_Write>
 8003796:	b910      	cbnz	r0, 800379e <SettingClearGain+0x46>
				TransmitUart("Clear Gain of the Colour Sensor is set(LOW)!\r\n");
 8003798:	4812      	ldr	r0, [pc, #72]	; (80037e4 <SettingClearGain+0x8c>)
 800379a:	f000 fdb9 	bl	8004310 <TransmitUart>
	bufferColourSensor[0]= (ClearGain>>8)& 0x00FF;
 800379e:	682b      	ldr	r3, [r5, #0]
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 80037a0:	9400      	str	r4, [sp, #0]
	bufferColourSensor[0]= (ClearGain>>8)& 0x00FF;
 80037a2:	0a1b      	lsrs	r3, r3, #8
 80037a4:	7023      	strb	r3, [r4, #0]
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 80037a6:	2364      	movs	r3, #100	; 0x64
 80037a8:	9302      	str	r3, [sp, #8]
 80037aa:	2301      	movs	r3, #1
	address= INT_CLEAR_HI;
 80037ac:	2211      	movs	r2, #17
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 80037ae:	9301      	str	r3, [sp, #4]
 80037b0:	21e8      	movs	r1, #232	; 0xe8
 80037b2:	480b      	ldr	r0, [pc, #44]	; (80037e0 <SettingClearGain+0x88>)
	address= INT_CLEAR_HI;
 80037b4:	6032      	str	r2, [r6, #0]
	if(HAL_I2C_Mem_Write(&hi2c1, COLOUR_SENSOR<<1, address, 1, bufferColourSensor, 1, 100)==HAL_OK)
 80037b6:	f7fd fc2f 	bl	8001018 <HAL_I2C_Mem_Write>
 80037ba:	b910      	cbnz	r0, 80037c2 <SettingClearGain+0x6a>
				TransmitUart("Clear Gain of the Colour Sensor is set(HIGH)!\r\n");
 80037bc:	480a      	ldr	r0, [pc, #40]	; (80037e8 <SettingClearGain+0x90>)
 80037be:	f000 fda7 	bl	8004310 <TransmitUart>
}
 80037c2:	b004      	add	sp, #16
 80037c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SelectionColourSensorUart();
 80037c8:	f7ff be08 	b.w	80033dc <SelectionColourSensorUart>
 80037cc:	08005c39 	.word	0x08005c39
 80037d0:	20000010 	.word	0x20000010
 80037d4:	08005d70 	.word	0x08005d70
 80037d8:	200000d8 	.word	0x200000d8
 80037dc:	200000c0 	.word	0x200000c0
 80037e0:	200002d0 	.word	0x200002d0
 80037e4:	08005c62 	.word	0x08005c62
 80037e8:	08005c91 	.word	0x08005c91

080037ec <HAL_SYSTICK_Callback>:
extern void SelectionMenuUart(void);
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_SYSTICK_Callback(void)
{
 80037ec:	b510      	push	{r4, lr}
	mSecondCount++;
 80037ee:	4c17      	ldr	r4, [pc, #92]	; (800384c <HAL_SYSTICK_Callback+0x60>)
 80037f0:	8822      	ldrh	r2, [r4, #0]
 80037f2:	3201      	adds	r2, #1
 80037f4:	b292      	uxth	r2, r2

		if(mSecondCount == 500)
 80037f6:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
	mSecondCount++;
 80037fa:	8022      	strh	r2, [r4, #0]
		if(mSecondCount == 500)
 80037fc:	d107      	bne.n	800380e <HAL_SYSTICK_Callback+0x22>
		{
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80037fe:	2120      	movs	r1, #32
 8003800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003804:	f7fd fa6d 	bl	8000ce2 <HAL_GPIO_TogglePin>
			halfSecondFlag=1;
 8003808:	4b11      	ldr	r3, [pc, #68]	; (8003850 <HAL_SYSTICK_Callback+0x64>)
 800380a:	2201      	movs	r2, #1
 800380c:	701a      	strb	r2, [r3, #0]
		}

		if(mSecondCount == 1000)
 800380e:	8823      	ldrh	r3, [r4, #0]
 8003810:	4a10      	ldr	r2, [pc, #64]	; (8003854 <HAL_SYSTICK_Callback+0x68>)
 8003812:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003816:	d104      	bne.n	8003822 <HAL_SYSTICK_Callback+0x36>
		{
			secondCount++;
 8003818:	8813      	ldrh	r3, [r2, #0]
 800381a:	3301      	adds	r3, #1
 800381c:	8013      	strh	r3, [r2, #0]
			mSecondCount=0;
 800381e:	2300      	movs	r3, #0
 8003820:	8023      	strh	r3, [r4, #0]
		}

		if(secondCount == 1)
 8003822:	8810      	ldrh	r0, [r2, #0]
 8003824:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <HAL_SYSTICK_Callback+0x6c>)
 8003826:	2801      	cmp	r0, #1
 8003828:	d106      	bne.n	8003838 <HAL_SYSTICK_Callback+0x4c>
		{
			fiveSecondCount++;
 800382a:	8819      	ldrh	r1, [r3, #0]
 800382c:	3101      	adds	r1, #1
 800382e:	8019      	strh	r1, [r3, #0]
			secondFlag=1;
 8003830:	490a      	ldr	r1, [pc, #40]	; (800385c <HAL_SYSTICK_Callback+0x70>)
 8003832:	7008      	strb	r0, [r1, #0]
			secondCount=0;
 8003834:	2100      	movs	r1, #0
 8003836:	8011      	strh	r1, [r2, #0]
		}

		if(fiveSecondCount == 5)
 8003838:	881a      	ldrh	r2, [r3, #0]
 800383a:	2a05      	cmp	r2, #5
 800383c:	d104      	bne.n	8003848 <HAL_SYSTICK_Callback+0x5c>
		{
			fiveSecondFlag=1;
 800383e:	4a08      	ldr	r2, [pc, #32]	; (8003860 <HAL_SYSTICK_Callback+0x74>)
 8003840:	2101      	movs	r1, #1
 8003842:	7011      	strb	r1, [r2, #0]
			fiveSecondCount=0;
 8003844:	2200      	movs	r2, #0
 8003846:	801a      	strh	r2, [r3, #0]
 8003848:	bd10      	pop	{r4, pc}
 800384a:	bf00      	nop
 800384c:	200000a4 	.word	0x200000a4
 8003850:	200005ac 	.word	0x200005ac
 8003854:	200000a6 	.word	0x200000a6
 8003858:	200000a2 	.word	0x200000a2
 800385c:	200006ea 	.word	0x200006ea
 8003860:	2000037e 	.word	0x2000037e

08003864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003864:	b510      	push	{r4, lr}
 8003866:	b0a6      	sub	sp, #152	; 0x98
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure LSE Drive Capability 
    */
  HAL_PWR_EnableBkUpAccess();
 8003868:	f7fd fd9a 	bl	80013a0 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800386c:	4a29      	ldr	r2, [pc, #164]	; (8003914 <SystemClock_Config+0xb0>)
 800386e:	6a13      	ldr	r3, [r2, #32]
 8003870:	f023 0318 	bic.w	r3, r3, #24
 8003874:	6213      	str	r3, [r2, #32]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8003876:	2306      	movs	r3, #6
 8003878:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800387a:	2301      	movs	r3, #1
 800387c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800387e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003880:	2310      	movs	r3, #16
 8003882:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003884:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003888:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800388a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800388e:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003890:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003892:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003894:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003896:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003898:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800389a:	f7fd fd89 	bl	80013b0 <HAL_RCC_OscConfig>
 800389e:	b100      	cbz	r0, 80038a2 <SystemClock_Config+0x3e>
 80038a0:	e7fe      	b.n	80038a0 <SystemClock_Config+0x3c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038a2:	230f      	movs	r3, #15
 80038a4:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038a6:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80038a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038ac:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80038ae:	4621      	mov	r1, r4
 80038b0:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038b2:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80038b4:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80038b6:	f7fe f829 	bl	800190c <HAL_RCC_ClockConfig>
 80038ba:	b100      	cbz	r0, 80038be <SystemClock_Config+0x5a>
 80038bc:	e7fe      	b.n	80038bc <SystemClock_Config+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80038be:	4b16      	ldr	r3, [pc, #88]	; (8003918 <SystemClock_Config+0xb4>)
 80038c0:	9310      	str	r3, [sp, #64]	; 0x40
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80038c2:	9012      	str	r0, [sp, #72]	; 0x48
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80038c4:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80038c8:	9013      	str	r0, [sp, #76]	; 0x4c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80038ca:	9014      	str	r0, [sp, #80]	; 0x50
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80038cc:	9015      	str	r0, [sp, #84]	; 0x54
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80038ce:	9016      	str	r0, [sp, #88]	; 0x58
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80038d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80038d4:	9017      	str	r0, [sp, #92]	; 0x5c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80038d6:	9018      	str	r0, [sp, #96]	; 0x60
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80038d8:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038da:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80038dc:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80038de:	921b      	str	r2, [sp, #108]	; 0x6c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80038e0:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038e2:	f7fe f8f3 	bl	8001acc <HAL_RCCEx_PeriphCLKConfig>
 80038e6:	4604      	mov	r4, r0
 80038e8:	b100      	cbz	r0, 80038ec <SystemClock_Config+0x88>
 80038ea:	e7fe      	b.n	80038ea <SystemClock_Config+0x86>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80038ec:	f7fe f8b8 	bl	8001a60 <HAL_RCC_GetHCLKFreq>
 80038f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80038f8:	f7fd f8f8 	bl	8000aec <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80038fc:	2004      	movs	r0, #4
 80038fe:	f7fd f90b 	bl	8000b18 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003902:	4622      	mov	r2, r4
 8003904:	4621      	mov	r1, r4
 8003906:	f04f 30ff 	mov.w	r0, #4294967295
 800390a:	f7fd f8bb 	bl	8000a84 <HAL_NVIC_SetPriority>
}
 800390e:	b026      	add	sp, #152	; 0x98
 8003910:	bd10      	pop	{r4, pc}
 8003912:	bf00      	nop
 8003914:	40021000 	.word	0x40021000
 8003918:	002101ff 	.word	0x002101ff

0800391c <main>:
{
 800391c:	b500      	push	{lr}
 800391e:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 8003920:	f7fc fcd2 	bl	80002c8 <HAL_Init>
  SystemClock_Config();
 8003924:	f7ff ff9e 	bl	8003864 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003928:	4b97      	ldr	r3, [pc, #604]	; (8003b88 <main+0x26c>)
 800392a:	695a      	ldr	r2, [r3, #20]
 800392c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003930:	615a      	str	r2, [r3, #20]
 8003932:	695a      	ldr	r2, [r3, #20]
 8003934:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8003938:	9201      	str	r2, [sp, #4]
 800393a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800393c:	695a      	ldr	r2, [r3, #20]
 800393e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003942:	615a      	str	r2, [r3, #20]
 8003944:	695a      	ldr	r2, [r3, #20]
 8003946:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800394a:	9202      	str	r2, [sp, #8]
 800394c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800394e:	695a      	ldr	r2, [r3, #20]
 8003950:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003954:	615a      	str	r2, [r3, #20]
 8003956:	695a      	ldr	r2, [r3, #20]
 8003958:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800395c:	9203      	str	r2, [sp, #12]
 800395e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003966:	615a      	str	r2, [r3, #20]
 8003968:	695a      	ldr	r2, [r3, #20]
 800396a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800396e:	9204      	str	r2, [sp, #16]
 8003970:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003972:	695a      	ldr	r2, [r3, #20]
 8003974:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003978:	615a      	str	r2, [r3, #20]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003980:	9305      	str	r3, [sp, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ColourSensorLed_Pin, GPIO_PIN_RESET);
 8003982:	2200      	movs	r2, #0
 8003984:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800398c:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ColourSensorLed_Pin, GPIO_PIN_RESET);
 800398e:	f7fd f9a3 	bl	8000cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SolenoidValve3_1_Pin|SolenoidValve3_2_Pin, GPIO_PIN_RESET);
 8003992:	2200      	movs	r2, #0
 8003994:	f240 2102 	movw	r1, #514	; 0x202
 8003998:	487c      	ldr	r0, [pc, #496]	; (8003b8c <main+0x270>)
 800399a:	f7fd f99d 	bl	8000cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SolenoidValve1_1_Pin|SolenoidValve1_2_Pin|SolenoidValve2_1_Pin, GPIO_PIN_RESET);
 800399e:	2200      	movs	r2, #0
 80039a0:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80039a4:	487a      	ldr	r0, [pc, #488]	; (8003b90 <main+0x274>)
 80039a6:	f7fd f997 	bl	8000cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80039aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ae:	2500      	movs	r5, #0
  GPIO_InitStruct.Pin = B1_Pin;
 80039b0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80039b2:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80039b4:	4b77      	ldr	r3, [pc, #476]	; (8003b94 <main+0x278>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80039b6:	4876      	ldr	r0, [pc, #472]	; (8003b90 <main+0x274>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80039b8:	930a      	str	r3, [sp, #40]	; 0x28

  /*Configure GPIO pins : LD2_Pin ColourSensorLed_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|ColourSensorLed_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039ba:	2401      	movs	r4, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039bc:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80039be:	f7fd f8bb 	bl	8000b38 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin|ColourSensorLed_Pin;
 80039c2:	f44f 7390 	mov.w	r3, #288	; 0x120
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039c6:	a909      	add	r1, sp, #36	; 0x24
 80039c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LD2_Pin|ColourSensorLed_Pin;
 80039cc:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039ce:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d0:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d2:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d4:	f7fd f8b0 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SolenoidValve3_1_Pin SolenoidValve3_2_Pin */
  GPIO_InitStruct.Pin = SolenoidValve3_1_Pin|SolenoidValve3_2_Pin;
 80039d8:	f240 2302 	movw	r3, #514	; 0x202
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039dc:	a909      	add	r1, sp, #36	; 0x24
 80039de:	486b      	ldr	r0, [pc, #428]	; (8003b8c <main+0x270>)
  GPIO_InitStruct.Pin = SolenoidValve3_1_Pin|SolenoidValve3_2_Pin;
 80039e0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039e2:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e4:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e6:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039e8:	f7fd f8a6 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SolenoidValve1_1_Pin SolenoidValve1_2_Pin SolenoidValve2_1_Pin */
  GPIO_InitStruct.Pin = SolenoidValve1_1_Pin|SolenoidValve1_2_Pin|SolenoidValve2_1_Pin;
 80039ec:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039f0:	a909      	add	r1, sp, #36	; 0x24
 80039f2:	4867      	ldr	r0, [pc, #412]	; (8003b90 <main+0x274>)
  GPIO_InitStruct.Pin = SolenoidValve1_1_Pin|SolenoidValve1_2_Pin|SolenoidValve2_1_Pin;
 80039f4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039f6:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f8:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039fa:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039fc:	f7fd f89c 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : SolenoidValve2_2_Pin */
  GPIO_InitStruct.Pin = SolenoidValve2_2_Pin;
 8003a00:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SolenoidValve2_2_GPIO_Port, &GPIO_InitStruct);
 8003a04:	4862      	ldr	r0, [pc, #392]	; (8003b90 <main+0x274>)
  GPIO_InitStruct.Pin = SolenoidValve2_2_Pin;
 8003a06:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(SolenoidValve2_2_GPIO_Port, &GPIO_InitStruct);
 8003a08:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a0a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0c:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(SolenoidValve2_2_GPIO_Port, &GPIO_InitStruct);
 8003a0e:	f7fd f893 	bl	8000b38 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8003a12:	4861      	ldr	r0, [pc, #388]	; (8003b98 <main+0x27c>)
  huart2.Init.BaudRate = 38400;
 8003a14:	4b61      	ldr	r3, [pc, #388]	; (8003b9c <main+0x280>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003a16:	6085      	str	r5, [r0, #8]
  huart2.Init.BaudRate = 38400;
 8003a18:	f44f 4c16 	mov.w	ip, #38400	; 0x9600
 8003a1c:	e880 1008 	stmia.w	r0, {r3, ip}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a20:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003a22:	60c5      	str	r5, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003a24:	6105      	str	r5, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a26:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a28:	6185      	str	r5, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a2a:	61c5      	str	r5, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a2c:	6205      	str	r5, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a2e:	6245      	str	r5, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a30:	f7ff f8e7 	bl	8002c02 <HAL_UART_Init>
 8003a34:	b100      	cbz	r0, 8003a38 <main+0x11c>
 8003a36:	e7fe      	b.n	8003a36 <main+0x11a>
  hrtc.Instance = RTC;
 8003a38:	4d59      	ldr	r5, [pc, #356]	; (8003ba0 <main+0x284>)
 8003a3a:	4b5a      	ldr	r3, [pc, #360]	; (8003ba4 <main+0x288>)
 8003a3c:	602b      	str	r3, [r5, #0]
  hrtc.Init.AsynchPrediv = 127;
 8003a3e:	237f      	movs	r3, #127	; 0x7f
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003a40:	6068      	str	r0, [r5, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003a42:	60ab      	str	r3, [r5, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003a44:	6128      	str	r0, [r5, #16]
  hrtc.Init.SynchPrediv = 255;
 8003a46:	23ff      	movs	r3, #255	; 0xff
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003a48:	6168      	str	r0, [r5, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003a4a:	61a8      	str	r0, [r5, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003a4c:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = 255;
 8003a4e:	60eb      	str	r3, [r5, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003a50:	f7fe f9b4 	bl	8001dbc <HAL_RTC_Init>
 8003a54:	b100      	cbz	r0, 8003a58 <main+0x13c>
 8003a56:	e7fe      	b.n	8003a56 <main+0x13a>
  sTime.Hours = 0x12;
 8003a58:	2312      	movs	r3, #18
  sTime.Minutes = 0x0;
 8003a5a:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
  sTime.Seconds = 0x0;
 8003a5e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003a62:	900c      	str	r0, [sp, #48]	; 0x30
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003a64:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003a66:	4622      	mov	r2, r4
 8003a68:	a909      	add	r1, sp, #36	; 0x24
 8003a6a:	4628      	mov	r0, r5
  sTime.Hours = 0x12;
 8003a6c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003a70:	f7fe fa5d 	bl	8001f2e <HAL_RTC_SetTime>
 8003a74:	b100      	cbz	r0, 8003a78 <main+0x15c>
 8003a76:	e7fe      	b.n	8003a76 <main+0x15a>
  sDate.Year = 0x18;
 8003a78:	2318      	movs	r3, #24
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003a7a:	4622      	mov	r2, r4
 8003a7c:	eb0d 0103 	add.w	r1, sp, r3
 8003a80:	4628      	mov	r0, r5
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003a82:	f88d 4018 	strb.w	r4, [sp, #24]
  sDate.Month = RTC_MONTH_JANUARY;
 8003a86:	f88d 4019 	strb.w	r4, [sp, #25]
  sDate.Date = 0x1;
 8003a8a:	f88d 401a 	strb.w	r4, [sp, #26]
  sDate.Year = 0x18;
 8003a8e:	f88d 301b 	strb.w	r3, [sp, #27]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003a92:	f7fe f9ec 	bl	8001e6e <HAL_RTC_SetDate>
 8003a96:	b100      	cbz	r0, 8003a9a <main+0x17e>
 8003a98:	e7fe      	b.n	8003a98 <main+0x17c>
  hadc1.Instance = ADC1;
 8003a9a:	4d43      	ldr	r5, [pc, #268]	; (8003ba8 <main+0x28c>)
 8003a9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003aa0:	6068      	str	r0, [r5, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003aa2:	60a8      	str	r0, [r5, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003aa4:	6128      	str	r0, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003aa6:	61e8      	str	r0, [r5, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003aa8:	6268      	str	r0, [r5, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003aaa:	6328      	str	r0, [r5, #48]	; 0x30
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003aac:	60e8      	str	r0, [r5, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003aae:	6368      	str	r0, [r5, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003ab0:	2604      	movs	r6, #4
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003ab2:	61a8      	str	r0, [r5, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003ab4:	63a8      	str	r0, [r5, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003ab6:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 8003ab8:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003aba:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.NbrOfConversion = 1;
 8003abc:	622c      	str	r4, [r5, #32]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003abe:	616e      	str	r6, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003ac0:	f7fc fc72 	bl	80003a8 <HAL_ADC_Init>
 8003ac4:	b100      	cbz	r0, 8003ac8 <main+0x1ac>
 8003ac6:	e7fe      	b.n	8003ac6 <main+0x1aa>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003ac8:	9006      	str	r0, [sp, #24]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003aca:	a906      	add	r1, sp, #24
 8003acc:	4628      	mov	r0, r5
 8003ace:	f7fc ff37 	bl	8000940 <HAL_ADCEx_MultiModeConfigChannel>
 8003ad2:	b100      	cbz	r0, 8003ad6 <main+0x1ba>
 8003ad4:	e7fe      	b.n	8003ad4 <main+0x1b8>
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003ad6:	900c      	str	r0, [sp, #48]	; 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003ad8:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003ada:	900d      	str	r0, [sp, #52]	; 0x34
  sConfig.Offset = 0;
 8003adc:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ade:	a909      	add	r1, sp, #36	; 0x24
 8003ae0:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 8003ae2:	9409      	str	r4, [sp, #36]	; 0x24
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003ae4:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ae6:	f7fc fd93 	bl	8000610 <HAL_ADC_ConfigChannel>
 8003aea:	b100      	cbz	r0, 8003aee <main+0x1d2>
 8003aec:	e7fe      	b.n	8003aec <main+0x1d0>
  hadc2.Instance = ADC2;
 8003aee:	4d2f      	ldr	r5, [pc, #188]	; (8003bac <main+0x290>)
 8003af0:	4b2f      	ldr	r3, [pc, #188]	; (8003bb0 <main+0x294>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003af2:	6068      	str	r0, [r5, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003af4:	60a8      	str	r0, [r5, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003af6:	6128      	str	r0, [r5, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003af8:	61e8      	str	r0, [r5, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003afa:	6268      	str	r0, [r5, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003afc:	6328      	str	r0, [r5, #48]	; 0x30
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003afe:	60e8      	str	r0, [r5, #12]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003b00:	6368      	str	r0, [r5, #52]	; 0x34
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003b02:	61a8      	str	r0, [r5, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003b04:	63a8      	str	r0, [r5, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003b06:	4628      	mov	r0, r5
  hadc2.Instance = ADC2;
 8003b08:	602b      	str	r3, [r5, #0]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b0a:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc2.Init.NbrOfConversion = 1;
 8003b0c:	622c      	str	r4, [r5, #32]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003b0e:	616e      	str	r6, [r5, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003b10:	f7fc fc4a 	bl	80003a8 <HAL_ADC_Init>
 8003b14:	b100      	cbz	r0, 8003b18 <main+0x1fc>
 8003b16:	e7fe      	b.n	8003b16 <main+0x1fa>
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003b18:	900c      	str	r0, [sp, #48]	; 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003b1a:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003b1c:	900d      	str	r0, [sp, #52]	; 0x34
  sConfig.Offset = 0;
 8003b1e:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003b20:	a909      	add	r1, sp, #36	; 0x24
 8003b22:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 8003b24:	9409      	str	r4, [sp, #36]	; 0x24
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003b26:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003b28:	f7fc fd72 	bl	8000610 <HAL_ADC_ConfigChannel>
 8003b2c:	b100      	cbz	r0, 8003b30 <main+0x214>
 8003b2e:	e7fe      	b.n	8003b2e <main+0x212>
  hadc3.Instance = ADC3;
 8003b30:	4b20      	ldr	r3, [pc, #128]	; (8003bb4 <main+0x298>)
 8003b32:	4a21      	ldr	r2, [pc, #132]	; (8003bb8 <main+0x29c>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003b34:	6058      	str	r0, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8003b36:	6098      	str	r0, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003b38:	6118      	str	r0, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8003b3a:	61d8      	str	r0, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003b3c:	6258      	str	r0, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003b3e:	6318      	str	r0, [r3, #48]	; 0x30
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b40:	60d8      	str	r0, [r3, #12]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8003b42:	6358      	str	r0, [r3, #52]	; 0x34
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8003b44:	6198      	str	r0, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003b46:	6398      	str	r0, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003b48:	4618      	mov	r0, r3
  hadc3.Instance = ADC3;
 8003b4a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b4c:	62dc      	str	r4, [r3, #44]	; 0x2c
  hadc3.Init.NbrOfConversion = 1;
 8003b4e:	621c      	str	r4, [r3, #32]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003b50:	615e      	str	r6, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003b52:	f7fc fc29 	bl	80003a8 <HAL_ADC_Init>
 8003b56:	b100      	cbz	r0, 8003b5a <main+0x23e>
 8003b58:	e7fe      	b.n	8003b58 <main+0x23c>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003b5a:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8003b5c:	a906      	add	r1, sp, #24
 8003b5e:	4815      	ldr	r0, [pc, #84]	; (8003bb4 <main+0x298>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003b60:	9306      	str	r3, [sp, #24]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8003b62:	f7fc feed 	bl	8000940 <HAL_ADCEx_MultiModeConfigChannel>
 8003b66:	b100      	cbz	r0, 8003b6a <main+0x24e>
 8003b68:	e7fe      	b.n	8003b68 <main+0x24c>
  sConfig.Channel = ADC_CHANNEL_12;
 8003b6a:	230c      	movs	r3, #12
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003b6c:	2501      	movs	r5, #1
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003b6e:	900c      	str	r0, [sp, #48]	; 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003b70:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003b72:	900d      	str	r0, [sp, #52]	; 0x34
  sConfig.Offset = 0;
 8003b74:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003b76:	a909      	add	r1, sp, #36	; 0x24
 8003b78:	480e      	ldr	r0, [pc, #56]	; (8003bb4 <main+0x298>)
  sConfig.Channel = ADC_CHANNEL_12;
 8003b7a:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003b7c:	950a      	str	r5, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003b7e:	f7fc fd47 	bl	8000610 <HAL_ADC_ConfigChannel>
 8003b82:	b1d8      	cbz	r0, 8003bbc <main+0x2a0>
 8003b84:	e7fe      	b.n	8003b84 <main+0x268>
 8003b86:	bf00      	nop
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	48000400 	.word	0x48000400
 8003b90:	48000800 	.word	0x48000800
 8003b94:	10210000 	.word	0x10210000
 8003b98:	20000624 	.word	0x20000624
 8003b9c:	40004400 	.word	0x40004400
 8003ba0:	2000058c 	.word	0x2000058c
 8003ba4:	40002800 	.word	0x40002800
 8003ba8:	200003f0 	.word	0x200003f0
 8003bac:	2000027c 	.word	0x2000027c
 8003bb0:	50000100 	.word	0x50000100
 8003bb4:	20000444 	.word	0x20000444
 8003bb8:	50000400 	.word	0x50000400
  hadc4.Instance = ADC4;
 8003bbc:	4c7b      	ldr	r4, [pc, #492]	; (8003dac <main+0x490>)
 8003bbe:	4b7c      	ldr	r3, [pc, #496]	; (8003db0 <main+0x494>)
 8003bc0:	6023      	str	r3, [r4, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003bc2:	6060      	str	r0, [r4, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8003bc4:	60a0      	str	r0, [r4, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003bc6:	6120      	str	r0, [r4, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8003bc8:	61e0      	str	r0, [r4, #28]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8003bca:	6260      	str	r0, [r4, #36]	; 0x24
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003bcc:	6320      	str	r0, [r4, #48]	; 0x30
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003bce:	60e0      	str	r0, [r4, #12]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8003bd0:	6360      	str	r0, [r4, #52]	; 0x34
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003bd2:	2304      	movs	r3, #4
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8003bd4:	61a0      	str	r0, [r4, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003bd6:	63a0      	str	r0, [r4, #56]	; 0x38
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8003bd8:	4620      	mov	r0, r4
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003bda:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc4.Init.NbrOfConversion = 1;
 8003bdc:	6225      	str	r5, [r4, #32]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003bde:	6163      	str	r3, [r4, #20]
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8003be0:	f7fc fbe2 	bl	80003a8 <HAL_ADC_Init>
 8003be4:	b100      	cbz	r0, 8003be8 <main+0x2cc>
 8003be6:	e7fe      	b.n	8003be6 <main+0x2ca>
  sConfig.Channel = ADC_CHANNEL_3;
 8003be8:	2303      	movs	r3, #3
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003bea:	900c      	str	r0, [sp, #48]	; 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003bec:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003bee:	900d      	str	r0, [sp, #52]	; 0x34
  sConfig.Offset = 0;
 8003bf0:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8003bf2:	a909      	add	r1, sp, #36	; 0x24
 8003bf4:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 8003bf6:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003bf8:	950a      	str	r5, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8003bfa:	f7fc fd09 	bl	8000610 <HAL_ADC_ConfigChannel>
 8003bfe:	b100      	cbz	r0, 8003c02 <main+0x2e6>
 8003c00:	e7fe      	b.n	8003c00 <main+0x2e4>
  hi2c1.Instance = I2C1;
 8003c02:	4c6c      	ldr	r4, [pc, #432]	; (8003db4 <main+0x498>)
  hi2c1.Init.Timing = 0x2000090E;
 8003c04:	4b6c      	ldr	r3, [pc, #432]	; (8003db8 <main+0x49c>)
 8003c06:	4e6d      	ldr	r6, [pc, #436]	; (8003dbc <main+0x4a0>)
  hi2c1.Init.OwnAddress1 = 0;
 8003c08:	60a0      	str	r0, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c0a:	6120      	str	r0, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003c0c:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003c0e:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c10:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c12:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c14:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x2000090E;
 8003c16:	e884 0048 	stmia.w	r4, {r3, r6}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c1a:	60e5      	str	r5, [r4, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c1c:	f7fd f9ab 	bl	8000f76 <HAL_I2C_Init>
 8003c20:	4601      	mov	r1, r0
 8003c22:	b100      	cbz	r0, 8003c26 <main+0x30a>
 8003c24:	e7fe      	b.n	8003c24 <main+0x308>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003c26:	4620      	mov	r0, r4
 8003c28:	f7fd fb6f 	bl	800130a <HAL_I2CEx_ConfigAnalogFilter>
 8003c2c:	4601      	mov	r1, r0
 8003c2e:	b100      	cbz	r0, 8003c32 <main+0x316>
 8003c30:	e7fe      	b.n	8003c30 <main+0x314>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003c32:	4620      	mov	r0, r4
 8003c34:	f7fd fb8f 	bl	8001356 <HAL_I2CEx_ConfigDigitalFilter>
 8003c38:	b100      	cbz	r0, 8003c3c <main+0x320>
 8003c3a:	e7fe      	b.n	8003c3a <main+0x31e>
  hi2c2.Instance = I2C2;
 8003c3c:	4c60      	ldr	r4, [pc, #384]	; (8003dc0 <main+0x4a4>)
 8003c3e:	4b61      	ldr	r3, [pc, #388]	; (8003dc4 <main+0x4a8>)
  hi2c2.Init.OwnAddress1 = 0;
 8003c40:	60a0      	str	r0, [r4, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c42:	6120      	str	r0, [r4, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003c44:	6160      	str	r0, [r4, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003c46:	61a0      	str	r0, [r4, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c48:	61e0      	str	r0, [r4, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c4a:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003c4c:	4620      	mov	r0, r4
  hi2c2.Init.Timing = 0x2000090E;
 8003c4e:	e884 0048 	stmia.w	r4, {r3, r6}
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c52:	60e5      	str	r5, [r4, #12]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003c54:	f7fd f98f 	bl	8000f76 <HAL_I2C_Init>
 8003c58:	4601      	mov	r1, r0
 8003c5a:	b100      	cbz	r0, 8003c5e <main+0x342>
 8003c5c:	e7fe      	b.n	8003c5c <main+0x340>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003c5e:	4620      	mov	r0, r4
 8003c60:	f7fd fb53 	bl	800130a <HAL_I2CEx_ConfigAnalogFilter>
 8003c64:	4601      	mov	r1, r0
 8003c66:	b100      	cbz	r0, 8003c6a <main+0x34e>
 8003c68:	e7fe      	b.n	8003c68 <main+0x34c>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f7fd fb73 	bl	8001356 <HAL_I2CEx_ConfigDigitalFilter>
 8003c70:	b100      	cbz	r0, 8003c74 <main+0x358>
 8003c72:	e7fe      	b.n	8003c72 <main+0x356>
  hspi2.Instance = SPI2;
 8003c74:	4854      	ldr	r0, [pc, #336]	; (8003dc8 <main+0x4ac>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003c76:	4b55      	ldr	r3, [pc, #340]	; (8003dcc <main+0x4b0>)
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8003c78:	f44f 7240 	mov.w	r2, #768	; 0x300
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003c7c:	f44f 7e82 	mov.w	lr, #260	; 0x104
 8003c80:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8003c84:	60c2      	str	r2, [r0, #12]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003c86:	2300      	movs	r3, #0
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003c88:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003c8c:	6083      	str	r3, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c8e:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c90:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003c92:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c94:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c96:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c98:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c9a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003c9c:	2207      	movs	r2, #7
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003c9e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003ca0:	2308      	movs	r3, #8
  hspi2.Init.CRCPolynomial = 7;
 8003ca2:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003ca4:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003ca6:	f7fe fa03 	bl	80020b0 <HAL_SPI_Init>
 8003caa:	b100      	cbz	r0, 8003cae <main+0x392>
 8003cac:	e7fe      	b.n	8003cac <main+0x390>
  htim4.Instance = TIM4;
 8003cae:	4c48      	ldr	r4, [pc, #288]	; (8003dd0 <main+0x4b4>)
 8003cb0:	4b48      	ldr	r3, [pc, #288]	; (8003dd4 <main+0x4b8>)
  htim4.Init.Prescaler = 0;
 8003cb2:	6060      	str	r0, [r4, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cb4:	60a0      	str	r0, [r4, #8]
  htim4.Init.Period = 0;
 8003cb6:	60e0      	str	r0, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cb8:	6120      	str	r0, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cba:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003cbc:	4620      	mov	r0, r4
  htim4.Instance = TIM4;
 8003cbe:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003cc0:	f7fe fab6 	bl	8002230 <HAL_TIM_PWM_Init>
 8003cc4:	b100      	cbz	r0, 8003cc8 <main+0x3ac>
 8003cc6:	e7fe      	b.n	8003cc6 <main+0x3aa>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cc8:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cca:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003ccc:	a906      	add	r1, sp, #24
 8003cce:	4620      	mov	r0, r4
 8003cd0:	f7fe fce6 	bl	80026a0 <HAL_TIMEx_MasterConfigSynchronization>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	b100      	cbz	r0, 8003cda <main+0x3be>
 8003cd8:	e7fe      	b.n	8003cd8 <main+0x3bc>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003cda:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8003cdc:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003cde:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ce0:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ce2:	a909      	add	r1, sp, #36	; 0x24
 8003ce4:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ce6:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ce8:	f7fe fc52 	bl	8002590 <HAL_TIM_PWM_ConfigChannel>
 8003cec:	b100      	cbz	r0, 8003cf0 <main+0x3d4>
 8003cee:	e7fe      	b.n	8003cee <main+0x3d2>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003cf0:	2204      	movs	r2, #4
 8003cf2:	a909      	add	r1, sp, #36	; 0x24
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	f7fe fc4b 	bl	8002590 <HAL_TIM_PWM_ConfigChannel>
 8003cfa:	4605      	mov	r5, r0
 8003cfc:	b100      	cbz	r0, 8003d00 <main+0x3e4>
 8003cfe:	e7fe      	b.n	8003cfe <main+0x3e2>
  HAL_TIM_MspPostInit(&htim4);
 8003d00:	4620      	mov	r0, r4
 8003d02:	f000 f9f1 	bl	80040e8 <HAL_TIM_MspPostInit>
  huart4.Instance = UART4;
 8003d06:	4834      	ldr	r0, [pc, #208]	; (8003dd8 <main+0x4bc>)
  huart4.Init.BaudRate = 115200;
 8003d08:	4b34      	ldr	r3, [pc, #208]	; (8003ddc <main+0x4c0>)
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003d0a:	6085      	str	r5, [r0, #8]
  huart4.Init.BaudRate = 115200;
 8003d0c:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003d10:	240c      	movs	r4, #12
  huart4.Init.BaudRate = 115200;
 8003d12:	e880 0048 	stmia.w	r0, {r3, r6}
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003d16:	60c5      	str	r5, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003d18:	6105      	str	r5, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003d1a:	6144      	str	r4, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d1c:	6185      	str	r5, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d1e:	61c5      	str	r5, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d20:	6205      	str	r5, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d22:	6245      	str	r5, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003d24:	f7fe ff6d 	bl	8002c02 <HAL_UART_Init>
 8003d28:	b100      	cbz	r0, 8003d2c <main+0x410>
 8003d2a:	e7fe      	b.n	8003d2a <main+0x40e>
  huart5.Instance = UART5;
 8003d2c:	4b2c      	ldr	r3, [pc, #176]	; (8003de0 <main+0x4c4>)
 8003d2e:	4a2d      	ldr	r2, [pc, #180]	; (8003de4 <main+0x4c8>)
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003d30:	6098      	str	r0, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003d32:	60d8      	str	r0, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003d34:	6118      	str	r0, [r3, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d36:	6198      	str	r0, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d38:	61d8      	str	r0, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d3a:	6218      	str	r0, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d3c:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003d3e:	4618      	mov	r0, r3
  huart5.Init.BaudRate = 115200;
 8003d40:	e883 0044 	stmia.w	r3, {r2, r6}
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003d44:	615c      	str	r4, [r3, #20]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003d46:	f7fe ff5c 	bl	8002c02 <HAL_UART_Init>
 8003d4a:	b100      	cbz	r0, 8003d4e <main+0x432>
 8003d4c:	e7fe      	b.n	8003d4c <main+0x430>
  huart1.Instance = USART1;
 8003d4e:	4b26      	ldr	r3, [pc, #152]	; (8003de8 <main+0x4cc>)
  huart1.Init.BaudRate = 38400;
 8003d50:	4a26      	ldr	r2, [pc, #152]	; (8003dec <main+0x4d0>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d52:	6098      	str	r0, [r3, #8]
  huart1.Init.BaudRate = 38400;
 8003d54:	f44f 4516 	mov.w	r5, #38400	; 0x9600
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d58:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d5a:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d5c:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d5e:	61d8      	str	r0, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d60:	6218      	str	r0, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d62:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d64:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 38400;
 8003d66:	e883 0024 	stmia.w	r3, {r2, r5}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d6a:	615c      	str	r4, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d6c:	f7fe ff49 	bl	8002c02 <HAL_UART_Init>
 8003d70:	b100      	cbz	r0, 8003d74 <main+0x458>
 8003d72:	e7fe      	b.n	8003d72 <main+0x456>
  huart3.Instance = USART3;
 8003d74:	4b1e      	ldr	r3, [pc, #120]	; (8003df0 <main+0x4d4>)
 8003d76:	4a1f      	ldr	r2, [pc, #124]	; (8003df4 <main+0x4d8>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003d78:	6098      	str	r0, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003d7a:	60d8      	str	r0, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003d7c:	6118      	str	r0, [r3, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d7e:	6198      	str	r0, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d80:	61d8      	str	r0, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d82:	6218      	str	r0, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d84:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003d86:	4618      	mov	r0, r3
  huart3.Init.BaudRate = 38400;
 8003d88:	e883 0024 	stmia.w	r3, {r2, r5}
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003d8c:	615c      	str	r4, [r3, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003d8e:	f7fe ff38 	bl	8002c02 <HAL_UART_Init>
 8003d92:	b100      	cbz	r0, 8003d96 <main+0x47a>
 8003d94:	e7fe      	b.n	8003d94 <main+0x478>
  SelectionMenuUart();
 8003d96:	f000 fe57 	bl	8004a48 <SelectionMenuUart>
  TransmitUart("\r\n\nTo start, Please press & hold for 3 seconds to start\r\n\n");
 8003d9a:	4817      	ldr	r0, [pc, #92]	; (8003df8 <main+0x4dc>)
 8003d9c:	f000 fab8 	bl	8004310 <TransmitUart>
  HAL_Delay(500);
 8003da0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003da4:	f7fc fab4 	bl	8000310 <HAL_Delay>
 8003da8:	e7fe      	b.n	8003da8 <main+0x48c>
 8003daa:	bf00      	nop
 8003dac:	20000694 	.word	0x20000694
 8003db0:	50000500 	.word	0x50000500
 8003db4:	200002d0 	.word	0x200002d0
 8003db8:	40005400 	.word	0x40005400
 8003dbc:	2000090e 	.word	0x2000090e
 8003dc0:	20000330 	.word	0x20000330
 8003dc4:	40005800 	.word	0x40005800
 8003dc8:	20000160 	.word	0x20000160
 8003dcc:	40003800 	.word	0x40003800
 8003dd0:	200001c8 	.word	0x200001c8
 8003dd4:	40000800 	.word	0x40000800
 8003dd8:	200005b4 	.word	0x200005b4
 8003ddc:	40004c00 	.word	0x40004c00
 8003de0:	20000380 	.word	0x20000380
 8003de4:	40005000 	.word	0x40005000
 8003de8:	2000049c 	.word	0x2000049c
 8003dec:	40013800 	.word	0x40013800
 8003df0:	2000020c 	.word	0x2000020c
 8003df4:	40004800 	.word	0x40004800
 8003df8:	08005df7 	.word	0x08005df7

08003dfc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dfc:	4b21      	ldr	r3, [pc, #132]	; (8003e84 <HAL_MspInit+0x88>)
{
 8003dfe:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e00:	699a      	ldr	r2, [r3, #24]
 8003e02:	f042 0201 	orr.w	r2, r2, #1
 8003e06:	619a      	str	r2, [r3, #24]
 8003e08:	699a      	ldr	r2, [r3, #24]
 8003e0a:	f002 0201 	and.w	r2, r2, #1
 8003e0e:	9200      	str	r2, [sp, #0]
 8003e10:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e12:	69da      	ldr	r2, [r3, #28]
 8003e14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003e18:	61da      	str	r2, [r3, #28]
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e20:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003e22:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e24:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003e26:	f7fc fe1b 	bl	8000a60 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	f06f 000b 	mvn.w	r0, #11
 8003e32:	f7fc fe27 	bl	8000a84 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003e36:	2200      	movs	r2, #0
 8003e38:	4611      	mov	r1, r2
 8003e3a:	f06f 000a 	mvn.w	r0, #10
 8003e3e:	f7fc fe21 	bl	8000a84 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003e42:	2200      	movs	r2, #0
 8003e44:	4611      	mov	r1, r2
 8003e46:	f06f 0009 	mvn.w	r0, #9
 8003e4a:	f7fc fe1b 	bl	8000a84 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003e4e:	2200      	movs	r2, #0
 8003e50:	4611      	mov	r1, r2
 8003e52:	f06f 0004 	mvn.w	r0, #4
 8003e56:	f7fc fe15 	bl	8000a84 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	4611      	mov	r1, r2
 8003e5e:	f06f 0003 	mvn.w	r0, #3
 8003e62:	f7fc fe0f 	bl	8000a84 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003e66:	2200      	movs	r2, #0
 8003e68:	4611      	mov	r1, r2
 8003e6a:	f06f 0001 	mvn.w	r0, #1
 8003e6e:	f7fc fe09 	bl	8000a84 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003e72:	2200      	movs	r2, #0
 8003e74:	4611      	mov	r1, r2
 8003e76:	f04f 30ff 	mov.w	r0, #4294967295
 8003e7a:	f7fc fe03 	bl	8000a84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e7e:	b003      	add	sp, #12
 8003e80:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e84:	40021000 	.word	0x40021000

08003e88 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC34_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e88:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8003e8a:	6803      	ldr	r3, [r0, #0]
 8003e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8003e90:	b08b      	sub	sp, #44	; 0x2c
  if(hadc->Instance==ADC1)
 8003e92:	d123      	bne.n	8003edc <HAL_ADC_MspInit+0x54>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003e94:	4a3c      	ldr	r2, [pc, #240]	; (8003f88 <HAL_ADC_MspInit+0x100>)
 8003e96:	6813      	ldr	r3, [r2, #0]
 8003e98:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003e9a:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003e9c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003e9e:	d109      	bne.n	8003eb4 <HAL_ADC_MspInit+0x2c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003ea0:	4b3a      	ldr	r3, [pc, #232]	; (8003f8c <HAL_ADC_MspInit+0x104>)
 8003ea2:	695a      	ldr	r2, [r3, #20]
 8003ea4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ea8:	615a      	str	r2, [r3, #20]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb0:	9301      	str	r3, [sp, #4]
 8003eb2:	9b01      	ldr	r3, [sp, #4]
    PA1     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = ForceSensor3_Pin|LoadCell1_Pin|LoadCell2_Pin|LoadCell3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eb4:	4836      	ldr	r0, [pc, #216]	; (8003f90 <HAL_ADC_MspInit+0x108>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003eb6:	2403      	movs	r4, #3
    GPIO_InitStruct.Pin = ForceSensor3_Pin|LoadCell1_Pin|LoadCell2_Pin|LoadCell3_Pin;
 8003eb8:	230f      	movs	r3, #15
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eba:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ebc:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = ForceSensor3_Pin|LoadCell1_Pin|LoadCell2_Pin|LoadCell3_Pin;
 8003ebe:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ec0:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec2:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ec4:	f7fc fe38 	bl	8000b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ForceSensor1_Pin|ForceSensor2_Pin;
 8003ec8:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003eca:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ecc:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ece:	a905      	add	r1, sp, #20
 8003ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    PB12     ------> ADC4_IN3 
    */
    GPIO_InitStruct.Pin = MainPumpOverCurrentProtection_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(MainPumpOverCurrentProtection_GPIO_Port, &GPIO_InitStruct);
 8003ed4:	f7fc fe30 	bl	8000b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8003ed8:	b00b      	add	sp, #44	; 0x2c
 8003eda:	bd30      	pop	{r4, r5, pc}
  else if(hadc->Instance==ADC2)
 8003edc:	4a2d      	ldr	r2, [pc, #180]	; (8003f94 <HAL_ADC_MspInit+0x10c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d121      	bne.n	8003f26 <HAL_ADC_MspInit+0x9e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003ee2:	4a29      	ldr	r2, [pc, #164]	; (8003f88 <HAL_ADC_MspInit+0x100>)
 8003ee4:	6813      	ldr	r3, [r2, #0]
 8003ee6:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003ee8:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003eea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003eec:	d109      	bne.n	8003f02 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003eee:	4b27      	ldr	r3, [pc, #156]	; (8003f8c <HAL_ADC_MspInit+0x104>)
 8003ef0:	695a      	ldr	r2, [r3, #20]
 8003ef2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ef6:	615a      	str	r2, [r3, #20]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efe:	9302      	str	r3, [sp, #8]
 8003f00:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = PressureToHDMachine_Pin|PressureForVolumeSwitching_Pin|PowerFailureDetection_Pin;
 8003f02:	23d0      	movs	r3, #208	; 0xd0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f04:	2503      	movs	r5, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f06:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f08:	a905      	add	r1, sp, #20
 8003f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = PressureToHDMachine_Pin|PressureForVolumeSwitching_Pin|PowerFailureDetection_Pin;
 8003f0e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f10:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f12:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f14:	f7fc fe10 	bl	8000b38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DropoutDC_Pin;
 8003f18:	2304      	movs	r3, #4
 8003f1a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f1c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(MainPumpOverCurrentProtection_GPIO_Port, &GPIO_InitStruct);
 8003f20:	a905      	add	r1, sp, #20
 8003f22:	481d      	ldr	r0, [pc, #116]	; (8003f98 <HAL_ADC_MspInit+0x110>)
 8003f24:	e7d6      	b.n	8003ed4 <HAL_ADC_MspInit+0x4c>
  else if(hadc->Instance==ADC3)
 8003f26:	4a1d      	ldr	r2, [pc, #116]	; (8003f9c <HAL_ADC_MspInit+0x114>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d116      	bne.n	8003f5a <HAL_ADC_MspInit+0xd2>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8003f2c:	4a1c      	ldr	r2, [pc, #112]	; (8003fa0 <HAL_ADC_MspInit+0x118>)
 8003f2e:	6813      	ldr	r3, [r2, #0]
 8003f30:	3301      	adds	r3, #1
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8003f32:	2b01      	cmp	r3, #1
    HAL_RCC_ADC34_CLK_ENABLED++;
 8003f34:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8003f36:	d109      	bne.n	8003f4c <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8003f38:	4b14      	ldr	r3, [pc, #80]	; (8003f8c <HAL_ADC_MspInit+0x104>)
 8003f3a:	695a      	ldr	r2, [r3, #20]
 8003f3c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003f40:	615a      	str	r2, [r3, #20]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f48:	9303      	str	r3, [sp, #12]
 8003f4a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = OverallOverCurrentProtection_Pin;
 8003f4c:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = MainPumpOverCurrentProtection_Pin;
 8003f4e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f50:	2303      	movs	r3, #3
 8003f52:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f54:	2300      	movs	r3, #0
 8003f56:	9307      	str	r3, [sp, #28]
 8003f58:	e7e2      	b.n	8003f20 <HAL_ADC_MspInit+0x98>
  else if(hadc->Instance==ADC4)
 8003f5a:	4a12      	ldr	r2, [pc, #72]	; (8003fa4 <HAL_ADC_MspInit+0x11c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d1bb      	bne.n	8003ed8 <HAL_ADC_MspInit+0x50>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8003f60:	4a0f      	ldr	r2, [pc, #60]	; (8003fa0 <HAL_ADC_MspInit+0x118>)
 8003f62:	6813      	ldr	r3, [r2, #0]
 8003f64:	3301      	adds	r3, #1
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8003f66:	2b01      	cmp	r3, #1
    HAL_RCC_ADC34_CLK_ENABLED++;
 8003f68:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8003f6a:	d109      	bne.n	8003f80 <HAL_ADC_MspInit+0xf8>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8003f6c:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <HAL_ADC_MspInit+0x104>)
 8003f6e:	695a      	ldr	r2, [r3, #20]
 8003f70:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003f74:	615a      	str	r2, [r3, #20]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f7c:	9304      	str	r3, [sp, #16]
 8003f7e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = MainPumpOverCurrentProtection_Pin;
 8003f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f84:	e7e3      	b.n	8003f4e <HAL_ADC_MspInit+0xc6>
 8003f86:	bf00      	nop
 8003f88:	200000a8 	.word	0x200000a8
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	48000800 	.word	0x48000800
 8003f94:	50000100 	.word	0x50000100
 8003f98:	48000400 	.word	0x48000400
 8003f9c:	50000400 	.word	0x50000400
 8003fa0:	200000ac 	.word	0x200000ac
 8003fa4:	50000500 	.word	0x50000500

08003fa8 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003fa8:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8003faa:	6803      	ldr	r3, [r0, #0]
 8003fac:	4a23      	ldr	r2, [pc, #140]	; (800403c <HAL_I2C_MspInit+0x94>)
 8003fae:	4293      	cmp	r3, r2
{
 8003fb0:	b089      	sub	sp, #36	; 0x24
  if(hi2c->Instance==I2C1)
 8003fb2:	d125      	bne.n	8004000 <HAL_I2C_MspInit+0x58>
  
    /**I2C1 GPIO Configuration    
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_3_3V_Pin;
 8003fb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fb8:	2712      	movs	r7, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fba:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fbc:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003fbe:	2404      	movs	r4, #4
    HAL_GPIO_Init(I2C1_SCL_3_3V_GPIO_Port, &GPIO_InitStruct);
 8003fc0:	a903      	add	r1, sp, #12
 8003fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = I2C1_SCL_3_3V_Pin;
 8003fc6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fc8:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fca:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fcc:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003fce:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(I2C1_SCL_3_3V_GPIO_Port, &GPIO_InitStruct);
 8003fd0:	f7fc fdb2 	bl	8000b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_3_3V_Pin;
 8003fd4:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(I2C1_SDA_3_3V_GPIO_Port, &GPIO_InitStruct);
 8003fd6:	a903      	add	r1, sp, #12
 8003fd8:	4819      	ldr	r0, [pc, #100]	; (8004040 <HAL_I2C_MspInit+0x98>)
    GPIO_InitStruct.Pin = I2C1_SDA_3_3V_Pin;
 8003fda:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fdc:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fde:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fe0:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003fe2:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(I2C1_SDA_3_3V_GPIO_Port, &GPIO_InitStruct);
 8003fe4:	f7fc fda8 	bl	8000b38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003fe8:	4b16      	ldr	r3, [pc, #88]	; (8004044 <HAL_I2C_MspInit+0x9c>)
 8003fea:	69da      	ldr	r2, [r3, #28]
 8003fec:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003ff0:	61da      	str	r2, [r3, #28]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ff8:	9301      	str	r3, [sp, #4]
 8003ffa:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003ffc:	b009      	add	sp, #36	; 0x24
 8003ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hi2c->Instance==I2C2)
 8004000:	4a11      	ldr	r2, [pc, #68]	; (8004048 <HAL_I2C_MspInit+0xa0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d1fa      	bne.n	8003ffc <HAL_I2C_MspInit+0x54>
    GPIO_InitStruct.Pin = I2C2_SCL_5V_Pin|I2C2_SDA_5V_Pin;
 8004006:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800400a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800400c:	2312      	movs	r3, #18
 800400e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004010:	2301      	movs	r3, #1
 8004012:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004014:	2303      	movs	r3, #3
 8004016:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004018:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800401a:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800401c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004020:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004022:	f7fc fd89 	bl	8000b38 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004026:	4b07      	ldr	r3, [pc, #28]	; (8004044 <HAL_I2C_MspInit+0x9c>)
 8004028:	69da      	ldr	r2, [r3, #28]
 800402a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800402e:	61da      	str	r2, [r3, #28]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004036:	9302      	str	r3, [sp, #8]
 8004038:	9b02      	ldr	r3, [sp, #8]
}
 800403a:	e7df      	b.n	8003ffc <HAL_I2C_MspInit+0x54>
 800403c:	40005400 	.word	0x40005400
 8004040:	48000400 	.word	0x48000400
 8004044:	40021000 	.word	0x40021000
 8004048:	40005800 	.word	0x40005800

0800404c <HAL_RTC_MspInit>:
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 800404c:	6802      	ldr	r2, [r0, #0]
 800404e:	4b07      	ldr	r3, [pc, #28]	; (800406c <HAL_RTC_MspInit+0x20>)
 8004050:	429a      	cmp	r2, r3
 8004052:	d10a      	bne.n	800406a <HAL_RTC_MspInit+0x1e>
 8004054:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004058:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800405c:	4b04      	ldr	r3, [pc, #16]	; (8004070 <HAL_RTC_MspInit+0x24>)
 800405e:	fab2 f282 	clz	r2, r2
 8004062:	4413      	add	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	2201      	movs	r2, #1
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	4770      	bx	lr
 800406c:	40002800 	.word	0x40002800
 8004070:	10908100 	.word	0x10908100

08004074 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004074:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI2)
 8004076:	6802      	ldr	r2, [r0, #0]
 8004078:	4b0f      	ldr	r3, [pc, #60]	; (80040b8 <HAL_SPI_MspInit+0x44>)
 800407a:	429a      	cmp	r2, r3
 800407c:	d119      	bne.n	80040b2 <HAL_SPI_MspInit+0x3e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800407e:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004082:	a901      	add	r1, sp, #4
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004084:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004086:	480d      	ldr	r0, [pc, #52]	; (80040bc <HAL_SPI_MspInit+0x48>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004088:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800408c:	61da      	str	r2, [r3, #28]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004098:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800409c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409e:	2302      	movs	r3, #2
 80040a0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040a6:	2303      	movs	r3, #3
 80040a8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80040aa:	2305      	movs	r3, #5
 80040ac:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ae:	f7fc fd43 	bl	8000b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80040b2:	b007      	add	sp, #28
 80040b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80040b8:	40003800 	.word	0x40003800
 80040bc:	48000400 	.word	0x48000400

080040c0 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM4)
 80040c0:	6802      	ldr	r2, [r0, #0]
 80040c2:	4b08      	ldr	r3, [pc, #32]	; (80040e4 <HAL_TIM_PWM_MspInit+0x24>)
 80040c4:	429a      	cmp	r2, r3
{
 80040c6:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM4)
 80040c8:	d10a      	bne.n	80040e0 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80040ca:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80040ce:	69da      	ldr	r2, [r3, #28]
 80040d0:	f042 0204 	orr.w	r2, r2, #4
 80040d4:	61da      	str	r2, [r3, #28]
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	9301      	str	r3, [sp, #4]
 80040de:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80040e0:	b002      	add	sp, #8
 80040e2:	4770      	bx	lr
 80040e4:	40000800 	.word	0x40000800

080040e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80040e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM4)
 80040ea:	6802      	ldr	r2, [r0, #0]
 80040ec:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <HAL_TIM_MspPostInit+0x30>)
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d10e      	bne.n	8004110 <HAL_TIM_MspPostInit+0x28>
  
    /**TIM4 GPIO Configuration    
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = MainPump_Pin|CanisterPressure_Pin;
 80040f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80040f6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f8:	2302      	movs	r3, #2
 80040fa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fc:	2300      	movs	r3, #0
 80040fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004100:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004102:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8004104:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800410a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800410c:	f7fc fd14 	bl	8000b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004110:	b007      	add	sp, #28
 8004112:	f85d fb04 	ldr.w	pc, [sp], #4
 8004116:	bf00      	nop
 8004118:	40000800 	.word	0x40000800

0800411c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800411c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART4)
 800411e:	6803      	ldr	r3, [r0, #0]
 8004120:	4a47      	ldr	r2, [pc, #284]	; (8004240 <HAL_UART_MspInit+0x124>)
 8004122:	4293      	cmp	r3, r2
{
 8004124:	b08b      	sub	sp, #44	; 0x2c
  if(huart->Instance==UART4)
 8004126:	d117      	bne.n	8004158 <HAL_UART_MspInit+0x3c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004128:	4b46      	ldr	r3, [pc, #280]	; (8004244 <HAL_UART_MspInit+0x128>)
 800412a:	69da      	ldr	r2, [r3, #28]
 800412c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004130:	61da      	str	r2, [r3, #28]
 8004132:	69db      	ldr	r3, [r3, #28]
 8004134:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	9b00      	ldr	r3, [sp, #0]
  
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800413c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004140:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004142:	2302      	movs	r3, #2
 8004144:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004146:	2300      	movs	r3, #0
 8004148:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800414a:	2303      	movs	r3, #3
 800414c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800414e:	2305      	movs	r3, #5
    */
    GPIO_InitStruct.Pin = BluetoothModule_USART1_TX_Pin|BluetoothModule_USART1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004150:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004152:	a905      	add	r1, sp, #20
 8004154:	483c      	ldr	r0, [pc, #240]	; (8004248 <HAL_UART_MspInit+0x12c>)
 8004156:	e023      	b.n	80041a0 <HAL_UART_MspInit+0x84>
  else if(huart->Instance==UART5)
 8004158:	4a3c      	ldr	r2, [pc, #240]	; (800424c <HAL_UART_MspInit+0x130>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d124      	bne.n	80041a8 <HAL_UART_MspInit+0x8c>
    __HAL_RCC_UART5_CLK_ENABLE();
 800415e:	4b39      	ldr	r3, [pc, #228]	; (8004244 <HAL_UART_MspInit+0x128>)
    HAL_GPIO_Init(Servo1_UART_TX_GPIO_Port, &GPIO_InitStruct);
 8004160:	4839      	ldr	r0, [pc, #228]	; (8004248 <HAL_UART_MspInit+0x12c>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8004162:	69da      	ldr	r2, [r3, #28]
 8004164:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004168:	61da      	str	r2, [r3, #28]
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004170:	9301      	str	r3, [sp, #4]
 8004172:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004174:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = Servo1_UART_TX_Pin;
 8004176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417a:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800417c:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800417e:	2405      	movs	r4, #5
    HAL_GPIO_Init(Servo1_UART_TX_GPIO_Port, &GPIO_InitStruct);
 8004180:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = Servo1_UART_TX_Pin;
 8004182:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004184:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004186:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004188:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800418a:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(Servo1_UART_TX_GPIO_Port, &GPIO_InitStruct);
 800418c:	f7fc fcd4 	bl	8000b38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Servo1_UART5_RX_Pin;
 8004190:	2304      	movs	r3, #4
    HAL_GPIO_Init(Servo1_UART5_RX_GPIO_Port, &GPIO_InitStruct);
 8004192:	482f      	ldr	r0, [pc, #188]	; (8004250 <HAL_UART_MspInit+0x134>)
    GPIO_InitStruct.Pin = Servo1_UART5_RX_Pin;
 8004194:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004196:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004198:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800419a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800419c:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(Servo1_UART5_RX_GPIO_Port, &GPIO_InitStruct);
 800419e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = Wifi_USART3_TX_Pin|Wifi_USART3_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041a0:	f7fc fcca 	bl	8000b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80041a4:	b00b      	add	sp, #44	; 0x2c
 80041a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(huart->Instance==USART1)
 80041a8:	4a2a      	ldr	r2, [pc, #168]	; (8004254 <HAL_UART_MspInit+0x138>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d113      	bne.n	80041d6 <HAL_UART_MspInit+0xba>
    __HAL_RCC_USART1_CLK_ENABLE();
 80041ae:	4b25      	ldr	r3, [pc, #148]	; (8004244 <HAL_UART_MspInit+0x128>)
 80041b0:	699a      	ldr	r2, [r3, #24]
 80041b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041b6:	619a      	str	r2, [r3, #24]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041be:	9302      	str	r3, [sp, #8]
 80041c0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = BluetoothModule_USART1_TX_Pin|BluetoothModule_USART1_RX_Pin;
 80041c2:	2330      	movs	r3, #48	; 0x30
 80041c4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c6:	2302      	movs	r3, #2
 80041c8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ca:	2300      	movs	r3, #0
 80041cc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041ce:	2303      	movs	r3, #3
 80041d0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80041d2:	2307      	movs	r3, #7
 80041d4:	e7bc      	b.n	8004150 <HAL_UART_MspInit+0x34>
  else if(huart->Instance==USART2)
 80041d6:	4a20      	ldr	r2, [pc, #128]	; (8004258 <HAL_UART_MspInit+0x13c>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d116      	bne.n	800420a <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 80041dc:	4b19      	ldr	r3, [pc, #100]	; (8004244 <HAL_UART_MspInit+0x128>)
 80041de:	69da      	ldr	r2, [r3, #28]
 80041e0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80041e4:	61da      	str	r2, [r3, #28]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ec:	9303      	str	r3, [sp, #12]
 80041ee:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USB_USART2_TX_Pin|USB_USART2_RX_Pin;
 80041f0:	230c      	movs	r3, #12
 80041f2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f4:	2302      	movs	r3, #2
 80041f6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041fc:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80041fe:	2307      	movs	r3, #7
 8004200:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004202:	a905      	add	r1, sp, #20
 8004204:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004208:	e7ca      	b.n	80041a0 <HAL_UART_MspInit+0x84>
  else if(huart->Instance==USART3)
 800420a:	4a14      	ldr	r2, [pc, #80]	; (800425c <HAL_UART_MspInit+0x140>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d1c9      	bne.n	80041a4 <HAL_UART_MspInit+0x88>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004210:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <HAL_UART_MspInit+0x128>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004212:	4813      	ldr	r0, [pc, #76]	; (8004260 <HAL_UART_MspInit+0x144>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8004214:	69da      	ldr	r2, [r3, #28]
 8004216:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800421a:	61da      	str	r2, [r3, #28]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004222:	9304      	str	r3, [sp, #16]
 8004224:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = Wifi_USART3_TX_Pin|Wifi_USART3_RX_Pin;
 8004226:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800422a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800422c:	2302      	movs	r3, #2
 800422e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004230:	2300      	movs	r3, #0
 8004232:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004234:	2303      	movs	r3, #3
 8004236:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004238:	2307      	movs	r3, #7
 800423a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800423c:	a905      	add	r1, sp, #20
 800423e:	e7af      	b.n	80041a0 <HAL_UART_MspInit+0x84>
 8004240:	40004c00 	.word	0x40004c00
 8004244:	40021000 	.word	0x40021000
 8004248:	48000800 	.word	0x48000800
 800424c:	40005000 	.word	0x40005000
 8004250:	48000c00 	.word	0x48000c00
 8004254:	40013800 	.word	0x40013800
 8004258:	40004400 	.word	0x40004400
 800425c:	40004800 	.word	0x40004800
 8004260:	48000400 	.word	0x48000400

08004264 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004264:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004266:	f7fc f841 	bl	80002ec <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800426a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800426e:	f7fc bc5f 	b.w	8000b30 <HAL_SYSTICK_IRQHandler>
	...

08004274 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004274:	4915      	ldr	r1, [pc, #84]	; (80042cc <SystemInit+0x58>)
 8004276:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800427a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800427e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004282:	4b13      	ldr	r3, [pc, #76]	; (80042d0 <SystemInit+0x5c>)
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	f042 0201 	orr.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800428c:	6858      	ldr	r0, [r3, #4]
 800428e:	4a11      	ldr	r2, [pc, #68]	; (80042d4 <SystemInit+0x60>)
 8004290:	4002      	ands	r2, r0
 8004292:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800429a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800429e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80042ae:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80042b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b2:	f022 020f 	bic.w	r2, r2, #15
 80042b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80042b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80042ba:	4a07      	ldr	r2, [pc, #28]	; (80042d8 <SystemInit+0x64>)
 80042bc:	4002      	ands	r2, r0
 80042be:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80042c0:	2200      	movs	r2, #0
 80042c2:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80042c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042c8:	608b      	str	r3, [r1, #8]
 80042ca:	4770      	bx	lr
 80042cc:	e000ed00 	.word	0xe000ed00
 80042d0:	40021000 	.word	0x40021000
 80042d4:	f87fc00c 	.word	0xf87fc00c
 80042d8:	ff00fccc 	.word	0xff00fccc

080042dc <BufferReset>:
//#include "bluetooth.h"

//Reset buffer to store next new data
void BufferReset(void)
{
	for(i=0;i<100;i++)
 80042dc:	4a09      	ldr	r2, [pc, #36]	; (8004304 <BufferReset+0x28>)
{
 80042de:	b570      	push	{r4, r5, r6, lr}
	for(i=0;i<100;i++)
 80042e0:	2300      	movs	r3, #0
	{
		buffer[i]=0;
 80042e2:	4d09      	ldr	r5, [pc, #36]	; (8004308 <BufferReset+0x2c>)
		recieveArray[i]=0;
 80042e4:	4e09      	ldr	r6, [pc, #36]	; (800430c <BufferReset+0x30>)
	for(i=0;i<100;i++)
 80042e6:	7013      	strb	r3, [r2, #0]
 80042e8:	4618      	mov	r0, r3
		buffer[i]=0;
 80042ea:	461c      	mov	r4, r3
	for(i=0;i<100;i++)
 80042ec:	b2d9      	uxtb	r1, r3
 80042ee:	2964      	cmp	r1, #100	; 0x64
 80042f0:	d102      	bne.n	80042f8 <BufferReset+0x1c>
 80042f2:	b100      	cbz	r0, 80042f6 <BufferReset+0x1a>
 80042f4:	7011      	strb	r1, [r2, #0]
 80042f6:	bd70      	pop	{r4, r5, r6, pc}
		buffer[i]=0;
 80042f8:	555c      	strb	r4, [r3, r5]
		recieveArray[i]=0;
 80042fa:	559c      	strb	r4, [r3, r6]
 80042fc:	2001      	movs	r0, #1
 80042fe:	3301      	adds	r3, #1
 8004300:	e7f4      	b.n	80042ec <BufferReset+0x10>
 8004302:	bf00      	nop
 8004304:	20000498 	.word	0x20000498
 8004308:	2000050c 	.word	0x2000050c
 800430c:	20000576 	.word	0x20000576

08004310 <TransmitUart>:
//Converts the message into an array
//Transmit array message using HAL_UART_Transmit function(UART)
//Calling BufferReset to reset buffer
/***************************************************************/
void TransmitUart(char *message)
{
 8004310:	b510      	push	{r4, lr}
	snprintf((char *)buffer, sizeof(buffer),message);
 8004312:	4c08      	ldr	r4, [pc, #32]	; (8004334 <TransmitUart+0x24>)
 8004314:	4602      	mov	r2, r0
 8004316:	2164      	movs	r1, #100	; 0x64
 8004318:	4620      	mov	r0, r4
 800431a:	f000 fc2f 	bl	8004b7c <sniprintf>
	HAL_UART_Transmit(&huart2,buffer, sizeof(buffer),100);
 800431e:	2364      	movs	r3, #100	; 0x64
 8004320:	4621      	mov	r1, r4
 8004322:	461a      	mov	r2, r3
 8004324:	4804      	ldr	r0, [pc, #16]	; (8004338 <TransmitUart+0x28>)
 8004326:	f7fe fb72 	bl	8002a0e <HAL_UART_Transmit>
	BufferReset();

}
 800432a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	BufferReset();
 800432e:	f7ff bfd5 	b.w	80042dc <BufferReset>
 8004332:	bf00      	nop
 8004334:	2000050c 	.word	0x2000050c
 8004338:	20000624 	.word	0x20000624

0800433c <DeleteLine>:
void DeleteLine(void)
{
 800433c:	4b07      	ldr	r3, [pc, #28]	; (800435c <DeleteLine+0x20>)
 800433e:	2200      	movs	r2, #0
	for(i=0;i<NUM_OF_UART_RECEIVED;i++)
	{
		buffer[i]=DELETE;
 8004340:	2108      	movs	r1, #8
	for(i=0;i<NUM_OF_UART_RECEIVED;i++)
 8004342:	3201      	adds	r2, #1
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	2a14      	cmp	r2, #20
		buffer[i]=DELETE;
 8004348:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(i=0;i<NUM_OF_UART_RECEIVED;i++)
 800434c:	d1f9      	bne.n	8004342 <DeleteLine+0x6>
 800434e:	4b04      	ldr	r3, [pc, #16]	; (8004360 <DeleteLine+0x24>)
	}
	HAL_UART_Transmit(&huart2,buffer,NUM_OF_UART_RECEIVED,100);
 8004350:	4904      	ldr	r1, [pc, #16]	; (8004364 <DeleteLine+0x28>)
 8004352:	701a      	strb	r2, [r3, #0]
 8004354:	4804      	ldr	r0, [pc, #16]	; (8004368 <DeleteLine+0x2c>)
 8004356:	2364      	movs	r3, #100	; 0x64
 8004358:	f7fe bb59 	b.w	8002a0e <HAL_UART_Transmit>
 800435c:	2000050b 	.word	0x2000050b
 8004360:	20000498 	.word	0x20000498
 8004364:	2000050c 	.word	0x2000050c
 8004368:	20000624 	.word	0x20000624

0800436c <AutoLogin>:
}

void AutoLogin(uint8_t x)
{
 800436c:	b570      	push	{r4, r5, r6, lr}
	if(secondFlag == 1)
 800436e:	4b10      	ldr	r3, [pc, #64]	; (80043b0 <AutoLogin+0x44>)
 8004370:	781a      	ldrb	r2, [r3, #0]
 8004372:	2a01      	cmp	r2, #1
{
 8004374:	4606      	mov	r6, r0
	if(secondFlag == 1)
 8004376:	d11a      	bne.n	80043ae <AutoLogin+0x42>
	{
		secondFlag=0;
 8004378:	2200      	movs	r2, #0
 800437a:	701a      	strb	r2, [r3, #0]
		counter++;
 800437c:	4a0d      	ldr	r2, [pc, #52]	; (80043b4 <AutoLogin+0x48>)
 800437e:	7813      	ldrb	r3, [r2, #0]
 8004380:	3301      	adds	r3, #1
 8004382:	b2db      	uxtb	r3, r3

		if((counter == COUNTER_TIMING) && (buffer[0] == 0) && (autoLogin != 0))
 8004384:	2b0a      	cmp	r3, #10
		counter++;
 8004386:	7013      	strb	r3, [r2, #0]
		if((counter == COUNTER_TIMING) && (buffer[0] == 0) && (autoLogin != 0))
 8004388:	d111      	bne.n	80043ae <AutoLogin+0x42>
 800438a:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <AutoLogin+0x4c>)
 800438c:	781c      	ldrb	r4, [r3, #0]
 800438e:	b974      	cbnz	r4, 80043ae <AutoLogin+0x42>
 8004390:	4d0a      	ldr	r5, [pc, #40]	; (80043bc <AutoLogin+0x50>)
 8004392:	782b      	ldrb	r3, [r5, #0]
 8004394:	b15b      	cbz	r3, 80043ae <AutoLogin+0x42>
		{
			counter=0;
			TransmitUart("\r\nAuto logging...\r\n\r\n");
 8004396:	480a      	ldr	r0, [pc, #40]	; (80043c0 <AutoLogin+0x54>)
			counter=0;
 8004398:	7014      	strb	r4, [r2, #0]
			TransmitUart("\r\nAuto logging...\r\n\r\n");
 800439a:	f7ff ffb9 	bl	8004310 <TransmitUart>
			recieveArray[j]=x;
 800439e:	4b09      	ldr	r3, [pc, #36]	; (80043c4 <AutoLogin+0x58>)
			recieveArray[j+1]=ENTER;
			autoLogin=0;
 80043a0:	702c      	strb	r4, [r5, #0]
			recieveArray[j]=x;
 80043a2:	781a      	ldrb	r2, [r3, #0]
 80043a4:	4b08      	ldr	r3, [pc, #32]	; (80043c8 <AutoLogin+0x5c>)
 80043a6:	549e      	strb	r6, [r3, r2]
			recieveArray[j+1]=ENTER;
 80043a8:	4413      	add	r3, r2
 80043aa:	220d      	movs	r2, #13
 80043ac:	705a      	strb	r2, [r3, #1]
 80043ae:	bd70      	pop	{r4, r5, r6, pc}
 80043b0:	200006ea 	.word	0x200006ea
 80043b4:	200005ad 	.word	0x200005ad
 80043b8:	2000050c 	.word	0x2000050c
 80043bc:	200000a1 	.word	0x200000a1
 80043c0:	08005e4a 	.word	0x08005e4a
 80043c4:	2000015d 	.word	0x2000015d
 80043c8:	20000576 	.word	0x20000576

080043cc <ReceiveUart>:
//Sends user's inputs to display
//Problem: only diaplay after pressing ENTER
/***************************************************************/

void ReceiveUart(void)
{
 80043cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	BufferReset();
 80043d0:	f7ff ff84 	bl	80042dc <BufferReset>
	enterFlag=0;
 80043d4:	4d2d      	ldr	r5, [pc, #180]	; (800448c <ReceiveUart+0xc0>)
	counter=0;
 80043d6:	4a2e      	ldr	r2, [pc, #184]	; (8004490 <ReceiveUart+0xc4>)
	j=0;
 80043d8:	4c2e      	ldr	r4, [pc, #184]	; (8004494 <ReceiveUart+0xc8>)
			if(recieveArray[i]==ENTER)
			{
				EnterPlacement=i-1;
				for(j=EnterPlacement;j<NUM_OF_UART_RECEIVED;j--)
				{
					recieveInputArray[j]=recieveArray[j];
 80043da:	4f2f      	ldr	r7, [pc, #188]	; (8004498 <ReceiveUart+0xcc>)
	enterFlag=0;
 80043dc:	2300      	movs	r3, #0
 80043de:	702b      	strb	r3, [r5, #0]
	counter=0;
 80043e0:	7013      	strb	r3, [r2, #0]
	j=0;
 80043e2:	7023      	strb	r3, [r4, #0]
while(enterFlag==0) //13 is pressing enter
 80043e4:	782b      	ldrb	r3, [r5, #0]
 80043e6:	b10b      	cbz	r3, 80043ec <ReceiveUart+0x20>
			}
		}


	}
}
 80043e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if(HAL_UART_Receive(&huart2,buffer,1,100)==HAL_OK)
 80043ec:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80044b0 <ReceiveUart+0xe4>
 80043f0:	482a      	ldr	r0, [pc, #168]	; (800449c <ReceiveUart+0xd0>)
 80043f2:	4e2b      	ldr	r6, [pc, #172]	; (80044a0 <ReceiveUart+0xd4>)
 80043f4:	2364      	movs	r3, #100	; 0x64
 80043f6:	2201      	movs	r2, #1
 80043f8:	4641      	mov	r1, r8
 80043fa:	f7fe fb61 	bl	8002ac0 <HAL_UART_Receive>
 80043fe:	b988      	cbnz	r0, 8004424 <ReceiveUart+0x58>
			recieveArray[j]=buffer[0];
 8004400:	7823      	ldrb	r3, [r4, #0]
 8004402:	f898 2000 	ldrb.w	r2, [r8]
 8004406:	54f2      	strb	r2, [r6, r3]
			j++;
 8004408:	3301      	adds	r3, #1
 800440a:	b2db      	uxtb	r3, r3
			if(j>NUM_OF_UART_RECEIVED)
 800440c:	2b14      	cmp	r3, #20
			j++;
 800440e:	bf94      	ite	ls
 8004410:	7023      	strbls	r3, [r4, #0]
				j=0;
 8004412:	7020      	strbhi	r0, [r4, #0]
			DeleteLine();
 8004414:	f7ff ff92 	bl	800433c <DeleteLine>
			HAL_UART_Transmit(&huart2,recieveArray,j,100);
 8004418:	2364      	movs	r3, #100	; 0x64
 800441a:	7822      	ldrb	r2, [r4, #0]
 800441c:	4920      	ldr	r1, [pc, #128]	; (80044a0 <ReceiveUart+0xd4>)
 800441e:	481f      	ldr	r0, [pc, #124]	; (800449c <ReceiveUart+0xd0>)
 8004420:	f7fe faf5 	bl	8002a0e <HAL_UART_Transmit>
		if(recieveArray[NUM_OF_UART_RECEIVED] != 0)
 8004424:	7d33      	ldrb	r3, [r6, #20]
 8004426:	b123      	cbz	r3, 8004432 <ReceiveUart+0x66>
			BufferReset();
 8004428:	f7ff ff58 	bl	80042dc <BufferReset>
			TransmitUart("\r\n\r\nSorry your input is too long...\r\n\r\n");
 800442c:	481d      	ldr	r0, [pc, #116]	; (80044a4 <ReceiveUart+0xd8>)
 800442e:	f7ff ff6f 	bl	8004310 <TransmitUart>
		AutoLogin(autoLogin);
 8004432:	4b1d      	ldr	r3, [pc, #116]	; (80044a8 <ReceiveUart+0xdc>)
				EnterPlacement=i-1;
 8004434:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80044b4 <ReceiveUart+0xe8>
		AutoLogin(autoLogin);
 8004438:	7818      	ldrb	r0, [r3, #0]
 800443a:	f7ff ff97 	bl	800436c <AutoLogin>
		for(i=0;i<NUM_OF_UART_RECEIVED;i++)
 800443e:	4b1b      	ldr	r3, [pc, #108]	; (80044ac <ReceiveUart+0xe0>)
 8004440:	2200      	movs	r2, #0
 8004442:	701a      	strb	r2, [r3, #0]
 8004444:	4698      	mov	r8, r3
 8004446:	f898 3000 	ldrb.w	r3, [r8]
 800444a:	2b13      	cmp	r3, #19
 800444c:	d8ca      	bhi.n	80043e4 <ReceiveUart+0x18>
			if(recieveArray[i]==ENTER)
 800444e:	5cf2      	ldrb	r2, [r6, r3]
 8004450:	2a0d      	cmp	r2, #13
 8004452:	d10e      	bne.n	8004472 <ReceiveUart+0xa6>
				EnterPlacement=i-1;
 8004454:	3b01      	subs	r3, #1
 8004456:	b2db      	uxtb	r3, r3
 8004458:	f889 3000 	strb.w	r3, [r9]
				for(j=EnterPlacement;j<NUM_OF_UART_RECEIVED;j--)
 800445c:	7023      	strb	r3, [r4, #0]
 800445e:	2200      	movs	r2, #0
 8004460:	2b13      	cmp	r3, #19
 8004462:	d90c      	bls.n	800447e <ReceiveUart+0xb2>
 8004464:	b10a      	cbz	r2, 800446a <ReceiveUart+0x9e>
 8004466:	23ff      	movs	r3, #255	; 0xff
 8004468:	7023      	strb	r3, [r4, #0]
				enterFlag=1;
 800446a:	2301      	movs	r3, #1
 800446c:	702b      	strb	r3, [r5, #0]
				BufferReset();
 800446e:	f7ff ff35 	bl	80042dc <BufferReset>
		for(i=0;i<NUM_OF_UART_RECEIVED;i++)
 8004472:	f898 3000 	ldrb.w	r3, [r8]
 8004476:	3301      	adds	r3, #1
 8004478:	f888 3000 	strb.w	r3, [r8]
 800447c:	e7e3      	b.n	8004446 <ReceiveUart+0x7a>
					recieveInputArray[j]=recieveArray[j];
 800447e:	5cf2      	ldrb	r2, [r6, r3]
 8004480:	54fa      	strb	r2, [r7, r3]
				for(j=EnterPlacement;j<NUM_OF_UART_RECEIVED;j--)
 8004482:	3b01      	subs	r3, #1
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2201      	movs	r2, #1
 8004488:	e7ea      	b.n	8004460 <ReceiveUart+0x94>
 800448a:	bf00      	nop
 800448c:	20000575 	.word	0x20000575
 8004490:	200005ad 	.word	0x200005ad
 8004494:	2000015d 	.word	0x2000015d
 8004498:	20000148 	.word	0x20000148
 800449c:	20000624 	.word	0x20000624
 80044a0:	20000576 	.word	0x20000576
 80044a4:	08006106 	.word	0x08006106
 80044a8:	200000a1 	.word	0x200000a1
 80044ac:	20000498 	.word	0x20000498
 80044b0:	2000050c 	.word	0x2000050c
 80044b4:	200006eb 	.word	0x200006eb

080044b8 <RecieveUartCalculationValue>:

uint32_t RecieveUartCalculationValue(void)
{
 80044b8:	b538      	push	{r3, r4, r5, lr}
	ReceiveUart();
 80044ba:	f7ff ff87 	bl	80043cc <ReceiveUart>

	for(x=0;x<NUM_OF_CALCULATION;x++)
 80044be:	4832      	ldr	r0, [pc, #200]	; (8004588 <RecieveUartCalculationValue+0xd0>)
 80044c0:	4b32      	ldr	r3, [pc, #200]	; (800458c <RecieveUartCalculationValue+0xd4>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	7002      	strb	r2, [r0, #0]
 80044c6:	4614      	mov	r4, r2
 80044c8:	4619      	mov	r1, r3
	{
		if(recieveInputArray[x]==0)
			recieveInputArray[x]='0';
 80044ca:	2530      	movs	r5, #48	; 0x30
	for(x=0;x<NUM_OF_CALCULATION;x++)
 80044cc:	2a06      	cmp	r2, #6
 80044ce:	d152      	bne.n	8004576 <RecieveUartCalculationValue+0xbe>
 80044d0:	b104      	cbz	r4, 80044d4 <RecieveUartCalculationValue+0x1c>
 80044d2:	7002      	strb	r2, [r0, #0]
	}

	calculateValue=(recieveInputArray[EnterPlacement]-48);
 80044d4:	4b2e      	ldr	r3, [pc, #184]	; (8004590 <RecieveUartCalculationValue+0xd8>)
 80044d6:	4c2f      	ldr	r4, [pc, #188]	; (8004594 <RecieveUartCalculationValue+0xdc>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	5cca      	ldrb	r2, [r1, r3]
 80044dc:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30

	if(EnterPlacement-1 >= 0 && EnterPlacement-1 <= NUM_OF_CALCULATION)
 80044e0:	1e5a      	subs	r2, r3, #1
 80044e2:	2a06      	cmp	r2, #6
	calculateValue=(recieveInputArray[EnterPlacement]-48);
 80044e4:	6020      	str	r0, [r4, #0]
	if(EnterPlacement-1 >= 0 && EnterPlacement-1 <= NUM_OF_CALCULATION)
 80044e6:	d807      	bhi.n	80044f8 <RecieveUartCalculationValue+0x40>
		calculateValue=(recieveInputArray[EnterPlacement-1]-48)*10+calculateValue;
 80044e8:	18ca      	adds	r2, r1, r3
 80044ea:	250a      	movs	r5, #10
 80044ec:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80044f0:	3a30      	subs	r2, #48	; 0x30
 80044f2:	fb05 0202 	mla	r2, r5, r2, r0
 80044f6:	6022      	str	r2, [r4, #0]

	if(EnterPlacement-2 >= 0 && EnterPlacement-2 <= NUM_OF_CALCULATION)
 80044f8:	1e9a      	subs	r2, r3, #2
 80044fa:	2a06      	cmp	r2, #6
 80044fc:	d808      	bhi.n	8004510 <RecieveUartCalculationValue+0x58>
		calculateValue=(recieveInputArray[EnterPlacement-2]-48)*100+calculateValue;
 80044fe:	18ca      	adds	r2, r1, r3
 8004500:	6820      	ldr	r0, [r4, #0]
 8004502:	f812 2c02 	ldrb.w	r2, [r2, #-2]
 8004506:	2564      	movs	r5, #100	; 0x64
 8004508:	3a30      	subs	r2, #48	; 0x30
 800450a:	fb05 0202 	mla	r2, r5, r2, r0
 800450e:	6022      	str	r2, [r4, #0]

	if(EnterPlacement-3 >= 0 && EnterPlacement-3 <= NUM_OF_CALCULATION)
 8004510:	1eda      	subs	r2, r3, #3
 8004512:	2a06      	cmp	r2, #6
 8004514:	d809      	bhi.n	800452a <RecieveUartCalculationValue+0x72>
		calculateValue=(recieveInputArray[EnterPlacement-3]-48)*1000+calculateValue;
 8004516:	18ca      	adds	r2, r1, r3
 8004518:	6820      	ldr	r0, [r4, #0]
 800451a:	f812 2c03 	ldrb.w	r2, [r2, #-3]
 800451e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8004522:	3a30      	subs	r2, #48	; 0x30
 8004524:	fb05 0202 	mla	r2, r5, r2, r0
 8004528:	6022      	str	r2, [r4, #0]

	if(EnterPlacement-4 >= 0 && EnterPlacement-4 <= NUM_OF_CALCULATION)
 800452a:	1f1a      	subs	r2, r3, #4
 800452c:	2a06      	cmp	r2, #6
 800452e:	d809      	bhi.n	8004544 <RecieveUartCalculationValue+0x8c>
			calculateValue=(recieveInputArray[EnterPlacement-4]-48)*10000+calculateValue;
 8004530:	18ca      	adds	r2, r1, r3
 8004532:	6820      	ldr	r0, [r4, #0]
 8004534:	f812 2c04 	ldrb.w	r2, [r2, #-4]
 8004538:	f242 7510 	movw	r5, #10000	; 0x2710
 800453c:	3a30      	subs	r2, #48	; 0x30
 800453e:	fb05 0202 	mla	r2, r5, r2, r0
 8004542:	6022      	str	r2, [r4, #0]

	if(EnterPlacement-5 >= 0 && EnterPlacement-5 <= NUM_OF_CALCULATION)
 8004544:	1f5a      	subs	r2, r3, #5
 8004546:	2a06      	cmp	r2, #6
 8004548:	d808      	bhi.n	800455c <RecieveUartCalculationValue+0xa4>
				calculateValue=(recieveInputArray[EnterPlacement-5]-48)*100000+calculateValue;
 800454a:	440b      	add	r3, r1
 800454c:	6822      	ldr	r2, [r4, #0]
 800454e:	f813 3c05 	ldrb.w	r3, [r3, #-5]
 8004552:	4911      	ldr	r1, [pc, #68]	; (8004598 <RecieveUartCalculationValue+0xe0>)
 8004554:	3b30      	subs	r3, #48	; 0x30
 8004556:	fb01 2303 	mla	r3, r1, r3, r2
 800455a:	6023      	str	r3, [r4, #0]

	if(calculateValue > 999999)
 800455c:	6822      	ldr	r2, [r4, #0]
 800455e:	4b0f      	ldr	r3, [pc, #60]	; (800459c <RecieveUartCalculationValue+0xe4>)
 8004560:	429a      	cmp	r2, r3
 8004562:	d904      	bls.n	800456e <RecieveUartCalculationValue+0xb6>
	{
		TransmitUart("\r\n\r\nSorry your input is invaild...\r\n\r\n");
 8004564:	480e      	ldr	r0, [pc, #56]	; (80045a0 <RecieveUartCalculationValue+0xe8>)
 8004566:	f7ff fed3 	bl	8004310 <TransmitUart>
		RecieveUartCalculationValue();
 800456a:	f7ff ffa5 	bl	80044b8 <RecieveUartCalculationValue>
	}

	BufferReset();
 800456e:	f7ff feb5 	bl	80042dc <BufferReset>

	//return calculateValue= ((recieveInputArray[EnterPlacement-3]-48)*1000)+((recieveInputArray[EnterPlacement-2]-48)*100)+((recieveInputArray[EnterPlacement-1]-48)*10)+(recieveInputArray[EnterPlacement]-48);


	return calculateValue;
}
 8004572:	6820      	ldr	r0, [r4, #0]
 8004574:	bd38      	pop	{r3, r4, r5, pc}
		if(recieveInputArray[x]==0)
 8004576:	781c      	ldrb	r4, [r3, #0]
 8004578:	b904      	cbnz	r4, 800457c <RecieveUartCalculationValue+0xc4>
			recieveInputArray[x]='0';
 800457a:	701d      	strb	r5, [r3, #0]
 800457c:	3201      	adds	r2, #1
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	3301      	adds	r3, #1
 8004582:	2401      	movs	r4, #1
 8004584:	e7a2      	b.n	80044cc <RecieveUartCalculationValue+0x14>
 8004586:	bf00      	nop
 8004588:	200000a0 	.word	0x200000a0
 800458c:	20000148 	.word	0x20000148
 8004590:	200006eb 	.word	0x200006eb
 8004594:	200000e8 	.word	0x200000e8
 8004598:	000186a0 	.word	0x000186a0
 800459c:	000f423f 	.word	0x000f423f
 80045a0:	08005c12 	.word	0x08005c12

080045a4 <MainMenu>:

//Displaying default menu
void MainMenu(void)
{
 80045a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
//	TransmitUart("* 5- Exit                                             *\r\n");
//	TransmitUart("/*****************************************************/\r\n\n");
//	TransmitUart("Please Select...(Press enter after selection)\r\n");

	TransmitUart("/**********************Main Menu**********************/\r\n");
	TransmitUart("*                                                     *\r\n");
 80045a6:	4c1d      	ldr	r4, [pc, #116]	; (800461c <MainMenu+0x78>)
	TransmitUart("/**********************Main Menu**********************/\r\n");
 80045a8:	481d      	ldr	r0, [pc, #116]	; (8004620 <MainMenu+0x7c>)
 80045aa:	f7ff feb1 	bl	8004310 <TransmitUart>
	TransmitUart("*                                                     *\r\n");
 80045ae:	4620      	mov	r0, r4
 80045b0:	f7ff feae 	bl	8004310 <TransmitUart>
	TransmitUart("* 1- Set Time                                         *\r\n");
 80045b4:	481b      	ldr	r0, [pc, #108]	; (8004624 <MainMenu+0x80>)
 80045b6:	f7ff feab 	bl	8004310 <TransmitUart>
	TransmitUart("* 2- Set Date                                         *\r\n");
 80045ba:	481b      	ldr	r0, [pc, #108]	; (8004628 <MainMenu+0x84>)
 80045bc:	f7ff fea8 	bl	8004310 <TransmitUart>
	TransmitUart("* 3- Set PSI                                          *\r\n");
 80045c0:	481a      	ldr	r0, [pc, #104]	; (800462c <MainMenu+0x88>)
 80045c2:	f7ff fea5 	bl	8004310 <TransmitUart>
	TransmitUart("* 4- Load Cell Mode                                   *\r\n");
 80045c6:	481a      	ldr	r0, [pc, #104]	; (8004630 <MainMenu+0x8c>)
 80045c8:	f7ff fea2 	bl	8004310 <TransmitUart>
	TransmitUart("* 5- Testing Colour Sensor                            *\r\n");
 80045cc:	4819      	ldr	r0, [pc, #100]	; (8004634 <MainMenu+0x90>)
 80045ce:	f7ff fe9f 	bl	8004310 <TransmitUart>
	TransmitUart("* 6- Return to Main Menu                              *\r\n");
 80045d2:	4819      	ldr	r0, [pc, #100]	; (8004638 <MainMenu+0x94>)
 80045d4:	f7ff fe9c 	bl	8004310 <TransmitUart>
	TransmitUart("* 7- Exit                                             *\r\n");
 80045d8:	4818      	ldr	r0, [pc, #96]	; (800463c <MainMenu+0x98>)
 80045da:	f7ff fe99 	bl	8004310 <TransmitUart>
	TransmitUart("*                                                     *\r\n");
 80045de:	4620      	mov	r0, r4
 80045e0:	f7ff fe96 	bl	8004310 <TransmitUart>
	snprintf((char *)buffer,sizeof(buffer),"*         Time: %02d:%02d           Date: %02d/%02d           *\r\n",sTime.Hours,sTime.Minutes,sDate.Date,sDate.Month);
 80045e4:	4916      	ldr	r1, [pc, #88]	; (8004640 <MainMenu+0x9c>)
 80045e6:	4a17      	ldr	r2, [pc, #92]	; (8004644 <MainMenu+0xa0>)
 80045e8:	7848      	ldrb	r0, [r1, #1]
 80045ea:	7813      	ldrb	r3, [r2, #0]
 80045ec:	9002      	str	r0, [sp, #8]
 80045ee:	7889      	ldrb	r1, [r1, #2]
 80045f0:	9101      	str	r1, [sp, #4]
 80045f2:	4c15      	ldr	r4, [pc, #84]	; (8004648 <MainMenu+0xa4>)
 80045f4:	7852      	ldrb	r2, [r2, #1]
 80045f6:	9200      	str	r2, [sp, #0]
 80045f8:	2164      	movs	r1, #100	; 0x64
 80045fa:	4a14      	ldr	r2, [pc, #80]	; (800464c <MainMenu+0xa8>)
 80045fc:	4620      	mov	r0, r4
 80045fe:	f000 fabd 	bl	8004b7c <sniprintf>
	TransmitUart((char *)buffer);
 8004602:	4620      	mov	r0, r4
 8004604:	f7ff fe84 	bl	8004310 <TransmitUart>
	TransmitUart("/*****************************************************/\r\n\n");
 8004608:	4811      	ldr	r0, [pc, #68]	; (8004650 <MainMenu+0xac>)
 800460a:	f7ff fe81 	bl	8004310 <TransmitUart>
	TransmitUart("Please Select...(Press enter after selection)\r\n\n");
 800460e:	4811      	ldr	r0, [pc, #68]	; (8004654 <MainMenu+0xb0>)
}
 8004610:	b004      	add	sp, #16
 8004612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	TransmitUart("Please Select...(Press enter after selection)\r\n\n");
 8004616:	f7ff be7b 	b.w	8004310 <TransmitUart>
 800461a:	bf00      	nop
 800461c:	08005eb9 	.word	0x08005eb9
 8004620:	08005e7f 	.word	0x08005e7f
 8004624:	08005ef3 	.word	0x08005ef3
 8004628:	08005f2d 	.word	0x08005f2d
 800462c:	08005f67 	.word	0x08005f67
 8004630:	08005fa1 	.word	0x08005fa1
 8004634:	08005fdb 	.word	0x08005fdb
 8004638:	08006015 	.word	0x08006015
 800463c:	0800604f 	.word	0x0800604f
 8004640:	20000570 	.word	0x20000570
 8004644:	2000031c 	.word	0x2000031c
 8004648:	2000050c 	.word	0x2000050c
 800464c:	08006089 	.word	0x08006089
 8004650:	080060cb 	.word	0x080060cb
 8004654:	080057da 	.word	0x080057da

08004658 <SettingTime>:

void SettingTime(void)
{
 8004658:	b573      	push	{r0, r1, r4, r5, r6, lr}
	TransmitUart("\r\nSetting Time...\r\n");
 800465a:	4857      	ldr	r0, [pc, #348]	; (80047b8 <SettingTime+0x160>)
 800465c:	f7ff fe58 	bl	8004310 <TransmitUart>
	HAL_Delay(500);
 8004660:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004664:	f7fb fe54 	bl	8000310 <HAL_Delay>
	TransmitUart("Communicating to RTC.\r\n");
 8004668:	4854      	ldr	r0, [pc, #336]	; (80047bc <SettingTime+0x164>)
 800466a:	f7ff fe51 	bl	8004310 <TransmitUart>
	HAL_Delay(500);
 800466e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004672:	f7fb fe4d 	bl	8000310 <HAL_Delay>
	TransmitUart("Communicating to RTC..\r\n");
 8004676:	4852      	ldr	r0, [pc, #328]	; (80047c0 <SettingTime+0x168>)
 8004678:	f7ff fe4a 	bl	8004310 <TransmitUart>
	HAL_Delay(500);
 800467c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004680:	f7fb fe46 	bl	8000310 <HAL_Delay>
	TransmitUart("Communicating to RTC...\r\n");
 8004684:	484f      	ldr	r0, [pc, #316]	; (80047c4 <SettingTime+0x16c>)
 8004686:	f7ff fe43 	bl	8004310 <TransmitUart>
	HAL_Delay(500);
 800468a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800468e:	f7fb fe3f 	bl	8000310 <HAL_Delay>


	if(HAL_RTC_GetState(&hrtc) != HAL_RTC_STATE_READY)
 8004692:	484d      	ldr	r0, [pc, #308]	; (80047c8 <SettingTime+0x170>)
 8004694:	f7fd fb76 	bl	8001d84 <HAL_RTC_GetState>
 8004698:	2801      	cmp	r0, #1
 800469a:	d002      	beq.n	80046a2 <SettingTime+0x4a>
	{
		TransmitUart("\r\nUnable to communicate with RTC\r\n");
 800469c:	484b      	ldr	r0, [pc, #300]	; (80047cc <SettingTime+0x174>)
 800469e:	f7ff fe37 	bl	8004310 <TransmitUart>
	}

	HAL_RTC_GetTime(&hrtc,&sTime,RTC_FORMAT_BCD);
 80046a2:	4c4b      	ldr	r4, [pc, #300]	; (80047d0 <SettingTime+0x178>)
 80046a4:	4848      	ldr	r0, [pc, #288]	; (80047c8 <SettingTime+0x170>)

	//Setting the HOURS

	TransmitUart("\r\n\r\nPlease enter the HOUR now in 24 Hours.(HH)\r\n");
	ReceiveUart();
	hour=((recieveTwoInputsFirst-48)*10)+(recieveTwoInputsSecond-48);  //48 to convert ascii num to int
 80046a6:	4d4b      	ldr	r5, [pc, #300]	; (80047d4 <SettingTime+0x17c>)
	HAL_RTC_GetTime(&hrtc,&sTime,RTC_FORMAT_BCD);
 80046a8:	2201      	movs	r2, #1
 80046aa:	4621      	mov	r1, r4
 80046ac:	f7fd fcb8 	bl	8002020 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc,&sDate,RTC_FORMAT_BCD);
 80046b0:	2201      	movs	r2, #1
 80046b2:	4949      	ldr	r1, [pc, #292]	; (80047d8 <SettingTime+0x180>)
 80046b4:	4844      	ldr	r0, [pc, #272]	; (80047c8 <SettingTime+0x170>)
 80046b6:	f7fd fcdb 	bl	8002070 <HAL_RTC_GetDate>
	snprintf((char *)buffer,sizeof(buffer),"\r\n\r\nThe time now is %02d:%02d\r\n",sTime.Hours,sTime.Minutes);
 80046ba:	7862      	ldrb	r2, [r4, #1]
 80046bc:	7823      	ldrb	r3, [r4, #0]
 80046be:	9200      	str	r2, [sp, #0]
 80046c0:	2164      	movs	r1, #100	; 0x64
 80046c2:	4a46      	ldr	r2, [pc, #280]	; (80047dc <SettingTime+0x184>)
 80046c4:	4846      	ldr	r0, [pc, #280]	; (80047e0 <SettingTime+0x188>)
 80046c6:	f000 fa59 	bl	8004b7c <sniprintf>
	TransmitUart((char *)buffer);
 80046ca:	4845      	ldr	r0, [pc, #276]	; (80047e0 <SettingTime+0x188>)
 80046cc:	f7ff fe20 	bl	8004310 <TransmitUart>
	TransmitUart("\r\n\r\nPlease enter the HOUR now in 24 Hours.(HH)\r\n");
 80046d0:	4844      	ldr	r0, [pc, #272]	; (80047e4 <SettingTime+0x18c>)
 80046d2:	f7ff fe1d 	bl	8004310 <TransmitUart>
	ReceiveUart();
 80046d6:	f7ff fe79 	bl	80043cc <ReceiveUart>
	hour=((recieveTwoInputsFirst-48)*10)+(recieveTwoInputsSecond-48);  //48 to convert ascii num to int
 80046da:	4b43      	ldr	r3, [pc, #268]	; (80047e8 <SettingTime+0x190>)
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	3b30      	subs	r3, #48	; 0x30
 80046e0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80046e4:	4b41      	ldr	r3, [pc, #260]	; (80047ec <SettingTime+0x194>)
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	3b30      	subs	r3, #48	; 0x30
 80046ea:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80046ee:	b2db      	uxtb	r3, r3
	if(hour<0 || hour>24)//Checking for invaild inputs
 80046f0:	2b18      	cmp	r3, #24
	hour=((recieveTwoInputsFirst-48)*10)+(recieveTwoInputsSecond-48);  //48 to convert ascii num to int
 80046f2:	702b      	strb	r3, [r5, #0]
	if(hour<0 || hour>24)//Checking for invaild inputs
 80046f4:	d90a      	bls.n	800470c <SettingTime+0xb4>
	{
		HAL_UART_Transmit(&huart2,buffer,sizeof(buffer),100);
 80046f6:	2364      	movs	r3, #100	; 0x64
 80046f8:	461a      	mov	r2, r3
 80046fa:	4939      	ldr	r1, [pc, #228]	; (80047e0 <SettingTime+0x188>)
 80046fc:	483c      	ldr	r0, [pc, #240]	; (80047f0 <SettingTime+0x198>)
 80046fe:	f7fe f986 	bl	8002a0e <HAL_UART_Transmit>
		TransmitUart("\r\nSorry your input is invalid. Please try again...\r\n");
 8004702:	483c      	ldr	r0, [pc, #240]	; (80047f4 <SettingTime+0x19c>)
 8004704:	f7ff fe04 	bl	8004310 <TransmitUart>
		SettingTime();
 8004708:	f7ff ffa6 	bl	8004658 <SettingTime>
	}

	BufferReset();
 800470c:	f7ff fde6 	bl	80042dc <BufferReset>

	//Setting the MINUTES

	TransmitUart("\r\n\r\nPlease enter the MINUTES now in 24 Hours.(MM)\r\n");
 8004710:	4839      	ldr	r0, [pc, #228]	; (80047f8 <SettingTime+0x1a0>)
	ReceiveUart();
	min=((recieveInputArray[EnterPlacement-1]-48)*10)+(recieveInputArray[EnterPlacement]-48);  //48 to convert ascii num to int
 8004712:	4e3a      	ldr	r6, [pc, #232]	; (80047fc <SettingTime+0x1a4>)
	TransmitUart("\r\n\r\nPlease enter the MINUTES now in 24 Hours.(MM)\r\n");
 8004714:	f7ff fdfc 	bl	8004310 <TransmitUart>
	ReceiveUart();
 8004718:	f7ff fe58 	bl	80043cc <ReceiveUart>
	min=((recieveInputArray[EnterPlacement-1]-48)*10)+(recieveInputArray[EnterPlacement]-48);  //48 to convert ascii num to int
 800471c:	4b38      	ldr	r3, [pc, #224]	; (8004800 <SettingTime+0x1a8>)
 800471e:	4839      	ldr	r0, [pc, #228]	; (8004804 <SettingTime+0x1ac>)
 8004720:	7819      	ldrb	r1, [r3, #0]
 8004722:	1843      	adds	r3, r0, r1
 8004724:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004728:	3b30      	subs	r3, #48	; 0x30
 800472a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800472e:	5c43      	ldrb	r3, [r0, r1]
 8004730:	3b30      	subs	r3, #48	; 0x30
 8004732:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8004736:	b2db      	uxtb	r3, r3
	if(min<0 || min>60)//Checking for invaild inputs
 8004738:	2b3c      	cmp	r3, #60	; 0x3c
	min=((recieveInputArray[EnterPlacement-1]-48)*10)+(recieveInputArray[EnterPlacement]-48);  //48 to convert ascii num to int
 800473a:	7033      	strb	r3, [r6, #0]
	if(min<0 || min>60)//Checking for invaild inputs
 800473c:	d90a      	bls.n	8004754 <SettingTime+0xfc>
	{
		HAL_UART_Transmit(&huart2,buffer,sizeof(buffer),100);
 800473e:	2364      	movs	r3, #100	; 0x64
 8004740:	461a      	mov	r2, r3
 8004742:	4927      	ldr	r1, [pc, #156]	; (80047e0 <SettingTime+0x188>)
 8004744:	482a      	ldr	r0, [pc, #168]	; (80047f0 <SettingTime+0x198>)
 8004746:	f7fe f962 	bl	8002a0e <HAL_UART_Transmit>
		TransmitUart("\r\nSorry your input is invalid. Please try again...\r\n");
 800474a:	482a      	ldr	r0, [pc, #168]	; (80047f4 <SettingTime+0x19c>)
 800474c:	f7ff fde0 	bl	8004310 <TransmitUart>
		SettingTime();
 8004750:	f7ff ff82 	bl	8004658 <SettingTime>
	}
	sTime.Hours=hour;
 8004754:	782b      	ldrb	r3, [r5, #0]
 8004756:	7023      	strb	r3, [r4, #0]
	sTime.Minutes=min;
	if(HAL_RTC_SetTime(&hrtc,&sTime,RTC_FORMAT_BCD) != HAL_OK)
 8004758:	2201      	movs	r2, #1
	sTime.Minutes=min;
 800475a:	7833      	ldrb	r3, [r6, #0]
	if(HAL_RTC_SetTime(&hrtc,&sTime,RTC_FORMAT_BCD) != HAL_OK)
 800475c:	491c      	ldr	r1, [pc, #112]	; (80047d0 <SettingTime+0x178>)
 800475e:	481a      	ldr	r0, [pc, #104]	; (80047c8 <SettingTime+0x170>)
	sTime.Minutes=min;
 8004760:	7063      	strb	r3, [r4, #1]
	if(HAL_RTC_SetTime(&hrtc,&sTime,RTC_FORMAT_BCD) != HAL_OK)
 8004762:	f7fd fbe4 	bl	8001f2e <HAL_RTC_SetTime>
 8004766:	b138      	cbz	r0, 8004778 <SettingTime+0x120>
	{
		TransmitUart("ERROR, sorry something went wrong\r\n");
 8004768:	4827      	ldr	r0, [pc, #156]	; (8004808 <SettingTime+0x1b0>)
 800476a:	f7ff fdd1 	bl	8004310 <TransmitUart>
		TransmitUart("RESTARTING...\r\n");
 800476e:	4827      	ldr	r0, [pc, #156]	; (800480c <SettingTime+0x1b4>)
 8004770:	f7ff fdce 	bl	8004310 <TransmitUart>
		SettingTime();
 8004774:	f7ff ff70 	bl	8004658 <SettingTime>
	}

	TransmitUart("Setting the Time now...\r\n");
 8004778:	4825      	ldr	r0, [pc, #148]	; (8004810 <SettingTime+0x1b8>)
 800477a:	f7ff fdc9 	bl	8004310 <TransmitUart>
	snprintf((char *)buffer,sizeof(buffer),"\r\n\r\nThe time now is %02d:%02d\r\n",sTime.Hours,sTime.Minutes);
 800477e:	7862      	ldrb	r2, [r4, #1]
 8004780:	7823      	ldrb	r3, [r4, #0]
 8004782:	9200      	str	r2, [sp, #0]
 8004784:	2164      	movs	r1, #100	; 0x64
 8004786:	4a15      	ldr	r2, [pc, #84]	; (80047dc <SettingTime+0x184>)
 8004788:	4815      	ldr	r0, [pc, #84]	; (80047e0 <SettingTime+0x188>)
 800478a:	f000 f9f7 	bl	8004b7c <sniprintf>
	TransmitUart((char *)buffer);
 800478e:	4814      	ldr	r0, [pc, #80]	; (80047e0 <SettingTime+0x188>)
 8004790:	f7ff fdbe 	bl	8004310 <TransmitUart>
	HAL_Delay(500);
 8004794:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004798:	f7fb fdba 	bl	8000310 <HAL_Delay>
	TransmitUart("\r\nYour time is all set!\r\n\r\n");
 800479c:	481d      	ldr	r0, [pc, #116]	; (8004814 <SettingTime+0x1bc>)
 800479e:	f7ff fdb7 	bl	8004310 <TransmitUart>
	HAL_Delay(500);
 80047a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80047a6:	f7fb fdb3 	bl	8000310 <HAL_Delay>


	BufferReset();
 80047aa:	f7ff fd97 	bl	80042dc <BufferReset>
	MainMenu();
}
 80047ae:	b002      	add	sp, #8
 80047b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	MainMenu();
 80047b4:	f7ff bef6 	b.w	80045a4 <MainMenu>
 80047b8:	08006242 	.word	0x08006242
 80047bc:	08006256 	.word	0x08006256
 80047c0:	0800626e 	.word	0x0800626e
 80047c4:	08006287 	.word	0x08006287
 80047c8:	2000058c 	.word	0x2000058c
 80047cc:	080062a1 	.word	0x080062a1
 80047d0:	2000031c 	.word	0x2000031c
 80047d4:	20000574 	.word	0x20000574
 80047d8:	20000570 	.word	0x20000570
 80047dc:	080062c4 	.word	0x080062c4
 80047e0:	2000050c 	.word	0x2000050c
 80047e4:	080062e4 	.word	0x080062e4
 80047e8:	200005af 	.word	0x200005af
 80047ec:	200005b0 	.word	0x200005b0
 80047f0:	20000624 	.word	0x20000624
 80047f4:	08006315 	.word	0x08006315
 80047f8:	0800634a 	.word	0x0800634a
 80047fc:	200005ae 	.word	0x200005ae
 8004800:	200006eb 	.word	0x200006eb
 8004804:	20000148 	.word	0x20000148
 8004808:	0800637e 	.word	0x0800637e
 800480c:	080063a2 	.word	0x080063a2
 8004810:	080063b2 	.word	0x080063b2
 8004814:	080063cc 	.word	0x080063cc

08004818 <SettingDate>:

void SettingDate(void)
{
 8004818:	b573      	push	{r0, r1, r4, r5, r6, lr}
	TransmitUart("\r\nSetting Date...\r\n");
 800481a:	4857      	ldr	r0, [pc, #348]	; (8004978 <SettingDate+0x160>)
 800481c:	f7ff fd78 	bl	8004310 <TransmitUart>
	HAL_Delay(500);
 8004820:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004824:	f7fb fd74 	bl	8000310 <HAL_Delay>
	TransmitUart("Communicating to RTC.\r\n");
 8004828:	4854      	ldr	r0, [pc, #336]	; (800497c <SettingDate+0x164>)
 800482a:	f7ff fd71 	bl	8004310 <TransmitUart>
	HAL_Delay(500);
 800482e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004832:	f7fb fd6d 	bl	8000310 <HAL_Delay>
	TransmitUart("Communicating to RTC..\r\n");
 8004836:	4852      	ldr	r0, [pc, #328]	; (8004980 <SettingDate+0x168>)
 8004838:	f7ff fd6a 	bl	8004310 <TransmitUart>
	HAL_Delay(500);
 800483c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004840:	f7fb fd66 	bl	8000310 <HAL_Delay>
	TransmitUart("Communicating to RTC...\r\n");
 8004844:	484f      	ldr	r0, [pc, #316]	; (8004984 <SettingDate+0x16c>)
 8004846:	f7ff fd63 	bl	8004310 <TransmitUart>
	HAL_Delay(500);
 800484a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800484e:	f7fb fd5f 	bl	8000310 <HAL_Delay>

	if(HAL_RTC_GetState(&hrtc) != HAL_RTC_STATE_READY )
 8004852:	484d      	ldr	r0, [pc, #308]	; (8004988 <SettingDate+0x170>)
 8004854:	f7fd fa96 	bl	8001d84 <HAL_RTC_GetState>
 8004858:	2801      	cmp	r0, #1
 800485a:	d002      	beq.n	8004862 <SettingDate+0x4a>
	{
		TransmitUart("\r\nUnable to communicate with RTC\r\n");
 800485c:	484b      	ldr	r0, [pc, #300]	; (800498c <SettingDate+0x174>)
 800485e:	f7ff fd57 	bl	8004310 <TransmitUart>
	}

	HAL_RTC_GetTime(&hrtc,&sTime,RTC_FORMAT_BCD);
	HAL_RTC_GetDate(&hrtc,&sDate,RTC_FORMAT_BCD);
 8004862:	4c4b      	ldr	r4, [pc, #300]	; (8004990 <SettingDate+0x178>)
	HAL_RTC_GetTime(&hrtc,&sTime,RTC_FORMAT_BCD);
 8004864:	494b      	ldr	r1, [pc, #300]	; (8004994 <SettingDate+0x17c>)
 8004866:	4848      	ldr	r0, [pc, #288]	; (8004988 <SettingDate+0x170>)

	//Setting the month

	TransmitUart("\r\n\r\nPlease enter the MONTH now.(MM)\r\n");
	ReceiveUart();
	month=((recieveInputArray[EnterPlacement-1]-48)*10)+(recieveInputArray[EnterPlacement]-48);  //48 to convert ASCII num to int
 8004868:	4d4b      	ldr	r5, [pc, #300]	; (8004998 <SettingDate+0x180>)
	HAL_RTC_GetTime(&hrtc,&sTime,RTC_FORMAT_BCD);
 800486a:	2201      	movs	r2, #1
 800486c:	f7fd fbd8 	bl	8002020 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc,&sDate,RTC_FORMAT_BCD);
 8004870:	2201      	movs	r2, #1
 8004872:	4621      	mov	r1, r4
 8004874:	4844      	ldr	r0, [pc, #272]	; (8004988 <SettingDate+0x170>)
 8004876:	f7fd fbfb 	bl	8002070 <HAL_RTC_GetDate>
	snprintf((char *)buffer,sizeof(buffer),"\r\n\r\nThe date today is %02d/%02d\r\n",sDate.Date,sDate.Month);
 800487a:	7862      	ldrb	r2, [r4, #1]
 800487c:	78a3      	ldrb	r3, [r4, #2]
 800487e:	9200      	str	r2, [sp, #0]
 8004880:	2164      	movs	r1, #100	; 0x64
 8004882:	4a46      	ldr	r2, [pc, #280]	; (800499c <SettingDate+0x184>)
 8004884:	4846      	ldr	r0, [pc, #280]	; (80049a0 <SettingDate+0x188>)
 8004886:	f000 f979 	bl	8004b7c <sniprintf>
	TransmitUart((char *)buffer);
 800488a:	4845      	ldr	r0, [pc, #276]	; (80049a0 <SettingDate+0x188>)
 800488c:	f7ff fd40 	bl	8004310 <TransmitUart>
	TransmitUart("\r\n\r\nPlease enter the MONTH now.(MM)\r\n");
 8004890:	4844      	ldr	r0, [pc, #272]	; (80049a4 <SettingDate+0x18c>)
 8004892:	f7ff fd3d 	bl	8004310 <TransmitUart>
	ReceiveUart();
 8004896:	f7ff fd99 	bl	80043cc <ReceiveUart>
	month=((recieveInputArray[EnterPlacement-1]-48)*10)+(recieveInputArray[EnterPlacement]-48);  //48 to convert ASCII num to int
 800489a:	4b43      	ldr	r3, [pc, #268]	; (80049a8 <SettingDate+0x190>)
 800489c:	4843      	ldr	r0, [pc, #268]	; (80049ac <SettingDate+0x194>)
 800489e:	7819      	ldrb	r1, [r3, #0]
 80048a0:	1843      	adds	r3, r0, r1
 80048a2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80048a6:	3b30      	subs	r3, #48	; 0x30
 80048a8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80048ac:	5c43      	ldrb	r3, [r0, r1]
 80048ae:	3b30      	subs	r3, #48	; 0x30
 80048b0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80048b4:	b2db      	uxtb	r3, r3
	if(month<0 || month>12)//Checking for invalid inputs
 80048b6:	2b0c      	cmp	r3, #12
	month=((recieveInputArray[EnterPlacement-1]-48)*10)+(recieveInputArray[EnterPlacement]-48);  //48 to convert ASCII num to int
 80048b8:	702b      	strb	r3, [r5, #0]
	if(month<0 || month>12)//Checking for invalid inputs
 80048ba:	d90a      	bls.n	80048d2 <SettingDate+0xba>
	{
		HAL_UART_Transmit(&huart2,buffer,sizeof(buffer),100);
 80048bc:	2364      	movs	r3, #100	; 0x64
 80048be:	461a      	mov	r2, r3
 80048c0:	4937      	ldr	r1, [pc, #220]	; (80049a0 <SettingDate+0x188>)
 80048c2:	483b      	ldr	r0, [pc, #236]	; (80049b0 <SettingDate+0x198>)
 80048c4:	f7fe f8a3 	bl	8002a0e <HAL_UART_Transmit>
		TransmitUart("\r\nSorry your input is invalid. Please try again...\r\n");
 80048c8:	483a      	ldr	r0, [pc, #232]	; (80049b4 <SettingDate+0x19c>)
 80048ca:	f7ff fd21 	bl	8004310 <TransmitUart>
		SettingDate();
 80048ce:	f7ff ffa3 	bl	8004818 <SettingDate>
	}

	BufferReset();
 80048d2:	f7ff fd03 	bl	80042dc <BufferReset>

	//Setting your date

	TransmitUart("\r\n\r\nPlease enter the DATE now.(DD)\r\n");
 80048d6:	4838      	ldr	r0, [pc, #224]	; (80049b8 <SettingDate+0x1a0>)
	ReceiveUart();
	date=((recieveTwoInputsFirst-48)*10)+(recieveTwoInputsSecond-48);  //48 to convert ASCII num to int
 80048d8:	4e38      	ldr	r6, [pc, #224]	; (80049bc <SettingDate+0x1a4>)
	TransmitUart("\r\n\r\nPlease enter the DATE now.(DD)\r\n");
 80048da:	f7ff fd19 	bl	8004310 <TransmitUart>
	ReceiveUart();
 80048de:	f7ff fd75 	bl	80043cc <ReceiveUart>
	date=((recieveTwoInputsFirst-48)*10)+(recieveTwoInputsSecond-48);  //48 to convert ASCII num to int
 80048e2:	4b37      	ldr	r3, [pc, #220]	; (80049c0 <SettingDate+0x1a8>)
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	3b30      	subs	r3, #48	; 0x30
 80048e8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80048ec:	4b35      	ldr	r3, [pc, #212]	; (80049c4 <SettingDate+0x1ac>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	3b30      	subs	r3, #48	; 0x30
 80048f2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80048f6:	b2db      	uxtb	r3, r3
	if(date<0 || date>31)//Checking for invalid inputs
 80048f8:	2b1f      	cmp	r3, #31
	date=((recieveTwoInputsFirst-48)*10)+(recieveTwoInputsSecond-48);  //48 to convert ASCII num to int
 80048fa:	7033      	strb	r3, [r6, #0]
	if(date<0 || date>31)//Checking for invalid inputs
 80048fc:	d90a      	bls.n	8004914 <SettingDate+0xfc>
	{
		HAL_UART_Transmit(&huart2,buffer,sizeof(buffer),100);
 80048fe:	2364      	movs	r3, #100	; 0x64
 8004900:	461a      	mov	r2, r3
 8004902:	4927      	ldr	r1, [pc, #156]	; (80049a0 <SettingDate+0x188>)
 8004904:	482a      	ldr	r0, [pc, #168]	; (80049b0 <SettingDate+0x198>)
 8004906:	f7fe f882 	bl	8002a0e <HAL_UART_Transmit>
		TransmitUart("\r\nSorry your input is invalid. Please try again...\r\n");
 800490a:	482a      	ldr	r0, [pc, #168]	; (80049b4 <SettingDate+0x19c>)
 800490c:	f7ff fd00 	bl	8004310 <TransmitUart>
		SettingDate();
 8004910:	f7ff ff82 	bl	8004818 <SettingDate>
	}
	sDate.Month=month;
 8004914:	782b      	ldrb	r3, [r5, #0]
 8004916:	7063      	strb	r3, [r4, #1]
	sDate.Date=date;
	if(HAL_RTC_SetDate(&hrtc,&sDate,RTC_FORMAT_BCD) != HAL_OK)
 8004918:	2201      	movs	r2, #1
	sDate.Date=date;
 800491a:	7833      	ldrb	r3, [r6, #0]
	if(HAL_RTC_SetDate(&hrtc,&sDate,RTC_FORMAT_BCD) != HAL_OK)
 800491c:	491c      	ldr	r1, [pc, #112]	; (8004990 <SettingDate+0x178>)
 800491e:	481a      	ldr	r0, [pc, #104]	; (8004988 <SettingDate+0x170>)
	sDate.Date=date;
 8004920:	70a3      	strb	r3, [r4, #2]
	if(HAL_RTC_SetDate(&hrtc,&sDate,RTC_FORMAT_BCD) != HAL_OK)
 8004922:	f7fd faa4 	bl	8001e6e <HAL_RTC_SetDate>
 8004926:	b138      	cbz	r0, 8004938 <SettingDate+0x120>
	{
		TransmitUart("ERROR, sorry something went wrong\r\n");
 8004928:	4827      	ldr	r0, [pc, #156]	; (80049c8 <SettingDate+0x1b0>)
 800492a:	f7ff fcf1 	bl	8004310 <TransmitUart>
		TransmitUart("RESTARTING...\r\n");
 800492e:	4827      	ldr	r0, [pc, #156]	; (80049cc <SettingDate+0x1b4>)
 8004930:	f7ff fcee 	bl	8004310 <TransmitUart>
		SettingTime();
 8004934:	f7ff fe90 	bl	8004658 <SettingTime>
	}
	TransmitUart("Setting the DATE now...\r\n");
 8004938:	4825      	ldr	r0, [pc, #148]	; (80049d0 <SettingDate+0x1b8>)
 800493a:	f7ff fce9 	bl	8004310 <TransmitUart>
	snprintf((char *)buffer,sizeof(buffer),"\r\n\r\nThe date today is %02d/%02d\r\n",sDate.Date,sDate.Month);
 800493e:	7862      	ldrb	r2, [r4, #1]
 8004940:	78a3      	ldrb	r3, [r4, #2]
 8004942:	9200      	str	r2, [sp, #0]
 8004944:	2164      	movs	r1, #100	; 0x64
 8004946:	4a15      	ldr	r2, [pc, #84]	; (800499c <SettingDate+0x184>)
 8004948:	4815      	ldr	r0, [pc, #84]	; (80049a0 <SettingDate+0x188>)
 800494a:	f000 f917 	bl	8004b7c <sniprintf>
	TransmitUart((char *)buffer);
 800494e:	4814      	ldr	r0, [pc, #80]	; (80049a0 <SettingDate+0x188>)
 8004950:	f7ff fcde 	bl	8004310 <TransmitUart>
	HAL_Delay(500);
 8004954:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004958:	f7fb fcda 	bl	8000310 <HAL_Delay>
	TransmitUart("\r\nYour date is all set!\r\n\r\n");
 800495c:	481d      	ldr	r0, [pc, #116]	; (80049d4 <SettingDate+0x1bc>)
 800495e:	f7ff fcd7 	bl	8004310 <TransmitUart>
	HAL_Delay(500);
 8004962:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004966:	f7fb fcd3 	bl	8000310 <HAL_Delay>

	BufferReset();
 800496a:	f7ff fcb7 	bl	80042dc <BufferReset>
	MainMenu();
}
 800496e:	b002      	add	sp, #8
 8004970:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	MainMenu();
 8004974:	f7ff be16 	b.w	80045a4 <MainMenu>
 8004978:	0800612e 	.word	0x0800612e
 800497c:	08006256 	.word	0x08006256
 8004980:	0800626e 	.word	0x0800626e
 8004984:	08006287 	.word	0x08006287
 8004988:	2000058c 	.word	0x2000058c
 800498c:	080062a1 	.word	0x080062a1
 8004990:	20000570 	.word	0x20000570
 8004994:	2000031c 	.word	0x2000031c
 8004998:	2000037c 	.word	0x2000037c
 800499c:	08006142 	.word	0x08006142
 80049a0:	2000050c 	.word	0x2000050c
 80049a4:	08006164 	.word	0x08006164
 80049a8:	200006eb 	.word	0x200006eb
 80049ac:	20000148 	.word	0x20000148
 80049b0:	20000624 	.word	0x20000624
 80049b4:	08006315 	.word	0x08006315
 80049b8:	0800618a 	.word	0x0800618a
 80049bc:	200006e8 	.word	0x200006e8
 80049c0:	200005af 	.word	0x200005af
 80049c4:	200005b0 	.word	0x200005b0
 80049c8:	0800637e 	.word	0x0800637e
 80049cc:	080063a2 	.word	0x080063a2
 80049d0:	080061af 	.word	0x080061af
 80049d4:	080061c9 	.word	0x080061c9

080049d8 <SettingPSI>:

void SettingPSI(void)
{
 80049d8:	b508      	push	{r3, lr}
	TransmitUart("\r\nSetting PSI...\r\n");
 80049da:	4805      	ldr	r0, [pc, #20]	; (80049f0 <SettingPSI+0x18>)
 80049dc:	f7ff fc98 	bl	8004310 <TransmitUart>

	TransmitUart("\r\n\r\nPlease enter the The PSI rating now.(NN)\r\n");
 80049e0:	4804      	ldr	r0, [pc, #16]	; (80049f4 <SettingPSI+0x1c>)
 80049e2:	f7ff fc95 	bl	8004310 <TransmitUart>
	//ReceiveUart(2);

	MainMenu();
}
 80049e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MainMenu();
 80049ea:	f7ff bddb 	b.w	80045a4 <MainMenu>
 80049ee:	bf00      	nop
 80049f0:	08006200 	.word	0x08006200
 80049f4:	08006213 	.word	0x08006213

080049f8 <SettingExit>:

void SettingExit(void)
{
 80049f8:	b508      	push	{r3, lr}
	TransmitUart("Exit.\r\n");
 80049fa:	480c      	ldr	r0, [pc, #48]	; (8004a2c <SettingExit+0x34>)
 80049fc:	f7ff fc88 	bl	8004310 <TransmitUart>
	HAL_Delay(500);
 8004a00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a04:	f7fb fc84 	bl	8000310 <HAL_Delay>
	TransmitUart("Exit..\r\n");
 8004a08:	4809      	ldr	r0, [pc, #36]	; (8004a30 <SettingExit+0x38>)
 8004a0a:	f7ff fc81 	bl	8004310 <TransmitUart>
	HAL_Delay(500);
 8004a0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a12:	f7fb fc7d 	bl	8000310 <HAL_Delay>
	TransmitUart("Exit...\r\n");
 8004a16:	4807      	ldr	r0, [pc, #28]	; (8004a34 <SettingExit+0x3c>)
 8004a18:	f7ff fc7a 	bl	8004310 <TransmitUart>
	HAL_Delay(500);
 8004a1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a20:	f7fb fc76 	bl	8000310 <HAL_Delay>

	exitFlag=1;
 8004a24:	4b04      	ldr	r3, [pc, #16]	; (8004a38 <SettingExit+0x40>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	701a      	strb	r2, [r3, #0]
 8004a2a:	bd08      	pop	{r3, pc}
 8004a2c:	080061e5 	.word	0x080061e5
 8004a30:	080061ed 	.word	0x080061ed
 8004a34:	080061f6 	.word	0x080061f6
 8004a38:	200001c4 	.word	0x200001c4

08004a3c <LoadCellMode>:

}

void LoadCellMode(void)
{
	TransmitUart("\r\nEntering Load Cell Mode...\r\n");
 8004a3c:	4801      	ldr	r0, [pc, #4]	; (8004a44 <LoadCellMode+0x8>)
 8004a3e:	f7ff bc67 	b.w	8004310 <TransmitUart>
 8004a42:	bf00      	nop
 8004a44:	08005e60 	.word	0x08005e60

08004a48 <SelectionMenuUart>:
	//SelectionLoadCellModeMenu();
}

void SelectionMenuUart(void)
{
 8004a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	MainMenu();
	exitFlag=0;
 8004a4a:	4c1d      	ldr	r4, [pc, #116]	; (8004ac0 <SelectionMenuUart+0x78>)
	autoLogin='5';

	while(exitFlag==0)
	{
		ReceiveUart();
		menuSelection=recieveInputArray[EnterPlacement];
 8004a4c:	4d1d      	ldr	r5, [pc, #116]	; (8004ac4 <SelectionMenuUart+0x7c>)
 8004a4e:	4e1e      	ldr	r6, [pc, #120]	; (8004ac8 <SelectionMenuUart+0x80>)
 8004a50:	4f1e      	ldr	r7, [pc, #120]	; (8004acc <SelectionMenuUart+0x84>)
	MainMenu();
 8004a52:	f7ff fda7 	bl	80045a4 <MainMenu>
	exitFlag=0;
 8004a56:	2200      	movs	r2, #0
 8004a58:	7022      	strb	r2, [r4, #0]
	autoLogin='5';
 8004a5a:	4a1d      	ldr	r2, [pc, #116]	; (8004ad0 <SelectionMenuUart+0x88>)
 8004a5c:	2135      	movs	r1, #53	; 0x35
 8004a5e:	7011      	strb	r1, [r2, #0]
	while(exitFlag==0)
 8004a60:	7823      	ldrb	r3, [r4, #0]
 8004a62:	b103      	cbz	r3, 8004a66 <SelectionMenuUart+0x1e>
				SelectionMenuUart();
				break;
		}

	}
}
 8004a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ReceiveUart();
 8004a66:	f7ff fcb1 	bl	80043cc <ReceiveUart>
		menuSelection=recieveInputArray[EnterPlacement];
 8004a6a:	7833      	ldrb	r3, [r6, #0]
 8004a6c:	5ceb      	ldrb	r3, [r5, r3]
 8004a6e:	703b      	strb	r3, [r7, #0]
		switch(menuSelection)
 8004a70:	3b31      	subs	r3, #49	; 0x31
 8004a72:	2b06      	cmp	r3, #6
 8004a74:	d817      	bhi.n	8004aa6 <SelectionMenuUart+0x5e>
 8004a76:	e8df f003 	tbb	[pc, r3]
 8004a7a:	0704      	.short	0x0704
 8004a7c:	1f100d0a 	.word	0x1f100d0a
 8004a80:	13          	.byte	0x13
 8004a81:	00          	.byte	0x00
				SettingTime();
 8004a82:	f7ff fde9 	bl	8004658 <SettingTime>
				break;
 8004a86:	e7eb      	b.n	8004a60 <SelectionMenuUart+0x18>
				SettingDate();
 8004a88:	f7ff fec6 	bl	8004818 <SettingDate>
				break;
 8004a8c:	e7e8      	b.n	8004a60 <SelectionMenuUart+0x18>
				SettingPSI();
 8004a8e:	f7ff ffa3 	bl	80049d8 <SettingPSI>
				break;
 8004a92:	e7e5      	b.n	8004a60 <SelectionMenuUart+0x18>
				LoadCellMode();
 8004a94:	f7ff ffd2 	bl	8004a3c <LoadCellMode>
				break;
 8004a98:	e7e2      	b.n	8004a60 <SelectionMenuUart+0x18>
	SelectionColourSensorUart();
 8004a9a:	f7fe fc9f 	bl	80033dc <SelectionColourSensorUart>
 8004a9e:	e7df      	b.n	8004a60 <SelectionMenuUart+0x18>
				SettingExit();
 8004aa0:	f7ff ffaa 	bl	80049f8 <SettingExit>
				break;
 8004aa4:	e7dc      	b.n	8004a60 <SelectionMenuUart+0x18>
					HAL_UART_Transmit(&huart2,buffer,sizeof(buffer),100);
 8004aa6:	2364      	movs	r3, #100	; 0x64
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	490a      	ldr	r1, [pc, #40]	; (8004ad4 <SelectionMenuUart+0x8c>)
 8004aac:	480a      	ldr	r0, [pc, #40]	; (8004ad8 <SelectionMenuUart+0x90>)
 8004aae:	f7fd ffae 	bl	8002a0e <HAL_UART_Transmit>
					TransmitUart("\r\nSorry your input is invalid. Please try again...\r\n\r\n\r\n\r\n");
 8004ab2:	480a      	ldr	r0, [pc, #40]	; (8004adc <SelectionMenuUart+0x94>)
 8004ab4:	f7ff fc2c 	bl	8004310 <TransmitUart>
				SelectionMenuUart();
 8004ab8:	f7ff ffc6 	bl	8004a48 <SelectionMenuUart>
				break;
 8004abc:	e7d0      	b.n	8004a60 <SelectionMenuUart+0x18>
 8004abe:	bf00      	nop
 8004ac0:	200001c4 	.word	0x200001c4
 8004ac4:	20000148 	.word	0x20000148
 8004ac8:	200006eb 	.word	0x200006eb
 8004acc:	200006e9 	.word	0x200006e9
 8004ad0:	200000a1 	.word	0x200000a1
 8004ad4:	2000050c 	.word	0x2000050c
 8004ad8:	20000624 	.word	0x20000624
 8004adc:	08005b19 	.word	0x08005b19

08004ae0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004ae0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b18 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004ae4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004ae6:	e003      	b.n	8004af0 <LoopCopyDataInit>

08004ae8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004ae8:	4b0c      	ldr	r3, [pc, #48]	; (8004b1c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004aea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004aec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004aee:	3104      	adds	r1, #4

08004af0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004af0:	480b      	ldr	r0, [pc, #44]	; (8004b20 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004af2:	4b0c      	ldr	r3, [pc, #48]	; (8004b24 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004af4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004af6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004af8:	d3f6      	bcc.n	8004ae8 <CopyDataInit>
	ldr	r2, =_sbss
 8004afa:	4a0b      	ldr	r2, [pc, #44]	; (8004b28 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004afc:	e002      	b.n	8004b04 <LoopFillZerobss>

08004afe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004afe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004b00:	f842 3b04 	str.w	r3, [r2], #4

08004b04 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004b04:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <LoopForever+0x16>)
	cmp	r2, r3
 8004b06:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004b08:	d3f9      	bcc.n	8004afe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004b0a:	f7ff fbb3 	bl	8004274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b0e:	f000 f811 	bl	8004b34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004b12:	f7fe ff03 	bl	800391c <main>

08004b16 <LoopForever>:

LoopForever:
    b LoopForever
 8004b16:	e7fe      	b.n	8004b16 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004b18:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8004b1c:	08006424 	.word	0x08006424
	ldr	r0, =_sdata
 8004b20:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004b24:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 8004b28:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 8004b2c:	200006f0 	.word	0x200006f0

08004b30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004b30:	e7fe      	b.n	8004b30 <ADC1_2_IRQHandler>
	...

08004b34 <__libc_init_array>:
 8004b34:	b570      	push	{r4, r5, r6, lr}
 8004b36:	4e0d      	ldr	r6, [pc, #52]	; (8004b6c <__libc_init_array+0x38>)
 8004b38:	4c0d      	ldr	r4, [pc, #52]	; (8004b70 <__libc_init_array+0x3c>)
 8004b3a:	1ba4      	subs	r4, r4, r6
 8004b3c:	10a4      	asrs	r4, r4, #2
 8004b3e:	2500      	movs	r5, #0
 8004b40:	42a5      	cmp	r5, r4
 8004b42:	d109      	bne.n	8004b58 <__libc_init_array+0x24>
 8004b44:	4e0b      	ldr	r6, [pc, #44]	; (8004b74 <__libc_init_array+0x40>)
 8004b46:	4c0c      	ldr	r4, [pc, #48]	; (8004b78 <__libc_init_array+0x44>)
 8004b48:	f000 fc54 	bl	80053f4 <_init>
 8004b4c:	1ba4      	subs	r4, r4, r6
 8004b4e:	10a4      	asrs	r4, r4, #2
 8004b50:	2500      	movs	r5, #0
 8004b52:	42a5      	cmp	r5, r4
 8004b54:	d105      	bne.n	8004b62 <__libc_init_array+0x2e>
 8004b56:	bd70      	pop	{r4, r5, r6, pc}
 8004b58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b5c:	4798      	blx	r3
 8004b5e:	3501      	adds	r5, #1
 8004b60:	e7ee      	b.n	8004b40 <__libc_init_array+0xc>
 8004b62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b66:	4798      	blx	r3
 8004b68:	3501      	adds	r5, #1
 8004b6a:	e7f2      	b.n	8004b52 <__libc_init_array+0x1e>
 8004b6c:	0800641c 	.word	0x0800641c
 8004b70:	0800641c 	.word	0x0800641c
 8004b74:	0800641c 	.word	0x0800641c
 8004b78:	08006420 	.word	0x08006420

08004b7c <sniprintf>:
 8004b7c:	b40c      	push	{r2, r3}
 8004b7e:	b530      	push	{r4, r5, lr}
 8004b80:	4b17      	ldr	r3, [pc, #92]	; (8004be0 <sniprintf+0x64>)
 8004b82:	1e0c      	subs	r4, r1, #0
 8004b84:	b09d      	sub	sp, #116	; 0x74
 8004b86:	681d      	ldr	r5, [r3, #0]
 8004b88:	da08      	bge.n	8004b9c <sniprintf+0x20>
 8004b8a:	238b      	movs	r3, #139	; 0x8b
 8004b8c:	602b      	str	r3, [r5, #0]
 8004b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b92:	b01d      	add	sp, #116	; 0x74
 8004b94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b98:	b002      	add	sp, #8
 8004b9a:	4770      	bx	lr
 8004b9c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004ba0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004ba4:	bf14      	ite	ne
 8004ba6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004baa:	4623      	moveq	r3, r4
 8004bac:	9304      	str	r3, [sp, #16]
 8004bae:	9307      	str	r3, [sp, #28]
 8004bb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bb4:	9002      	str	r0, [sp, #8]
 8004bb6:	9006      	str	r0, [sp, #24]
 8004bb8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004bbc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004bbe:	ab21      	add	r3, sp, #132	; 0x84
 8004bc0:	a902      	add	r1, sp, #8
 8004bc2:	4628      	mov	r0, r5
 8004bc4:	9301      	str	r3, [sp, #4]
 8004bc6:	f000 f869 	bl	8004c9c <_svfiprintf_r>
 8004bca:	1c43      	adds	r3, r0, #1
 8004bcc:	bfbc      	itt	lt
 8004bce:	238b      	movlt	r3, #139	; 0x8b
 8004bd0:	602b      	strlt	r3, [r5, #0]
 8004bd2:	2c00      	cmp	r4, #0
 8004bd4:	d0dd      	beq.n	8004b92 <sniprintf+0x16>
 8004bd6:	9b02      	ldr	r3, [sp, #8]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	701a      	strb	r2, [r3, #0]
 8004bdc:	e7d9      	b.n	8004b92 <sniprintf+0x16>
 8004bde:	bf00      	nop
 8004be0:	20000020 	.word	0x20000020

08004be4 <__ssputs_r>:
 8004be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004be8:	688e      	ldr	r6, [r1, #8]
 8004bea:	429e      	cmp	r6, r3
 8004bec:	4682      	mov	sl, r0
 8004bee:	460c      	mov	r4, r1
 8004bf0:	4691      	mov	r9, r2
 8004bf2:	4698      	mov	r8, r3
 8004bf4:	d835      	bhi.n	8004c62 <__ssputs_r+0x7e>
 8004bf6:	898a      	ldrh	r2, [r1, #12]
 8004bf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004bfc:	d031      	beq.n	8004c62 <__ssputs_r+0x7e>
 8004bfe:	6825      	ldr	r5, [r4, #0]
 8004c00:	6909      	ldr	r1, [r1, #16]
 8004c02:	1a6f      	subs	r7, r5, r1
 8004c04:	6965      	ldr	r5, [r4, #20]
 8004c06:	2302      	movs	r3, #2
 8004c08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c0c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004c10:	f108 0301 	add.w	r3, r8, #1
 8004c14:	443b      	add	r3, r7
 8004c16:	429d      	cmp	r5, r3
 8004c18:	bf38      	it	cc
 8004c1a:	461d      	movcc	r5, r3
 8004c1c:	0553      	lsls	r3, r2, #21
 8004c1e:	d531      	bpl.n	8004c84 <__ssputs_r+0xa0>
 8004c20:	4629      	mov	r1, r5
 8004c22:	f000 fb39 	bl	8005298 <_malloc_r>
 8004c26:	4606      	mov	r6, r0
 8004c28:	b950      	cbnz	r0, 8004c40 <__ssputs_r+0x5c>
 8004c2a:	230c      	movs	r3, #12
 8004c2c:	f8ca 3000 	str.w	r3, [sl]
 8004c30:	89a3      	ldrh	r3, [r4, #12]
 8004c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c36:	81a3      	strh	r3, [r4, #12]
 8004c38:	f04f 30ff 	mov.w	r0, #4294967295
 8004c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c40:	463a      	mov	r2, r7
 8004c42:	6921      	ldr	r1, [r4, #16]
 8004c44:	f000 fab4 	bl	80051b0 <memcpy>
 8004c48:	89a3      	ldrh	r3, [r4, #12]
 8004c4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c52:	81a3      	strh	r3, [r4, #12]
 8004c54:	6126      	str	r6, [r4, #16]
 8004c56:	6165      	str	r5, [r4, #20]
 8004c58:	443e      	add	r6, r7
 8004c5a:	1bed      	subs	r5, r5, r7
 8004c5c:	6026      	str	r6, [r4, #0]
 8004c5e:	60a5      	str	r5, [r4, #8]
 8004c60:	4646      	mov	r6, r8
 8004c62:	4546      	cmp	r6, r8
 8004c64:	bf28      	it	cs
 8004c66:	4646      	movcs	r6, r8
 8004c68:	4632      	mov	r2, r6
 8004c6a:	4649      	mov	r1, r9
 8004c6c:	6820      	ldr	r0, [r4, #0]
 8004c6e:	f000 faaa 	bl	80051c6 <memmove>
 8004c72:	68a3      	ldr	r3, [r4, #8]
 8004c74:	1b9b      	subs	r3, r3, r6
 8004c76:	60a3      	str	r3, [r4, #8]
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	441e      	add	r6, r3
 8004c7c:	6026      	str	r6, [r4, #0]
 8004c7e:	2000      	movs	r0, #0
 8004c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c84:	462a      	mov	r2, r5
 8004c86:	f000 fb65 	bl	8005354 <_realloc_r>
 8004c8a:	4606      	mov	r6, r0
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	d1e1      	bne.n	8004c54 <__ssputs_r+0x70>
 8004c90:	6921      	ldr	r1, [r4, #16]
 8004c92:	4650      	mov	r0, sl
 8004c94:	f000 fab2 	bl	80051fc <_free_r>
 8004c98:	e7c7      	b.n	8004c2a <__ssputs_r+0x46>
	...

08004c9c <_svfiprintf_r>:
 8004c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca0:	b09d      	sub	sp, #116	; 0x74
 8004ca2:	4680      	mov	r8, r0
 8004ca4:	9303      	str	r3, [sp, #12]
 8004ca6:	898b      	ldrh	r3, [r1, #12]
 8004ca8:	061c      	lsls	r4, r3, #24
 8004caa:	460d      	mov	r5, r1
 8004cac:	4616      	mov	r6, r2
 8004cae:	d50f      	bpl.n	8004cd0 <_svfiprintf_r+0x34>
 8004cb0:	690b      	ldr	r3, [r1, #16]
 8004cb2:	b96b      	cbnz	r3, 8004cd0 <_svfiprintf_r+0x34>
 8004cb4:	2140      	movs	r1, #64	; 0x40
 8004cb6:	f000 faef 	bl	8005298 <_malloc_r>
 8004cba:	6028      	str	r0, [r5, #0]
 8004cbc:	6128      	str	r0, [r5, #16]
 8004cbe:	b928      	cbnz	r0, 8004ccc <_svfiprintf_r+0x30>
 8004cc0:	230c      	movs	r3, #12
 8004cc2:	f8c8 3000 	str.w	r3, [r8]
 8004cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cca:	e0c5      	b.n	8004e58 <_svfiprintf_r+0x1bc>
 8004ccc:	2340      	movs	r3, #64	; 0x40
 8004cce:	616b      	str	r3, [r5, #20]
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8004cd4:	2320      	movs	r3, #32
 8004cd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cda:	2330      	movs	r3, #48	; 0x30
 8004cdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ce0:	f04f 0b01 	mov.w	fp, #1
 8004ce4:	4637      	mov	r7, r6
 8004ce6:	463c      	mov	r4, r7
 8004ce8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d13c      	bne.n	8004d6a <_svfiprintf_r+0xce>
 8004cf0:	ebb7 0a06 	subs.w	sl, r7, r6
 8004cf4:	d00b      	beq.n	8004d0e <_svfiprintf_r+0x72>
 8004cf6:	4653      	mov	r3, sl
 8004cf8:	4632      	mov	r2, r6
 8004cfa:	4629      	mov	r1, r5
 8004cfc:	4640      	mov	r0, r8
 8004cfe:	f7ff ff71 	bl	8004be4 <__ssputs_r>
 8004d02:	3001      	adds	r0, #1
 8004d04:	f000 80a3 	beq.w	8004e4e <_svfiprintf_r+0x1b2>
 8004d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d0a:	4453      	add	r3, sl
 8004d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8004d0e:	783b      	ldrb	r3, [r7, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 809c 	beq.w	8004e4e <_svfiprintf_r+0x1b2>
 8004d16:	2300      	movs	r3, #0
 8004d18:	f04f 32ff 	mov.w	r2, #4294967295
 8004d1c:	9304      	str	r3, [sp, #16]
 8004d1e:	9307      	str	r3, [sp, #28]
 8004d20:	9205      	str	r2, [sp, #20]
 8004d22:	9306      	str	r3, [sp, #24]
 8004d24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d28:	931a      	str	r3, [sp, #104]	; 0x68
 8004d2a:	2205      	movs	r2, #5
 8004d2c:	7821      	ldrb	r1, [r4, #0]
 8004d2e:	4850      	ldr	r0, [pc, #320]	; (8004e70 <_svfiprintf_r+0x1d4>)
 8004d30:	f7fb fa56 	bl	80001e0 <memchr>
 8004d34:	1c67      	adds	r7, r4, #1
 8004d36:	9b04      	ldr	r3, [sp, #16]
 8004d38:	b9d8      	cbnz	r0, 8004d72 <_svfiprintf_r+0xd6>
 8004d3a:	06d9      	lsls	r1, r3, #27
 8004d3c:	bf44      	itt	mi
 8004d3e:	2220      	movmi	r2, #32
 8004d40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d44:	071a      	lsls	r2, r3, #28
 8004d46:	bf44      	itt	mi
 8004d48:	222b      	movmi	r2, #43	; 0x2b
 8004d4a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d4e:	7822      	ldrb	r2, [r4, #0]
 8004d50:	2a2a      	cmp	r2, #42	; 0x2a
 8004d52:	d016      	beq.n	8004d82 <_svfiprintf_r+0xe6>
 8004d54:	9a07      	ldr	r2, [sp, #28]
 8004d56:	2100      	movs	r1, #0
 8004d58:	200a      	movs	r0, #10
 8004d5a:	4627      	mov	r7, r4
 8004d5c:	3401      	adds	r4, #1
 8004d5e:	783b      	ldrb	r3, [r7, #0]
 8004d60:	3b30      	subs	r3, #48	; 0x30
 8004d62:	2b09      	cmp	r3, #9
 8004d64:	d951      	bls.n	8004e0a <_svfiprintf_r+0x16e>
 8004d66:	b1c9      	cbz	r1, 8004d9c <_svfiprintf_r+0x100>
 8004d68:	e011      	b.n	8004d8e <_svfiprintf_r+0xf2>
 8004d6a:	2b25      	cmp	r3, #37	; 0x25
 8004d6c:	d0c0      	beq.n	8004cf0 <_svfiprintf_r+0x54>
 8004d6e:	4627      	mov	r7, r4
 8004d70:	e7b9      	b.n	8004ce6 <_svfiprintf_r+0x4a>
 8004d72:	4a3f      	ldr	r2, [pc, #252]	; (8004e70 <_svfiprintf_r+0x1d4>)
 8004d74:	1a80      	subs	r0, r0, r2
 8004d76:	fa0b f000 	lsl.w	r0, fp, r0
 8004d7a:	4318      	orrs	r0, r3
 8004d7c:	9004      	str	r0, [sp, #16]
 8004d7e:	463c      	mov	r4, r7
 8004d80:	e7d3      	b.n	8004d2a <_svfiprintf_r+0x8e>
 8004d82:	9a03      	ldr	r2, [sp, #12]
 8004d84:	1d11      	adds	r1, r2, #4
 8004d86:	6812      	ldr	r2, [r2, #0]
 8004d88:	9103      	str	r1, [sp, #12]
 8004d8a:	2a00      	cmp	r2, #0
 8004d8c:	db01      	blt.n	8004d92 <_svfiprintf_r+0xf6>
 8004d8e:	9207      	str	r2, [sp, #28]
 8004d90:	e004      	b.n	8004d9c <_svfiprintf_r+0x100>
 8004d92:	4252      	negs	r2, r2
 8004d94:	f043 0302 	orr.w	r3, r3, #2
 8004d98:	9207      	str	r2, [sp, #28]
 8004d9a:	9304      	str	r3, [sp, #16]
 8004d9c:	783b      	ldrb	r3, [r7, #0]
 8004d9e:	2b2e      	cmp	r3, #46	; 0x2e
 8004da0:	d10e      	bne.n	8004dc0 <_svfiprintf_r+0x124>
 8004da2:	787b      	ldrb	r3, [r7, #1]
 8004da4:	2b2a      	cmp	r3, #42	; 0x2a
 8004da6:	f107 0101 	add.w	r1, r7, #1
 8004daa:	d132      	bne.n	8004e12 <_svfiprintf_r+0x176>
 8004dac:	9b03      	ldr	r3, [sp, #12]
 8004dae:	1d1a      	adds	r2, r3, #4
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	9203      	str	r2, [sp, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	bfb8      	it	lt
 8004db8:	f04f 33ff 	movlt.w	r3, #4294967295
 8004dbc:	3702      	adds	r7, #2
 8004dbe:	9305      	str	r3, [sp, #20]
 8004dc0:	4c2c      	ldr	r4, [pc, #176]	; (8004e74 <_svfiprintf_r+0x1d8>)
 8004dc2:	7839      	ldrb	r1, [r7, #0]
 8004dc4:	2203      	movs	r2, #3
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	f7fb fa0a 	bl	80001e0 <memchr>
 8004dcc:	b138      	cbz	r0, 8004dde <_svfiprintf_r+0x142>
 8004dce:	2340      	movs	r3, #64	; 0x40
 8004dd0:	1b00      	subs	r0, r0, r4
 8004dd2:	fa03 f000 	lsl.w	r0, r3, r0
 8004dd6:	9b04      	ldr	r3, [sp, #16]
 8004dd8:	4303      	orrs	r3, r0
 8004dda:	9304      	str	r3, [sp, #16]
 8004ddc:	3701      	adds	r7, #1
 8004dde:	7839      	ldrb	r1, [r7, #0]
 8004de0:	4825      	ldr	r0, [pc, #148]	; (8004e78 <_svfiprintf_r+0x1dc>)
 8004de2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004de6:	2206      	movs	r2, #6
 8004de8:	1c7e      	adds	r6, r7, #1
 8004dea:	f7fb f9f9 	bl	80001e0 <memchr>
 8004dee:	2800      	cmp	r0, #0
 8004df0:	d035      	beq.n	8004e5e <_svfiprintf_r+0x1c2>
 8004df2:	4b22      	ldr	r3, [pc, #136]	; (8004e7c <_svfiprintf_r+0x1e0>)
 8004df4:	b9fb      	cbnz	r3, 8004e36 <_svfiprintf_r+0x19a>
 8004df6:	9b03      	ldr	r3, [sp, #12]
 8004df8:	3307      	adds	r3, #7
 8004dfa:	f023 0307 	bic.w	r3, r3, #7
 8004dfe:	3308      	adds	r3, #8
 8004e00:	9303      	str	r3, [sp, #12]
 8004e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e04:	444b      	add	r3, r9
 8004e06:	9309      	str	r3, [sp, #36]	; 0x24
 8004e08:	e76c      	b.n	8004ce4 <_svfiprintf_r+0x48>
 8004e0a:	fb00 3202 	mla	r2, r0, r2, r3
 8004e0e:	2101      	movs	r1, #1
 8004e10:	e7a3      	b.n	8004d5a <_svfiprintf_r+0xbe>
 8004e12:	2300      	movs	r3, #0
 8004e14:	9305      	str	r3, [sp, #20]
 8004e16:	4618      	mov	r0, r3
 8004e18:	240a      	movs	r4, #10
 8004e1a:	460f      	mov	r7, r1
 8004e1c:	3101      	adds	r1, #1
 8004e1e:	783a      	ldrb	r2, [r7, #0]
 8004e20:	3a30      	subs	r2, #48	; 0x30
 8004e22:	2a09      	cmp	r2, #9
 8004e24:	d903      	bls.n	8004e2e <_svfiprintf_r+0x192>
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0ca      	beq.n	8004dc0 <_svfiprintf_r+0x124>
 8004e2a:	9005      	str	r0, [sp, #20]
 8004e2c:	e7c8      	b.n	8004dc0 <_svfiprintf_r+0x124>
 8004e2e:	fb04 2000 	mla	r0, r4, r0, r2
 8004e32:	2301      	movs	r3, #1
 8004e34:	e7f1      	b.n	8004e1a <_svfiprintf_r+0x17e>
 8004e36:	ab03      	add	r3, sp, #12
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	462a      	mov	r2, r5
 8004e3c:	4b10      	ldr	r3, [pc, #64]	; (8004e80 <_svfiprintf_r+0x1e4>)
 8004e3e:	a904      	add	r1, sp, #16
 8004e40:	4640      	mov	r0, r8
 8004e42:	f3af 8000 	nop.w
 8004e46:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004e4a:	4681      	mov	r9, r0
 8004e4c:	d1d9      	bne.n	8004e02 <_svfiprintf_r+0x166>
 8004e4e:	89ab      	ldrh	r3, [r5, #12]
 8004e50:	065b      	lsls	r3, r3, #25
 8004e52:	f53f af38 	bmi.w	8004cc6 <_svfiprintf_r+0x2a>
 8004e56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e58:	b01d      	add	sp, #116	; 0x74
 8004e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e5e:	ab03      	add	r3, sp, #12
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	462a      	mov	r2, r5
 8004e64:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <_svfiprintf_r+0x1e4>)
 8004e66:	a904      	add	r1, sp, #16
 8004e68:	4640      	mov	r0, r8
 8004e6a:	f000 f881 	bl	8004f70 <_printf_i>
 8004e6e:	e7ea      	b.n	8004e46 <_svfiprintf_r+0x1aa>
 8004e70:	080063e8 	.word	0x080063e8
 8004e74:	080063ee 	.word	0x080063ee
 8004e78:	080063f2 	.word	0x080063f2
 8004e7c:	00000000 	.word	0x00000000
 8004e80:	08004be5 	.word	0x08004be5

08004e84 <_printf_common>:
 8004e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e88:	4691      	mov	r9, r2
 8004e8a:	461f      	mov	r7, r3
 8004e8c:	688a      	ldr	r2, [r1, #8]
 8004e8e:	690b      	ldr	r3, [r1, #16]
 8004e90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e94:	4293      	cmp	r3, r2
 8004e96:	bfb8      	it	lt
 8004e98:	4613      	movlt	r3, r2
 8004e9a:	f8c9 3000 	str.w	r3, [r9]
 8004e9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ea2:	4606      	mov	r6, r0
 8004ea4:	460c      	mov	r4, r1
 8004ea6:	b112      	cbz	r2, 8004eae <_printf_common+0x2a>
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	f8c9 3000 	str.w	r3, [r9]
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	0699      	lsls	r1, r3, #26
 8004eb2:	bf42      	ittt	mi
 8004eb4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004eb8:	3302      	addmi	r3, #2
 8004eba:	f8c9 3000 	strmi.w	r3, [r9]
 8004ebe:	6825      	ldr	r5, [r4, #0]
 8004ec0:	f015 0506 	ands.w	r5, r5, #6
 8004ec4:	d107      	bne.n	8004ed6 <_printf_common+0x52>
 8004ec6:	f104 0a19 	add.w	sl, r4, #25
 8004eca:	68e3      	ldr	r3, [r4, #12]
 8004ecc:	f8d9 2000 	ldr.w	r2, [r9]
 8004ed0:	1a9b      	subs	r3, r3, r2
 8004ed2:	429d      	cmp	r5, r3
 8004ed4:	db29      	blt.n	8004f2a <_printf_common+0xa6>
 8004ed6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004eda:	6822      	ldr	r2, [r4, #0]
 8004edc:	3300      	adds	r3, #0
 8004ede:	bf18      	it	ne
 8004ee0:	2301      	movne	r3, #1
 8004ee2:	0692      	lsls	r2, r2, #26
 8004ee4:	d42e      	bmi.n	8004f44 <_printf_common+0xc0>
 8004ee6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004eea:	4639      	mov	r1, r7
 8004eec:	4630      	mov	r0, r6
 8004eee:	47c0      	blx	r8
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	d021      	beq.n	8004f38 <_printf_common+0xb4>
 8004ef4:	6823      	ldr	r3, [r4, #0]
 8004ef6:	68e5      	ldr	r5, [r4, #12]
 8004ef8:	f8d9 2000 	ldr.w	r2, [r9]
 8004efc:	f003 0306 	and.w	r3, r3, #6
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	bf08      	it	eq
 8004f04:	1aad      	subeq	r5, r5, r2
 8004f06:	68a3      	ldr	r3, [r4, #8]
 8004f08:	6922      	ldr	r2, [r4, #16]
 8004f0a:	bf0c      	ite	eq
 8004f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f10:	2500      	movne	r5, #0
 8004f12:	4293      	cmp	r3, r2
 8004f14:	bfc4      	itt	gt
 8004f16:	1a9b      	subgt	r3, r3, r2
 8004f18:	18ed      	addgt	r5, r5, r3
 8004f1a:	f04f 0900 	mov.w	r9, #0
 8004f1e:	341a      	adds	r4, #26
 8004f20:	454d      	cmp	r5, r9
 8004f22:	d11b      	bne.n	8004f5c <_printf_common+0xd8>
 8004f24:	2000      	movs	r0, #0
 8004f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	4652      	mov	r2, sl
 8004f2e:	4639      	mov	r1, r7
 8004f30:	4630      	mov	r0, r6
 8004f32:	47c0      	blx	r8
 8004f34:	3001      	adds	r0, #1
 8004f36:	d103      	bne.n	8004f40 <_printf_common+0xbc>
 8004f38:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f40:	3501      	adds	r5, #1
 8004f42:	e7c2      	b.n	8004eca <_printf_common+0x46>
 8004f44:	18e1      	adds	r1, r4, r3
 8004f46:	1c5a      	adds	r2, r3, #1
 8004f48:	2030      	movs	r0, #48	; 0x30
 8004f4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f4e:	4422      	add	r2, r4
 8004f50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f58:	3302      	adds	r3, #2
 8004f5a:	e7c4      	b.n	8004ee6 <_printf_common+0x62>
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	4622      	mov	r2, r4
 8004f60:	4639      	mov	r1, r7
 8004f62:	4630      	mov	r0, r6
 8004f64:	47c0      	blx	r8
 8004f66:	3001      	adds	r0, #1
 8004f68:	d0e6      	beq.n	8004f38 <_printf_common+0xb4>
 8004f6a:	f109 0901 	add.w	r9, r9, #1
 8004f6e:	e7d7      	b.n	8004f20 <_printf_common+0x9c>

08004f70 <_printf_i>:
 8004f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f74:	4617      	mov	r7, r2
 8004f76:	7e0a      	ldrb	r2, [r1, #24]
 8004f78:	b085      	sub	sp, #20
 8004f7a:	2a6e      	cmp	r2, #110	; 0x6e
 8004f7c:	4698      	mov	r8, r3
 8004f7e:	4606      	mov	r6, r0
 8004f80:	460c      	mov	r4, r1
 8004f82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f84:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004f88:	f000 80bc 	beq.w	8005104 <_printf_i+0x194>
 8004f8c:	d81a      	bhi.n	8004fc4 <_printf_i+0x54>
 8004f8e:	2a63      	cmp	r2, #99	; 0x63
 8004f90:	d02e      	beq.n	8004ff0 <_printf_i+0x80>
 8004f92:	d80a      	bhi.n	8004faa <_printf_i+0x3a>
 8004f94:	2a00      	cmp	r2, #0
 8004f96:	f000 80c8 	beq.w	800512a <_printf_i+0x1ba>
 8004f9a:	2a58      	cmp	r2, #88	; 0x58
 8004f9c:	f000 808a 	beq.w	80050b4 <_printf_i+0x144>
 8004fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fa4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004fa8:	e02a      	b.n	8005000 <_printf_i+0x90>
 8004faa:	2a64      	cmp	r2, #100	; 0x64
 8004fac:	d001      	beq.n	8004fb2 <_printf_i+0x42>
 8004fae:	2a69      	cmp	r2, #105	; 0x69
 8004fb0:	d1f6      	bne.n	8004fa0 <_printf_i+0x30>
 8004fb2:	6821      	ldr	r1, [r4, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004fba:	d023      	beq.n	8005004 <_printf_i+0x94>
 8004fbc:	1d11      	adds	r1, r2, #4
 8004fbe:	6019      	str	r1, [r3, #0]
 8004fc0:	6813      	ldr	r3, [r2, #0]
 8004fc2:	e027      	b.n	8005014 <_printf_i+0xa4>
 8004fc4:	2a73      	cmp	r2, #115	; 0x73
 8004fc6:	f000 80b4 	beq.w	8005132 <_printf_i+0x1c2>
 8004fca:	d808      	bhi.n	8004fde <_printf_i+0x6e>
 8004fcc:	2a6f      	cmp	r2, #111	; 0x6f
 8004fce:	d02a      	beq.n	8005026 <_printf_i+0xb6>
 8004fd0:	2a70      	cmp	r2, #112	; 0x70
 8004fd2:	d1e5      	bne.n	8004fa0 <_printf_i+0x30>
 8004fd4:	680a      	ldr	r2, [r1, #0]
 8004fd6:	f042 0220 	orr.w	r2, r2, #32
 8004fda:	600a      	str	r2, [r1, #0]
 8004fdc:	e003      	b.n	8004fe6 <_printf_i+0x76>
 8004fde:	2a75      	cmp	r2, #117	; 0x75
 8004fe0:	d021      	beq.n	8005026 <_printf_i+0xb6>
 8004fe2:	2a78      	cmp	r2, #120	; 0x78
 8004fe4:	d1dc      	bne.n	8004fa0 <_printf_i+0x30>
 8004fe6:	2278      	movs	r2, #120	; 0x78
 8004fe8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004fec:	496e      	ldr	r1, [pc, #440]	; (80051a8 <_printf_i+0x238>)
 8004fee:	e064      	b.n	80050ba <_printf_i+0x14a>
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004ff6:	1d11      	adds	r1, r2, #4
 8004ff8:	6019      	str	r1, [r3, #0]
 8004ffa:	6813      	ldr	r3, [r2, #0]
 8004ffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005000:	2301      	movs	r3, #1
 8005002:	e0a3      	b.n	800514c <_printf_i+0x1dc>
 8005004:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005008:	f102 0104 	add.w	r1, r2, #4
 800500c:	6019      	str	r1, [r3, #0]
 800500e:	d0d7      	beq.n	8004fc0 <_printf_i+0x50>
 8005010:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005014:	2b00      	cmp	r3, #0
 8005016:	da03      	bge.n	8005020 <_printf_i+0xb0>
 8005018:	222d      	movs	r2, #45	; 0x2d
 800501a:	425b      	negs	r3, r3
 800501c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005020:	4962      	ldr	r1, [pc, #392]	; (80051ac <_printf_i+0x23c>)
 8005022:	220a      	movs	r2, #10
 8005024:	e017      	b.n	8005056 <_printf_i+0xe6>
 8005026:	6820      	ldr	r0, [r4, #0]
 8005028:	6819      	ldr	r1, [r3, #0]
 800502a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800502e:	d003      	beq.n	8005038 <_printf_i+0xc8>
 8005030:	1d08      	adds	r0, r1, #4
 8005032:	6018      	str	r0, [r3, #0]
 8005034:	680b      	ldr	r3, [r1, #0]
 8005036:	e006      	b.n	8005046 <_printf_i+0xd6>
 8005038:	f010 0f40 	tst.w	r0, #64	; 0x40
 800503c:	f101 0004 	add.w	r0, r1, #4
 8005040:	6018      	str	r0, [r3, #0]
 8005042:	d0f7      	beq.n	8005034 <_printf_i+0xc4>
 8005044:	880b      	ldrh	r3, [r1, #0]
 8005046:	4959      	ldr	r1, [pc, #356]	; (80051ac <_printf_i+0x23c>)
 8005048:	2a6f      	cmp	r2, #111	; 0x6f
 800504a:	bf14      	ite	ne
 800504c:	220a      	movne	r2, #10
 800504e:	2208      	moveq	r2, #8
 8005050:	2000      	movs	r0, #0
 8005052:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005056:	6865      	ldr	r5, [r4, #4]
 8005058:	60a5      	str	r5, [r4, #8]
 800505a:	2d00      	cmp	r5, #0
 800505c:	f2c0 809c 	blt.w	8005198 <_printf_i+0x228>
 8005060:	6820      	ldr	r0, [r4, #0]
 8005062:	f020 0004 	bic.w	r0, r0, #4
 8005066:	6020      	str	r0, [r4, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d13f      	bne.n	80050ec <_printf_i+0x17c>
 800506c:	2d00      	cmp	r5, #0
 800506e:	f040 8095 	bne.w	800519c <_printf_i+0x22c>
 8005072:	4675      	mov	r5, lr
 8005074:	2a08      	cmp	r2, #8
 8005076:	d10b      	bne.n	8005090 <_printf_i+0x120>
 8005078:	6823      	ldr	r3, [r4, #0]
 800507a:	07da      	lsls	r2, r3, #31
 800507c:	d508      	bpl.n	8005090 <_printf_i+0x120>
 800507e:	6923      	ldr	r3, [r4, #16]
 8005080:	6862      	ldr	r2, [r4, #4]
 8005082:	429a      	cmp	r2, r3
 8005084:	bfde      	ittt	le
 8005086:	2330      	movle	r3, #48	; 0x30
 8005088:	f805 3c01 	strble.w	r3, [r5, #-1]
 800508c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005090:	ebae 0305 	sub.w	r3, lr, r5
 8005094:	6123      	str	r3, [r4, #16]
 8005096:	f8cd 8000 	str.w	r8, [sp]
 800509a:	463b      	mov	r3, r7
 800509c:	aa03      	add	r2, sp, #12
 800509e:	4621      	mov	r1, r4
 80050a0:	4630      	mov	r0, r6
 80050a2:	f7ff feef 	bl	8004e84 <_printf_common>
 80050a6:	3001      	adds	r0, #1
 80050a8:	d155      	bne.n	8005156 <_printf_i+0x1e6>
 80050aa:	f04f 30ff 	mov.w	r0, #4294967295
 80050ae:	b005      	add	sp, #20
 80050b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050b4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80050b8:	493c      	ldr	r1, [pc, #240]	; (80051ac <_printf_i+0x23c>)
 80050ba:	6822      	ldr	r2, [r4, #0]
 80050bc:	6818      	ldr	r0, [r3, #0]
 80050be:	f012 0f80 	tst.w	r2, #128	; 0x80
 80050c2:	f100 0504 	add.w	r5, r0, #4
 80050c6:	601d      	str	r5, [r3, #0]
 80050c8:	d001      	beq.n	80050ce <_printf_i+0x15e>
 80050ca:	6803      	ldr	r3, [r0, #0]
 80050cc:	e002      	b.n	80050d4 <_printf_i+0x164>
 80050ce:	0655      	lsls	r5, r2, #25
 80050d0:	d5fb      	bpl.n	80050ca <_printf_i+0x15a>
 80050d2:	8803      	ldrh	r3, [r0, #0]
 80050d4:	07d0      	lsls	r0, r2, #31
 80050d6:	bf44      	itt	mi
 80050d8:	f042 0220 	orrmi.w	r2, r2, #32
 80050dc:	6022      	strmi	r2, [r4, #0]
 80050de:	b91b      	cbnz	r3, 80050e8 <_printf_i+0x178>
 80050e0:	6822      	ldr	r2, [r4, #0]
 80050e2:	f022 0220 	bic.w	r2, r2, #32
 80050e6:	6022      	str	r2, [r4, #0]
 80050e8:	2210      	movs	r2, #16
 80050ea:	e7b1      	b.n	8005050 <_printf_i+0xe0>
 80050ec:	4675      	mov	r5, lr
 80050ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80050f2:	fb02 3310 	mls	r3, r2, r0, r3
 80050f6:	5ccb      	ldrb	r3, [r1, r3]
 80050f8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80050fc:	4603      	mov	r3, r0
 80050fe:	2800      	cmp	r0, #0
 8005100:	d1f5      	bne.n	80050ee <_printf_i+0x17e>
 8005102:	e7b7      	b.n	8005074 <_printf_i+0x104>
 8005104:	6808      	ldr	r0, [r1, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	6949      	ldr	r1, [r1, #20]
 800510a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800510e:	d004      	beq.n	800511a <_printf_i+0x1aa>
 8005110:	1d10      	adds	r0, r2, #4
 8005112:	6018      	str	r0, [r3, #0]
 8005114:	6813      	ldr	r3, [r2, #0]
 8005116:	6019      	str	r1, [r3, #0]
 8005118:	e007      	b.n	800512a <_printf_i+0x1ba>
 800511a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800511e:	f102 0004 	add.w	r0, r2, #4
 8005122:	6018      	str	r0, [r3, #0]
 8005124:	6813      	ldr	r3, [r2, #0]
 8005126:	d0f6      	beq.n	8005116 <_printf_i+0x1a6>
 8005128:	8019      	strh	r1, [r3, #0]
 800512a:	2300      	movs	r3, #0
 800512c:	6123      	str	r3, [r4, #16]
 800512e:	4675      	mov	r5, lr
 8005130:	e7b1      	b.n	8005096 <_printf_i+0x126>
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	1d11      	adds	r1, r2, #4
 8005136:	6019      	str	r1, [r3, #0]
 8005138:	6815      	ldr	r5, [r2, #0]
 800513a:	6862      	ldr	r2, [r4, #4]
 800513c:	2100      	movs	r1, #0
 800513e:	4628      	mov	r0, r5
 8005140:	f7fb f84e 	bl	80001e0 <memchr>
 8005144:	b108      	cbz	r0, 800514a <_printf_i+0x1da>
 8005146:	1b40      	subs	r0, r0, r5
 8005148:	6060      	str	r0, [r4, #4]
 800514a:	6863      	ldr	r3, [r4, #4]
 800514c:	6123      	str	r3, [r4, #16]
 800514e:	2300      	movs	r3, #0
 8005150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005154:	e79f      	b.n	8005096 <_printf_i+0x126>
 8005156:	6923      	ldr	r3, [r4, #16]
 8005158:	462a      	mov	r2, r5
 800515a:	4639      	mov	r1, r7
 800515c:	4630      	mov	r0, r6
 800515e:	47c0      	blx	r8
 8005160:	3001      	adds	r0, #1
 8005162:	d0a2      	beq.n	80050aa <_printf_i+0x13a>
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	079b      	lsls	r3, r3, #30
 8005168:	d507      	bpl.n	800517a <_printf_i+0x20a>
 800516a:	2500      	movs	r5, #0
 800516c:	f104 0919 	add.w	r9, r4, #25
 8005170:	68e3      	ldr	r3, [r4, #12]
 8005172:	9a03      	ldr	r2, [sp, #12]
 8005174:	1a9b      	subs	r3, r3, r2
 8005176:	429d      	cmp	r5, r3
 8005178:	db05      	blt.n	8005186 <_printf_i+0x216>
 800517a:	68e0      	ldr	r0, [r4, #12]
 800517c:	9b03      	ldr	r3, [sp, #12]
 800517e:	4298      	cmp	r0, r3
 8005180:	bfb8      	it	lt
 8005182:	4618      	movlt	r0, r3
 8005184:	e793      	b.n	80050ae <_printf_i+0x13e>
 8005186:	2301      	movs	r3, #1
 8005188:	464a      	mov	r2, r9
 800518a:	4639      	mov	r1, r7
 800518c:	4630      	mov	r0, r6
 800518e:	47c0      	blx	r8
 8005190:	3001      	adds	r0, #1
 8005192:	d08a      	beq.n	80050aa <_printf_i+0x13a>
 8005194:	3501      	adds	r5, #1
 8005196:	e7eb      	b.n	8005170 <_printf_i+0x200>
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1a7      	bne.n	80050ec <_printf_i+0x17c>
 800519c:	780b      	ldrb	r3, [r1, #0]
 800519e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051a6:	e765      	b.n	8005074 <_printf_i+0x104>
 80051a8:	0800640a 	.word	0x0800640a
 80051ac:	080063f9 	.word	0x080063f9

080051b0 <memcpy>:
 80051b0:	b510      	push	{r4, lr}
 80051b2:	1e43      	subs	r3, r0, #1
 80051b4:	440a      	add	r2, r1
 80051b6:	4291      	cmp	r1, r2
 80051b8:	d100      	bne.n	80051bc <memcpy+0xc>
 80051ba:	bd10      	pop	{r4, pc}
 80051bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051c4:	e7f7      	b.n	80051b6 <memcpy+0x6>

080051c6 <memmove>:
 80051c6:	4288      	cmp	r0, r1
 80051c8:	b510      	push	{r4, lr}
 80051ca:	eb01 0302 	add.w	r3, r1, r2
 80051ce:	d803      	bhi.n	80051d8 <memmove+0x12>
 80051d0:	1e42      	subs	r2, r0, #1
 80051d2:	4299      	cmp	r1, r3
 80051d4:	d10c      	bne.n	80051f0 <memmove+0x2a>
 80051d6:	bd10      	pop	{r4, pc}
 80051d8:	4298      	cmp	r0, r3
 80051da:	d2f9      	bcs.n	80051d0 <memmove+0xa>
 80051dc:	1881      	adds	r1, r0, r2
 80051de:	1ad2      	subs	r2, r2, r3
 80051e0:	42d3      	cmn	r3, r2
 80051e2:	d100      	bne.n	80051e6 <memmove+0x20>
 80051e4:	bd10      	pop	{r4, pc}
 80051e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051ea:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80051ee:	e7f7      	b.n	80051e0 <memmove+0x1a>
 80051f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051f4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80051f8:	e7eb      	b.n	80051d2 <memmove+0xc>
	...

080051fc <_free_r>:
 80051fc:	b538      	push	{r3, r4, r5, lr}
 80051fe:	4605      	mov	r5, r0
 8005200:	2900      	cmp	r1, #0
 8005202:	d045      	beq.n	8005290 <_free_r+0x94>
 8005204:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005208:	1f0c      	subs	r4, r1, #4
 800520a:	2b00      	cmp	r3, #0
 800520c:	bfb8      	it	lt
 800520e:	18e4      	addlt	r4, r4, r3
 8005210:	f000 f8d6 	bl	80053c0 <__malloc_lock>
 8005214:	4a1f      	ldr	r2, [pc, #124]	; (8005294 <_free_r+0x98>)
 8005216:	6813      	ldr	r3, [r2, #0]
 8005218:	4610      	mov	r0, r2
 800521a:	b933      	cbnz	r3, 800522a <_free_r+0x2e>
 800521c:	6063      	str	r3, [r4, #4]
 800521e:	6014      	str	r4, [r2, #0]
 8005220:	4628      	mov	r0, r5
 8005222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005226:	f000 b8cc 	b.w	80053c2 <__malloc_unlock>
 800522a:	42a3      	cmp	r3, r4
 800522c:	d90c      	bls.n	8005248 <_free_r+0x4c>
 800522e:	6821      	ldr	r1, [r4, #0]
 8005230:	1862      	adds	r2, r4, r1
 8005232:	4293      	cmp	r3, r2
 8005234:	bf04      	itt	eq
 8005236:	681a      	ldreq	r2, [r3, #0]
 8005238:	685b      	ldreq	r3, [r3, #4]
 800523a:	6063      	str	r3, [r4, #4]
 800523c:	bf04      	itt	eq
 800523e:	1852      	addeq	r2, r2, r1
 8005240:	6022      	streq	r2, [r4, #0]
 8005242:	6004      	str	r4, [r0, #0]
 8005244:	e7ec      	b.n	8005220 <_free_r+0x24>
 8005246:	4613      	mov	r3, r2
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	b10a      	cbz	r2, 8005250 <_free_r+0x54>
 800524c:	42a2      	cmp	r2, r4
 800524e:	d9fa      	bls.n	8005246 <_free_r+0x4a>
 8005250:	6819      	ldr	r1, [r3, #0]
 8005252:	1858      	adds	r0, r3, r1
 8005254:	42a0      	cmp	r0, r4
 8005256:	d10b      	bne.n	8005270 <_free_r+0x74>
 8005258:	6820      	ldr	r0, [r4, #0]
 800525a:	4401      	add	r1, r0
 800525c:	1858      	adds	r0, r3, r1
 800525e:	4282      	cmp	r2, r0
 8005260:	6019      	str	r1, [r3, #0]
 8005262:	d1dd      	bne.n	8005220 <_free_r+0x24>
 8005264:	6810      	ldr	r0, [r2, #0]
 8005266:	6852      	ldr	r2, [r2, #4]
 8005268:	605a      	str	r2, [r3, #4]
 800526a:	4401      	add	r1, r0
 800526c:	6019      	str	r1, [r3, #0]
 800526e:	e7d7      	b.n	8005220 <_free_r+0x24>
 8005270:	d902      	bls.n	8005278 <_free_r+0x7c>
 8005272:	230c      	movs	r3, #12
 8005274:	602b      	str	r3, [r5, #0]
 8005276:	e7d3      	b.n	8005220 <_free_r+0x24>
 8005278:	6820      	ldr	r0, [r4, #0]
 800527a:	1821      	adds	r1, r4, r0
 800527c:	428a      	cmp	r2, r1
 800527e:	bf04      	itt	eq
 8005280:	6811      	ldreq	r1, [r2, #0]
 8005282:	6852      	ldreq	r2, [r2, #4]
 8005284:	6062      	str	r2, [r4, #4]
 8005286:	bf04      	itt	eq
 8005288:	1809      	addeq	r1, r1, r0
 800528a:	6021      	streq	r1, [r4, #0]
 800528c:	605c      	str	r4, [r3, #4]
 800528e:	e7c7      	b.n	8005220 <_free_r+0x24>
 8005290:	bd38      	pop	{r3, r4, r5, pc}
 8005292:	bf00      	nop
 8005294:	200000b0 	.word	0x200000b0

08005298 <_malloc_r>:
 8005298:	b570      	push	{r4, r5, r6, lr}
 800529a:	1ccd      	adds	r5, r1, #3
 800529c:	f025 0503 	bic.w	r5, r5, #3
 80052a0:	3508      	adds	r5, #8
 80052a2:	2d0c      	cmp	r5, #12
 80052a4:	bf38      	it	cc
 80052a6:	250c      	movcc	r5, #12
 80052a8:	2d00      	cmp	r5, #0
 80052aa:	4606      	mov	r6, r0
 80052ac:	db01      	blt.n	80052b2 <_malloc_r+0x1a>
 80052ae:	42a9      	cmp	r1, r5
 80052b0:	d903      	bls.n	80052ba <_malloc_r+0x22>
 80052b2:	230c      	movs	r3, #12
 80052b4:	6033      	str	r3, [r6, #0]
 80052b6:	2000      	movs	r0, #0
 80052b8:	bd70      	pop	{r4, r5, r6, pc}
 80052ba:	f000 f881 	bl	80053c0 <__malloc_lock>
 80052be:	4a23      	ldr	r2, [pc, #140]	; (800534c <_malloc_r+0xb4>)
 80052c0:	6814      	ldr	r4, [r2, #0]
 80052c2:	4621      	mov	r1, r4
 80052c4:	b991      	cbnz	r1, 80052ec <_malloc_r+0x54>
 80052c6:	4c22      	ldr	r4, [pc, #136]	; (8005350 <_malloc_r+0xb8>)
 80052c8:	6823      	ldr	r3, [r4, #0]
 80052ca:	b91b      	cbnz	r3, 80052d4 <_malloc_r+0x3c>
 80052cc:	4630      	mov	r0, r6
 80052ce:	f000 f867 	bl	80053a0 <_sbrk_r>
 80052d2:	6020      	str	r0, [r4, #0]
 80052d4:	4629      	mov	r1, r5
 80052d6:	4630      	mov	r0, r6
 80052d8:	f000 f862 	bl	80053a0 <_sbrk_r>
 80052dc:	1c43      	adds	r3, r0, #1
 80052de:	d126      	bne.n	800532e <_malloc_r+0x96>
 80052e0:	230c      	movs	r3, #12
 80052e2:	6033      	str	r3, [r6, #0]
 80052e4:	4630      	mov	r0, r6
 80052e6:	f000 f86c 	bl	80053c2 <__malloc_unlock>
 80052ea:	e7e4      	b.n	80052b6 <_malloc_r+0x1e>
 80052ec:	680b      	ldr	r3, [r1, #0]
 80052ee:	1b5b      	subs	r3, r3, r5
 80052f0:	d41a      	bmi.n	8005328 <_malloc_r+0x90>
 80052f2:	2b0b      	cmp	r3, #11
 80052f4:	d90f      	bls.n	8005316 <_malloc_r+0x7e>
 80052f6:	600b      	str	r3, [r1, #0]
 80052f8:	50cd      	str	r5, [r1, r3]
 80052fa:	18cc      	adds	r4, r1, r3
 80052fc:	4630      	mov	r0, r6
 80052fe:	f000 f860 	bl	80053c2 <__malloc_unlock>
 8005302:	f104 000b 	add.w	r0, r4, #11
 8005306:	1d23      	adds	r3, r4, #4
 8005308:	f020 0007 	bic.w	r0, r0, #7
 800530c:	1ac3      	subs	r3, r0, r3
 800530e:	d01b      	beq.n	8005348 <_malloc_r+0xb0>
 8005310:	425a      	negs	r2, r3
 8005312:	50e2      	str	r2, [r4, r3]
 8005314:	bd70      	pop	{r4, r5, r6, pc}
 8005316:	428c      	cmp	r4, r1
 8005318:	bf0d      	iteet	eq
 800531a:	6863      	ldreq	r3, [r4, #4]
 800531c:	684b      	ldrne	r3, [r1, #4]
 800531e:	6063      	strne	r3, [r4, #4]
 8005320:	6013      	streq	r3, [r2, #0]
 8005322:	bf18      	it	ne
 8005324:	460c      	movne	r4, r1
 8005326:	e7e9      	b.n	80052fc <_malloc_r+0x64>
 8005328:	460c      	mov	r4, r1
 800532a:	6849      	ldr	r1, [r1, #4]
 800532c:	e7ca      	b.n	80052c4 <_malloc_r+0x2c>
 800532e:	1cc4      	adds	r4, r0, #3
 8005330:	f024 0403 	bic.w	r4, r4, #3
 8005334:	42a0      	cmp	r0, r4
 8005336:	d005      	beq.n	8005344 <_malloc_r+0xac>
 8005338:	1a21      	subs	r1, r4, r0
 800533a:	4630      	mov	r0, r6
 800533c:	f000 f830 	bl	80053a0 <_sbrk_r>
 8005340:	3001      	adds	r0, #1
 8005342:	d0cd      	beq.n	80052e0 <_malloc_r+0x48>
 8005344:	6025      	str	r5, [r4, #0]
 8005346:	e7d9      	b.n	80052fc <_malloc_r+0x64>
 8005348:	bd70      	pop	{r4, r5, r6, pc}
 800534a:	bf00      	nop
 800534c:	200000b0 	.word	0x200000b0
 8005350:	200000b4 	.word	0x200000b4

08005354 <_realloc_r>:
 8005354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005356:	4607      	mov	r7, r0
 8005358:	4614      	mov	r4, r2
 800535a:	460e      	mov	r6, r1
 800535c:	b921      	cbnz	r1, 8005368 <_realloc_r+0x14>
 800535e:	4611      	mov	r1, r2
 8005360:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005364:	f7ff bf98 	b.w	8005298 <_malloc_r>
 8005368:	b922      	cbnz	r2, 8005374 <_realloc_r+0x20>
 800536a:	f7ff ff47 	bl	80051fc <_free_r>
 800536e:	4625      	mov	r5, r4
 8005370:	4628      	mov	r0, r5
 8005372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005374:	f000 f826 	bl	80053c4 <_malloc_usable_size_r>
 8005378:	4284      	cmp	r4, r0
 800537a:	d90f      	bls.n	800539c <_realloc_r+0x48>
 800537c:	4621      	mov	r1, r4
 800537e:	4638      	mov	r0, r7
 8005380:	f7ff ff8a 	bl	8005298 <_malloc_r>
 8005384:	4605      	mov	r5, r0
 8005386:	2800      	cmp	r0, #0
 8005388:	d0f2      	beq.n	8005370 <_realloc_r+0x1c>
 800538a:	4631      	mov	r1, r6
 800538c:	4622      	mov	r2, r4
 800538e:	f7ff ff0f 	bl	80051b0 <memcpy>
 8005392:	4631      	mov	r1, r6
 8005394:	4638      	mov	r0, r7
 8005396:	f7ff ff31 	bl	80051fc <_free_r>
 800539a:	e7e9      	b.n	8005370 <_realloc_r+0x1c>
 800539c:	4635      	mov	r5, r6
 800539e:	e7e7      	b.n	8005370 <_realloc_r+0x1c>

080053a0 <_sbrk_r>:
 80053a0:	b538      	push	{r3, r4, r5, lr}
 80053a2:	4c06      	ldr	r4, [pc, #24]	; (80053bc <_sbrk_r+0x1c>)
 80053a4:	2300      	movs	r3, #0
 80053a6:	4605      	mov	r5, r0
 80053a8:	4608      	mov	r0, r1
 80053aa:	6023      	str	r3, [r4, #0]
 80053ac:	f000 f814 	bl	80053d8 <_sbrk>
 80053b0:	1c43      	adds	r3, r0, #1
 80053b2:	d102      	bne.n	80053ba <_sbrk_r+0x1a>
 80053b4:	6823      	ldr	r3, [r4, #0]
 80053b6:	b103      	cbz	r3, 80053ba <_sbrk_r+0x1a>
 80053b8:	602b      	str	r3, [r5, #0]
 80053ba:	bd38      	pop	{r3, r4, r5, pc}
 80053bc:	200006ec 	.word	0x200006ec

080053c0 <__malloc_lock>:
 80053c0:	4770      	bx	lr

080053c2 <__malloc_unlock>:
 80053c2:	4770      	bx	lr

080053c4 <_malloc_usable_size_r>:
 80053c4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80053c8:	2800      	cmp	r0, #0
 80053ca:	f1a0 0004 	sub.w	r0, r0, #4
 80053ce:	bfbc      	itt	lt
 80053d0:	580b      	ldrlt	r3, [r1, r0]
 80053d2:	18c0      	addlt	r0, r0, r3
 80053d4:	4770      	bx	lr
	...

080053d8 <_sbrk>:
 80053d8:	4b04      	ldr	r3, [pc, #16]	; (80053ec <_sbrk+0x14>)
 80053da:	6819      	ldr	r1, [r3, #0]
 80053dc:	4602      	mov	r2, r0
 80053de:	b909      	cbnz	r1, 80053e4 <_sbrk+0xc>
 80053e0:	4903      	ldr	r1, [pc, #12]	; (80053f0 <_sbrk+0x18>)
 80053e2:	6019      	str	r1, [r3, #0]
 80053e4:	6818      	ldr	r0, [r3, #0]
 80053e6:	4402      	add	r2, r0
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	4770      	bx	lr
 80053ec:	200000b8 	.word	0x200000b8
 80053f0:	200006f0 	.word	0x200006f0

080053f4 <_init>:
 80053f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f6:	bf00      	nop
 80053f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053fa:	bc08      	pop	{r3}
 80053fc:	469e      	mov	lr, r3
 80053fe:	4770      	bx	lr

08005400 <_fini>:
 8005400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005402:	bf00      	nop
 8005404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005406:	bc08      	pop	{r3}
 8005408:	469e      	mov	lr, r3
 800540a:	4770      	bx	lr
